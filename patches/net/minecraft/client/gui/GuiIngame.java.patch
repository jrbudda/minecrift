--- a/net/minecraft/client/gui/GuiIngame.java
+++ b/net/minecraft/client/gui/GuiIngame.java
@@ -5,6 +5,8 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+
+import de.fruitfly.ovr.OculusRift;
 import net.minecraft.block.material.Material;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.network.NetHandlerPlayClient;
@@ -28,6 +30,7 @@
 import net.minecraft.scoreboard.ScoreObjective;
 import net.minecraft.scoreboard.ScorePlayerTeam;
 import net.minecraft.scoreboard.Scoreboard;
+import net.minecraft.src.Reflector;
 import net.minecraft.util.Direction;
 import net.minecraft.util.EnumChatFormatting;
 import net.minecraft.util.FoodStats;
@@ -35,40 +38,45 @@
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.StringUtils;
+import net.minecraft.util.Vec3;
 import net.minecraft.world.EnumSkyBlock;
 import net.minecraft.world.chunk.Chunk;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
+import com.mtbs3d.minecrift.provider.MCOpenVR;
+
 public class GuiIngame extends Gui
 {
-    private static final ResourceLocation vignetteTexPath = new ResourceLocation("textures/misc/vignette.png");
-    private static final ResourceLocation widgetsTexPath = new ResourceLocation("textures/gui/widgets.png");
-    private static final ResourceLocation pumpkinBlurTexPath = new ResourceLocation("textures/misc/pumpkinblur.png");
-    private static final RenderItem itemRenderer = new RenderItem();
-    private final Random rand = new Random();
-    private final Minecraft mc;
+	/** MINECRIFT FORGE **/
+    protected static final ResourceLocation vignetteTexPath = new ResourceLocation("textures/misc/vignette.png");
+    protected static final ResourceLocation widgetsTexPath = new ResourceLocation("textures/gui/widgets.png");
+    protected static final ResourceLocation pumpkinBlurTexPath = new ResourceLocation("textures/misc/pumpkinblur.png");
+    protected static final RenderItem itemRenderer = new RenderItem();
+    protected final Random rand = new Random();
+    protected final Minecraft mc;
 
     /** ChatGUI instance that retains all previous chat data */
-    private final GuiNewChat persistantChatGUI;
-    private final GuiStreamIndicator streamIndicator;
-    private int updateCounter;
+    protected final GuiNewChat persistantChatGUI;
+    protected final GuiStreamIndicator streamIndicator;
+    protected int updateCounter;
 
     /** The string specifying which record music is playing */
-    private String recordPlaying = "";
+    protected String recordPlaying = "";
 
     /** How many ticks the record playing message will be displayed */
-    private int recordPlayingUpFor;
-    private boolean recordIsPlaying;
+    protected int recordPlayingUpFor;
+    protected boolean recordIsPlaying;
 
     /** Previous frame vignette brightness (slowly changes by 1% each frame) */
     public float prevVignetteBrightness = 1.0F;
 
     /** Remaining ticks the item highlight should be visible */
-    private int remainingHighlightTicks;
+    protected int remainingHighlightTicks;
 
     /** The ItemStack that is currently being highlighted */
-    private ItemStack highlightingItemStack;
+    protected ItemStack highlightingItemStack;
+	/** END MINECRIFT FORGE **/
     private static final String __OBFID = "CL_00000661";
 
     public GuiIngame(Minecraft p_i46379_1_)
@@ -78,6 +86,35 @@
         this.streamIndicator = new GuiStreamIndicator(this.mc);
     }
 
+    public String v3Format(Vec3 in){
+    	String frmat = "%.2f";
+        return "(" + String.format(frmat, in.xCoord) + ", " + String.format(frmat, in.yCoord)+ ", " + String.format(frmat, in.zCoord)+ ")";
+    }
+    
+	public void drawMouseMenuQuad(int mouseX, int mouseY)
+	{
+		GL11.glEnable(GL11.GL_BLEND);
+	
+		OpenGlHelper.glBlendFunc(GL11.GL_ONE_MINUS_DST_COLOR, GL11.GL_ONE_MINUS_SRC_COLOR, 1, 0); //color blend for corsshair transparency
+		GL11.glDisable(GL11.GL_DEPTH_TEST); //no occlusion on menu cursor		
+		GL11.glDisable(GL11.GL_LIGHTING);
+	
+		GL11.glColorMask(true,  true,  true,  false); // DISBALE CHANIGNG UNDERLYING ALPHA VALUE
+		
+		//GL11.glColor4f(.8f, .8f, .8f, 1f);
+		this.mc.mcProfiler.endStartSection("mouse pointer");
+		this.mc.getTextureManager().bindTexture(Gui.icons);
+		float menuMousePointerSize = 16f * this.mc.vrSettings.menuCrosshairScale;
+		this.mc.ingameGUI.drawCentredTexturedModalRect(mouseX, mouseY, menuMousePointerSize, menuMousePointerSize, 0, 0, 15, 15);
+        GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA); //back to normal alpha mode.
+		GL11.glDisable(GL11.GL_BLEND);
+	
+		GL11.glEnable(GL11.GL_DEPTH_TEST);
+		GL11.glEnable(GL11.GL_LIGHTING);
+
+		GL11.glColorMask(true,  true,  true,  true); // ENABLE CHANIGNG UNDERLYING ALPHA VALUE
+	}
+    
     /**
      * Render the ingame overlay with quick icon bar, ...
      */
@@ -121,20 +158,36 @@
         int var13;
 
         if (!this.mc.playerController.enableEverythingIsScrewedUpMode())
-        {
-            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+        { //render HUD
+            
+        	GL11.glColor4f(1F,1f,1F,1F);
+            GL11.glDisable(GL11.GL_DEPTH_TEST);
+            GL11.glEnable(GL11.GL_ALPHA_TEST);
+            GL11.glDisable(GL11.GL_BLEND);
+            
             this.mc.getTextureManager().bindTexture(widgetsTexPath);
             InventoryPlayer var31 = this.mc.thePlayer.inventory;
             this.zLevel = -90.0F;
+            
             this.drawTexturedModalRect(var6 / 2 - 91, var7 - 22, 0, 0, 182, 22);
             this.drawTexturedModalRect(var6 / 2 - 91 - 1 + var31.currentItem * 20, var7 - 22 - 1, 0, 22, 24, 22);
+            
+                 
             this.mc.getTextureManager().bindTexture(icons);
+            
             GL11.glEnable(GL11.GL_BLEND);
-            OpenGlHelper.glBlendFunc(775, 769, 1, 0);
-            this.drawTexturedModalRect(var6 / 2 - 7, var7 / 2 - 7, 0, 0, 16, 16);
+            GL11.glEnable(GL11.GL_DEPTH_TEST);
+            GL11.glEnable(GL11.GL_ALPHA_TEST);
+        
+            /** MINECRIFT ** - don't render the normal crosshair
+       		OpenGlHelper.glBlendFunc(775, 769, 1, 0);
+          	this.drawTexturedModalRect(var6 / 2 - 7, var7 / 2 - 7, 0, 0, 16, 16);
+			** END MINECRIFT **/
+			
+
             OpenGlHelper.glBlendFunc(770, 771, 1, 0);
             this.mc.mcProfiler.startSection("bossHealth");
-            this.renderBossHealth();
+            	this.renderBossHealth();
             this.mc.mcProfiler.endSection();
 
             if (this.mc.playerController.shouldDrawHUD())
@@ -143,19 +196,20 @@
             }
 
             this.mc.mcProfiler.startSection("actionBar");
-            GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-            RenderHelper.enableGUIStandardItemLighting();
-
-            for (var11 = 0; var11 < 9; ++var11)
-            {
-                var12 = var6 / 2 - 90 + var11 * 20 + 2;
-                var13 = var7 - 16 - 3;
-                this.renderInventorySlot(var11, var12, var13, p_73830_1_);
-            }
-
-            RenderHelper.disableStandardItemLighting();
-            GL11.glDisable(GL12.GL_RESCALE_NORMAL);
+	            GL11.glEnable(GL12.GL_RESCALE_NORMAL);
+	            RenderHelper.enableGUIStandardItemLighting();
+	
+	            for (var11 = 0; var11 < 9; ++var11)
+	            {
+	                var12 = var6 / 2 - 90 + var11 * 20 + 2;
+	                var13 = var7 - 16 - 3;
+	                this.renderInventorySlot(var11, var12, var13, p_73830_1_);
+	            }
+	
+	            RenderHelper.disableStandardItemLighting();
+	            GL11.glDisable(GL12.GL_RESCALE_NORMAL);
             this.mc.mcProfiler.endSection();
+
             GL11.glDisable(GL11.GL_BLEND);
         }
 
@@ -312,11 +366,14 @@
         {
             this.mc.mcProfiler.startSection("debug");
             GL11.glPushMatrix();
-            var8.drawStringWithShadow("Minecraft 1.7.10 (" + this.mc.debug + ")", 2, 2, 16777215);
-            var8.drawStringWithShadow(this.mc.debugInfoRenders(), 2, 12, 16777215);
-            var8.drawStringWithShadow(this.mc.getEntityDebug(), 2, 22, 16777215);
-            var8.drawStringWithShadow(this.mc.debugInfoEntities(), 2, 32, 16777215);
-            var8.drawStringWithShadow(this.mc.getWorldProviderName(), 2, 42, 16777215);
+			/** MINECRIFT **/
+            var8.drawStringWithShadow(this.mc.minecriftVerString + ", " + "J/OpenVR 1.0.0" , 2, 2, 16777215);
+			/** END MINECRIFT **/ 
+			var8.drawStringWithShadow(this.mc.debug, 2, 12, 16777215);
+            var8.drawStringWithShadow(this.mc.debugInfoRenders(), 2, 22, 16777215);
+            var8.drawStringWithShadow(this.mc.getEntityDebug(), 2, 32, 16777215);
+            var8.drawStringWithShadow(this.mc.debugInfoEntities(), 2, 42, 16777215);
+            var8.drawStringWithShadow(this.mc.getWorldProviderName(), 2, 52, 16777215);
             long var36 = Runtime.getRuntime().maxMemory();
             long var41 = Runtime.getRuntime().totalMemory();
             long var44 = Runtime.getRuntime().freeMemory();
@@ -326,12 +383,27 @@
             this.drawString(var8, var20, var6 - var8.getStringWidth(var20) - 2, 2, 14737632);
             var20 = "Allocated memory: " + var41 * 100L / var36 + "% (" + var41 / 1024L / 1024L + "MB)";
             this.drawString(var8, var20, var6 - var8.getStringWidth(var20) - 2, 12, 14737632);
+        
+            /** MINECRIFT FORGE **/
+			Object fmlCommonHandler = null;
+            if( Reflector.FMLCommonHandler_instance.exists()) {
+                fmlCommonHandler = Reflector.call( Reflector.FMLCommonHandler_instance, new Object[0]);
+            }
+            if( fmlCommonHandler != null) {
+                int offset = 22;
+                for (String brd : (List<String>)Reflector.call(fmlCommonHandler, Reflector.FMLCommonHandler_getBrandings, new Object[] {false}))
+                {
+                    this.drawString(var8, brd, var6 - var8.getStringWidth(brd) - 2, offset+=10, 14737632);
+                }
+            }
+			/** END MINECRIFT FORGE **/
+            
             var22 = MathHelper.floor_double(this.mc.thePlayer.posX);
             var23 = MathHelper.floor_double(this.mc.thePlayer.posY);
             int var24 = MathHelper.floor_double(this.mc.thePlayer.posZ);
-            this.drawString(var8, String.format("x: %.5f (%d) // c: %d (%d)", new Object[] {Double.valueOf(this.mc.thePlayer.posX), Integer.valueOf(var22), Integer.valueOf(var22 >> 4), Integer.valueOf(var22 & 15)}), 2, 64, 14737632);
-            this.drawString(var8, String.format("y: %.3f (feet pos, %.3f eyes pos)", new Object[] {Double.valueOf(this.mc.thePlayer.boundingBox.minY), Double.valueOf(this.mc.thePlayer.posY)}), 2, 72, 14737632);
-            this.drawString(var8, String.format("z: %.5f (%d) // c: %d (%d)", new Object[] {Double.valueOf(this.mc.thePlayer.posZ), Integer.valueOf(var24), Integer.valueOf(var24 >> 4), Integer.valueOf(var24 & 15)}), 2, 80, 14737632);
+            this.drawString(var8, String.format("x: %.2f (%d) // c: %d (%d)", new Object[] {Double.valueOf(this.mc.thePlayer.posX), Integer.valueOf(var22), Integer.valueOf(var22 >> 4), Integer.valueOf(var22 & 15)}), 2, 64, 14737632);
+            this.drawString(var8, String.format("y: %.2f (feet pos, %.2f eyes pos)", new Object[] {Double.valueOf(this.mc.thePlayer.boundingBox.minY), Double.valueOf(this.mc.thePlayer.posY)}), 2, 72, 14737632);
+            this.drawString(var8, String.format("z: %.2f (%d) // c: %d (%d)", new Object[] {Double.valueOf(this.mc.thePlayer.posZ), Integer.valueOf(var24), Integer.valueOf(var24 >> 4), Integer.valueOf(var24 & 15)}), 2, 80, 14737632);
             int var25 = MathHelper.floor_double((double)(this.mc.thePlayer.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
             this.drawString(var8, "f: " + var25 + " (" + Direction.directions[var25] + ") / " + MathHelper.wrapAngleTo180_float(this.mc.thePlayer.rotationYaw), 2, 88, 14737632);
 
@@ -347,6 +419,20 @@
             {
                 this.drawString(var8, String.format("shader: %s", new Object[] {this.mc.entityRenderer.getShaderGroup().getShaderGroupName()}), 2, 112, 14737632);
             }
+            if(true){
+            this.drawString(var8,"Room: " + v3Format( mc.vrPlayer.getRoomOriginPos_World()) , 2, 124, 14737632);
+            this.drawString(var8,"HMD: " + v3Format(mc.vrPlayer.getHMDPos_Room()) + v3Format(mc.vrPlayer.getHMDPos_World()) , 2, 132, 14737632);
+            this.drawString(var8,"Main: " +v3Format( mc.vrPlayer.getControllerPos_Room(0) )+ v3Format(mc.vrPlayer.getControllerMainPos_World()) , 2, 140, 14737632);
+            this.drawString(var8,"Offhand: " +v3Format( mc.vrPlayer.getControllerPos_Room(1)) + v3Format(mc.vrPlayer.getControllerOffhandPos_World()) , 2, 148, 14737632);
+            this.drawString(var8,"Player: "  + v3Format(mc.vrPlayer.getRoomOriginPos_World().subtract(mc.entityRenderer.interpolatedPlayerPos)) + v3Format(mc.entityRenderer.interpolatedPlayerPos) , 2, 156	, 14737632);
+            this.drawString(var8,"Crosshair: " + v3Format(mc.entityRenderer.crossVec) , 2, 164	, 14737632);
+            this.drawString(var8,"HMD Look: " +v3Format( mc.vrPlayer.getHMDDir_World()) , 2, 172	, 14737632);
+            this.drawString(var8,"Main Look: " + v3Format(mc.vrPlayer.getControllerMainDir_World()), 2, 180	, 14737632);
+            this.drawString(var8,"Offhand Look: " + v3Format(mc.vrPlayer.getControllerOffhandDir_World()) , 2, 188	, 14737632);
+            this.drawString(var8,"World Scale: " + mc.vrSettings.vrWorldScale + " World Rotation " + mc.vrSettings.vrWorldRotation , 2, 196	, 14737632);
+ //           this.drawString(var8,"Gui " + MCOpenVR.guiPos_World.x + " " + MCOpenVR.guiPos_World.y + " " + MCOpenVR.guiPos_World.z, 2, 204	, 14737632);
+            this.drawString(var8,"Swing " + mc.vrPlayer.tickDist * 20 + " " + mc.vrPlayer.lastmot, 2, 204	, 14737632);
+            }
 
             GL11.glPopMatrix();
             this.mc.mcProfiler.endSection();
@@ -501,9 +587,10 @@
     {
         this.streamIndicator.render((int)(p_152126_1_ - 10.0F), 10);
     }
-
-    private void renderScoreboard(ScoreObjective p_96136_1_, int p_96136_2_, int p_96136_3_, FontRenderer p_96136_4_)
-    {
+	/** MINECRIFT FORGE **/
+    protected void renderScoreboard(ScoreObjective p_96136_1_, int p_96136_2_, int p_96136_3_, FontRenderer p_96136_4_)
+    /** END MINECRIFT FORGE **/
+	{
         Scoreboard var5 = p_96136_1_.getScoreboard();
         Collection var6 = var5.getSortedScores(p_96136_1_);
 
@@ -549,9 +636,10 @@
             }
         }
     }
-
-    private void renderIcons(int p_110327_1_, int p_110327_2_)
-    {
+	/** MINECRIFT FORGE **/
+    protected void renderIcons(int p_110327_1_, int p_110327_2_)
+    /** END MINECRIFT FORGE **/
+	{
         boolean var3 = this.mc.thePlayer.hurtResistantTime / 3 % 2 == 1;
 
         if (this.mc.thePlayer.hurtResistantTime < 10)
@@ -830,7 +918,9 @@
     /**
      * Renders dragon's (boss) health on the HUD
      */
-    private void renderBossHealth()
+	/** MINECRIFT FORGE **/ 
+    protected void renderBossHealth()
+	/** END MINECRIFT FORGE **/
     {
         if (BossStatus.bossName != null && BossStatus.statusBarTime > 0)
         {
@@ -856,9 +946,15 @@
             this.mc.getTextureManager().bindTexture(icons);
         }
     }
-
-    private void renderPumpkinBlur(int p_73836_1_, int p_73836_2_)
+	/** MINECRIFT FORGE **/
+    protected void renderPumpkinBlur(int p_73836_1_, int p_73836_2_)
+	/** END MINECRIFT FORGE **/
     {
+        /** MINECRIFT **/
+        if (this.mc.stereoProvider.isStereo())
+            return;
+        /** END MINECRIFT **/
+
         GL11.glDisable(GL11.GL_DEPTH_TEST);
         GL11.glDepthMask(false);
         OpenGlHelper.glBlendFunc(770, 771, 1, 0);
@@ -881,8 +977,15 @@
     /**
      * Renders the vignette. Args: vignetteBrightness, width, height
      */
-    private void renderVignette(float p_73829_1_, int p_73829_2_, int p_73829_3_)
+	/** MINECRIFT FORGE **/ 
+    protected void renderVignette(float p_73829_1_, int p_73829_2_, int p_73829_3_)
+	/** END MINECRIFT FORGE **/
     {
+        /** MINECRIFT **/
+        if (this.mc.stereoProvider.isStereo())
+            return;
+        /** END MINECRIFT **/
+
         p_73829_1_ = 1.0F - p_73829_1_;
 
         if (p_73829_1_ < 0.0F)
@@ -913,8 +1016,9 @@
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
         OpenGlHelper.glBlendFunc(770, 771, 1, 0);
     }
-
-    private void func_130015_b(float p_130015_1_, int p_130015_2_, int p_130015_3_)
+	/** MINECRIFT FORGE **/
+    protected void func_130015_b(float p_130015_1_, int p_130015_2_, int p_130015_3_)
+	/** END MINECRIFT FORGE **/
     {
         if (p_130015_1_ < 1.0F)
         {
@@ -950,7 +1054,9 @@
     /**
      * Renders the specified item of the inventory slot at the specified location. Args: slot, x, y, partialTick
      */
-    private void renderInventorySlot(int p_73832_1_, int p_73832_2_, int p_73832_3_, float p_73832_4_)
+	/** MINECRIFT FORGE **/ 
+    protected void renderInventorySlot(int p_73832_1_, int p_73832_2_, int p_73832_3_, float p_73832_4_)
+	/** END MINECRIFT FORGE **/
     {
         ItemStack var5 = this.mc.thePlayer.inventory.mainInventory[p_73832_1_];
 
@@ -1039,4 +1145,23 @@
     {
         return this.updateCounter;
     }
+
+    /** ALL MINECRIFT ADDITIONS BELOW **/
+	
+    /**
+     * Draws a centred textured rectangle at the stored z-value. Args: x, y, width, height, u, v, texwidth, texheight
+     */
+    public void drawCentredTexturedModalRect(int centreX, int centreY, float width, float height, int u, int v, int texWidth, int texHeight)
+    {   	
+        float f = 0.00390625F;
+        float f1 = 0.00390625F;
+        Tessellator tessellator = Tessellator.instance;
+        tessellator.startDrawingQuads();
+        tessellator.addVertexWithUV((double)(centreX - (width / 2f)), (double)(centreY + (height / 2f)), (double)this.zLevel, (double)((float)(u + 0) * f), (double)((float)(v + texHeight) * f1));
+        tessellator.addVertexWithUV((double)(centreX + (width / 2f)), (double)(centreY + (height / 2f)), (double)this.zLevel, (double)((float)(u + texWidth) * f), (double)((float)(v + texHeight) * f1));
+        tessellator.addVertexWithUV((double)(centreX + (width / 2f)), (double)(centreY - (height / 2f)), (double)this.zLevel, (double)((float)(u + texWidth) * f), (double)((float)(v + 0) * f1));
+        tessellator.addVertexWithUV((double)(centreX - (width / 2f)), (double)(centreY - (height / 2f)), (double)this.zLevel, (double)((float)(u + 0) * f), (double)((float)(v + 0) * f1));
+        tessellator.draw();
+    }
 }
+
