--- a/net/minecraft/client/renderer/EntityRenderer.java
+++ b/net/minecraft/client/renderer/EntityRenderer.java
@@ -4,19 +4,43 @@
 import java.io.IOException;
 import java.lang.reflect.Field;
 import java.nio.FloatBuffer;
+import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.List;
 import java.util.Random;
 import java.util.concurrent.Callable;
+
+import com.mtbs3d.minecrift.provider.MCOpenVR;
+import com.mtbs3d.minecrift.provider.OpenVRPlayer;
+import com.mtbs3d.minecrift.render.OpenGLdebugging;
+import com.mtbs3d.minecrift.render.QuaternionHelper;
+import com.mtbs3d.minecrift.settings.VRSettings;
+import com.mtbs3d.minecrift.utils.Utils;
+import de.fruitfly.ovr.enums.Axis;
+import de.fruitfly.ovr.enums.EyeType;
+import de.fruitfly.ovr.enums.HandedSystem;
+import de.fruitfly.ovr.enums.RotateDirection;
+import de.fruitfly.ovr.structs.EulerOrient;
+import de.fruitfly.ovr.structs.Matrix4f;
+import de.fruitfly.ovr.structs.Quatf;
+import de.fruitfly.ovr.structs.Vector3f;
+import de.fruitfly.ovr.util.BufferUtil;
+import jopenvr.OpenVRUtil;
 import net.minecraft.block.Block;
+import net.minecraft.block.BlockLiquid;
 import net.minecraft.block.material.Material;
 import net.minecraft.client.Minecraft;
+import net.minecraft.client.audio.SoundManager;
 import net.minecraft.client.entity.EntityPlayerSP;
+import net.minecraft.client.gui.Gui;
 import net.minecraft.client.gui.GuiDownloadTerrain;
 import net.minecraft.client.gui.GuiMainMenu;
+import net.minecraft.client.gui.GuiWinGame;
 import net.minecraft.client.gui.MapItemRenderer;
 import net.minecraft.client.gui.ScaledResolution;
+import net.minecraft.client.model.ModelBase;
+import net.minecraft.client.model.ModelRenderer;
 import net.minecraft.client.multiplayer.WorldClient;
 import net.minecraft.client.particle.EffectRenderer;
 import net.minecraft.client.particle.EntityRainFX;
@@ -24,15 +48,18 @@
 import net.minecraft.client.renderer.culling.ClippingHelperImpl;
 import net.minecraft.client.renderer.culling.Frustrum;
 import net.minecraft.client.renderer.entity.RenderManager;
+import net.minecraft.client.renderer.entity.RenderPlayer;
 import net.minecraft.client.renderer.texture.DynamicTexture;
 import net.minecraft.client.renderer.texture.TextureMap;
 import net.minecraft.client.resources.I18n;
 import net.minecraft.client.resources.IResourceManager;
 import net.minecraft.client.resources.IResourceManagerReloadListener;
+import net.minecraft.client.shader.Framebuffer;
 import net.minecraft.client.shader.ShaderGroup;
 import net.minecraft.client.shader.ShaderLinkHelper;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
+import net.minecraft.enchantment.Enchantment;
 import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
@@ -40,16 +67,14 @@
 import net.minecraft.entity.item.EntityItemFrame;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
+import net.minecraft.init.Items;
+import net.minecraft.item.Item;
+import net.minecraft.item.ItemBlock;
+import net.minecraft.item.ItemBow;
+import net.minecraft.item.ItemStack;
 import net.minecraft.potion.Potion;
 import net.minecraft.server.integrated.IntegratedServer;
-import net.minecraft.src.Config;
-import net.minecraft.src.CustomColorizer;
-import net.minecraft.src.ItemRendererOF;
-import net.minecraft.src.RandomMobs;
-import net.minecraft.src.Reflector;
-import net.minecraft.src.RenderPlayerOF;
-import net.minecraft.src.TextureUtils;
-import net.minecraft.src.WrUpdates;
+import net.minecraft.src.*;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.ChatComponentText;
 import net.minecraft.util.MathHelper;
@@ -63,736 +88,981 @@
 import net.minecraft.world.biome.BiomeGenBase;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.core.pattern.ThrowablePatternConverter;
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
+import org.lwjgl.opengl.Drawable;
+import org.lwjgl.opengl.EXTTextureFilterAnisotropic;
 import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL12;
 import org.lwjgl.opengl.GLContext;
-import org.lwjgl.util.glu.GLU;
 import org.lwjgl.util.glu.Project;
+import org.lwjgl.util.vector.Quaternion;
+import org.lwjgl.util.vector.Vector4f;
+import paulscode.sound.SoundSystem;
+
+import javax.imageio.ImageIO;
+import javax.vecmath.Color3f;
 
 public class EntityRenderer implements IResourceManagerReloadListener
 {
-    private static final Logger logger = LogManager.getLogger();
-    private static final ResourceLocation locationRainPng = new ResourceLocation("textures/environment/rain.png");
-    private static final ResourceLocation locationSnowPng = new ResourceLocation("textures/environment/snow.png");
-    public static boolean anaglyphEnable;
-
-    /** Anaglyph field (0=R, 1=GB) */
-    public static int anaglyphField;
-
-    /** A reference to the Minecraft object. */
-    private Minecraft mc;
-    private float farPlaneDistance;
-    public ItemRenderer itemRenderer;
-    private final MapItemRenderer theMapItemRenderer;
-
-    /** Entity renderer update count */
-    private int rendererUpdateCount;
-
-    /** Pointed entity */
-    private Entity pointedEntity;
-    private MouseFilter mouseFilterXAxis = new MouseFilter();
-    private MouseFilter mouseFilterYAxis = new MouseFilter();
-
-    /** Mouse filter dummy 1 */
-    private MouseFilter mouseFilterDummy1 = new MouseFilter();
-
-    /** Mouse filter dummy 2 */
-    private MouseFilter mouseFilterDummy2 = new MouseFilter();
-
-    /** Mouse filter dummy 3 */
-    private MouseFilter mouseFilterDummy3 = new MouseFilter();
-
-    /** Mouse filter dummy 4 */
-    private MouseFilter mouseFilterDummy4 = new MouseFilter();
-    private float thirdPersonDistance = 4.0F;
-
-    /** Third person distance temp */
-    private float thirdPersonDistanceTemp = 4.0F;
-    private float debugCamYaw;
-    private float prevDebugCamYaw;
-    private float debugCamPitch;
-    private float prevDebugCamPitch;
-
-    /** Smooth cam yaw */
-    private float smoothCamYaw;
-
-    /** Smooth cam pitch */
-    private float smoothCamPitch;
-
-    /** Smooth cam filter X */
-    private float smoothCamFilterX;
-
-    /** Smooth cam filter Y */
-    private float smoothCamFilterY;
-
-    /** Smooth cam partial ticks */
-    private float smoothCamPartialTicks;
-    private float debugCamFOV;
-    private float prevDebugCamFOV;
-    private float camRoll;
-    private float prevCamRoll;
-
-    /**
-     * The texture id of the blocklight/skylight texture used for lighting effects
-     */
-    private final DynamicTexture lightmapTexture;
-
-    /**
-     * Colors computed in updateLightmap() and loaded into the lightmap emptyTexture
-     */
-    private final int[] lightmapColors;
-    private final ResourceLocation locationLightMap;
-
-    /** FOV modifier hand */
-    private float fovModifierHand;
-
-    /** FOV modifier hand prev */
-    private float fovModifierHandPrev;
-
-    /** FOV multiplier temp */
-    private float fovMultiplierTemp;
-    private float bossColorModifier;
-    private float bossColorModifierPrev;
-
-    /** Cloud fog mode */
-    private boolean cloudFog;
-    private final IResourceManager resourceManager;
-    public ShaderGroup theShaderGroup;
-    private static final ResourceLocation[] shaderResourceLocations = new ResourceLocation[] {new ResourceLocation("shaders/post/notch.json"), new ResourceLocation("shaders/post/fxaa.json"), new ResourceLocation("shaders/post/art.json"), new ResourceLocation("shaders/post/bumpy.json"), new ResourceLocation("shaders/post/blobs2.json"), new ResourceLocation("shaders/post/pencil.json"), new ResourceLocation("shaders/post/color_convolve.json"), new ResourceLocation("shaders/post/deconverge.json"), new ResourceLocation("shaders/post/flip.json"), new ResourceLocation("shaders/post/invert.json"), new ResourceLocation("shaders/post/ntsc.json"), new ResourceLocation("shaders/post/outline.json"), new ResourceLocation("shaders/post/phosphor.json"), new ResourceLocation("shaders/post/scan_pincushion.json"), new ResourceLocation("shaders/post/sobel.json"), new ResourceLocation("shaders/post/bits.json"), new ResourceLocation("shaders/post/desaturate.json"), new ResourceLocation("shaders/post/green.json"), new ResourceLocation("shaders/post/blur.json"), new ResourceLocation("shaders/post/wobble.json"), new ResourceLocation("shaders/post/blobs.json"), new ResourceLocation("shaders/post/antialias.json")};
-    public static final int shaderCount = shaderResourceLocations.length;
-    private int shaderIndex;
-    private double cameraZoom;
-    private double cameraYaw;
-    private double cameraPitch;
-
-    /** Previous frame time in milliseconds */
-    private long prevFrameTime;
-
-    /** End time of last render (ns) */
-    private long renderEndNanoTime;
-
-    /**
-     * Is set, updateCameraAndRender() calls updateLightmap(); set by updateTorchFlicker()
-     */
-    private boolean lightmapUpdateNeeded;
-
-    /** Torch flicker X */
-    float torchFlickerX;
-
-    /** Torch flicker DX */
-    float torchFlickerDX;
-
-    /** Torch flicker Y */
-    float torchFlickerY;
-
-    /** Torch flicker DY */
-    float torchFlickerDY;
-    private Random random;
-
-    /** Rain sound counter */
-    private int rainSoundCounter;
-
-    /** Rain X coords */
-    float[] rainXCoords;
-
-    /** Rain Y coords */
-    float[] rainYCoords;
-
-    /** Fog color buffer */
-    FloatBuffer fogColorBuffer;
-
-    /** red component of the fog color */
-    float fogColorRed;
-
-    /** green component of the fog color */
-    float fogColorGreen;
-
-    /** blue component of the fog color */
-    float fogColorBlue;
-
-    /** Fog color 2 */
-    private float fogColor2;
-
-    /** Fog color 1 */
-    private float fogColor1;
-
-    /**
-     * Debug view direction (0=OFF, 1=Front, 2=Right, 3=Back, 4=Left, 5=TiltLeft, 6=TiltRight)
-     */
-    public int debugViewDirection;
-    private static final String __OBFID = "CL_00000947";
-    private boolean initialized = false;
-    private World updatedWorld = null;
-    private boolean showDebugInfo = false;
-    public boolean fogStandard = false;
-    private long lastServerTime = 0L;
-    private int lastServerTicks = 0;
-    private int serverWaitTime = 0;
-    private int serverWaitTimeCurrent = 0;
-    private float avgServerTimeDiff = 0.0F;
-    private float avgServerTickDiff = 0.0F;
-    public long[] frameTimes = new long[512];
-    public long[] tickTimes = new long[512];
-    public long[] chunkTimes = new long[512];
-    public long[] serverTimes = new long[512];
-    public int numRecordedFrameTimes = 0;
-    public long prevFrameTimeNano = -1L;
-    private boolean lastShowDebugInfo = false;
-    private boolean showExtendedDebugInfo = false;
-    private long lastErrorCheckTimeMs = 0L;
-
-    public EntityRenderer(Minecraft p_i45076_1_, IResourceManager p_i45076_2_)
-    {
-        this.shaderIndex = shaderCount;
-        this.cameraZoom = 1.0D;
-        this.prevFrameTime = Minecraft.getSystemTime();
-        this.random = new Random();
-        this.fogColorBuffer = GLAllocation.createDirectFloatBuffer(16);
-        this.mc = p_i45076_1_;
-        this.resourceManager = p_i45076_2_;
-        this.theMapItemRenderer = new MapItemRenderer(p_i45076_1_.getTextureManager());
-        this.itemRenderer = new ItemRenderer(p_i45076_1_);
-        this.lightmapTexture = new DynamicTexture(16, 16);
-        this.locationLightMap = p_i45076_1_.getTextureManager().getDynamicTextureLocation("lightMap", this.lightmapTexture);
-        this.lightmapColors = this.lightmapTexture.getTextureData();
-        this.theShaderGroup = null;
-    }
-
-    public boolean isShaderActive()
-    {
-        return OpenGlHelper.shadersSupported && this.theShaderGroup != null;
-    }
-
-    public void stopUseShader()
-    {
-        if (this.theShaderGroup != null)
-        {
-            this.theShaderGroup.deleteShaderGroup();
-        }
-
-        this.theShaderGroup = null;
-        this.shaderIndex = shaderCount;
-    }
-
-    public void deactivateShader()
-    {
-        if (this.theShaderGroup != null)
-        {
-            this.theShaderGroup.deleteShaderGroup();
-        }
-
-        this.theShaderGroup = null;
-        this.shaderIndex = shaderCount;
-    }
-
-    public void activateNextShader()
-    {
-        if (OpenGlHelper.isFramebufferEnabled())
-        {
-            if (OpenGlHelper.shadersSupported)
-            {
-                if (this.theShaderGroup != null)
-                {
-                    this.theShaderGroup.deleteShaderGroup();
-                }
-
-                this.shaderIndex = (this.shaderIndex + 1) % (shaderResourceLocations.length + 1);
-
-                if (this.shaderIndex != shaderCount)
-                {
-                    try
-                    {
-                        logger.info("Selecting effect " + shaderResourceLocations[this.shaderIndex]);
-                        this.theShaderGroup = new ShaderGroup(this.mc.getTextureManager(), this.resourceManager, this.mc.getFramebuffer(), shaderResourceLocations[this.shaderIndex]);
-                        this.theShaderGroup.createBindFramebuffers(this.mc.displayWidth, this.mc.displayHeight);
-                    }
-                    catch (IOException var2)
-                    {
-                        logger.warn("Failed to load shader: " + shaderResourceLocations[this.shaderIndex], var2);
-                        this.shaderIndex = shaderCount;
-                    }
-                    catch (JsonSyntaxException var3)
-                    {
-                        logger.warn("Failed to load shader: " + shaderResourceLocations[this.shaderIndex], var3);
-                        this.shaderIndex = shaderCount;
-                    }
-                }
-                else
-                {
-                    this.theShaderGroup = null;
-                    logger.info("No effect selected");
-                }
-            }
-        }
-    }
-
-    public void onResourceManagerReload(IResourceManager par1ResourceManager)
-    {
-        if (this.theShaderGroup != null)
-        {
-            this.theShaderGroup.deleteShaderGroup();
-        }
-
-        if (this.shaderIndex != shaderCount)
-        {
-            try
-            {
-                this.theShaderGroup = new ShaderGroup(this.mc.getTextureManager(), par1ResourceManager, this.mc.getFramebuffer(), shaderResourceLocations[this.shaderIndex]);
-                this.theShaderGroup.createBindFramebuffers(this.mc.displayWidth, this.mc.displayHeight);
-            }
-            catch (IOException var3)
-            {
-                logger.warn("Failed to load shader: " + shaderResourceLocations[this.shaderIndex], var3);
-                this.shaderIndex = shaderCount;
-            }
-        }
-    }
-
-    /**
-     * Updates the entity renderer
-     */
-    public void updateRenderer()
-    {
-        if (OpenGlHelper.shadersSupported && ShaderLinkHelper.getStaticShaderLinkHelper() == null)
-        {
-            ShaderLinkHelper.setNewStaticShaderLinkHelper();
-        }
-
-        this.updateFovModifierHand();
-        this.updateTorchFlicker();
-        this.fogColor2 = this.fogColor1;
-        this.thirdPersonDistanceTemp = this.thirdPersonDistance;
-        this.prevDebugCamYaw = this.debugCamYaw;
-        this.prevDebugCamPitch = this.debugCamPitch;
-        this.prevDebugCamFOV = this.debugCamFOV;
-        this.prevCamRoll = this.camRoll;
-        float var1;
-        float var2;
-
-        if (this.mc.gameSettings.smoothCamera)
-        {
-            var1 = this.mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
-            var2 = var1 * var1 * var1 * 8.0F;
-            this.smoothCamFilterX = this.mouseFilterXAxis.smooth(this.smoothCamYaw, 0.05F * var2);
-            this.smoothCamFilterY = this.mouseFilterYAxis.smooth(this.smoothCamPitch, 0.05F * var2);
-            this.smoothCamPartialTicks = 0.0F;
-            this.smoothCamYaw = 0.0F;
-            this.smoothCamPitch = 0.0F;
-        }
-
-        if (this.mc.renderViewEntity == null)
-        {
-            this.mc.renderViewEntity = this.mc.thePlayer;
-        }
-
-        var1 = this.mc.theWorld.getLightBrightness(MathHelper.floor_double(this.mc.renderViewEntity.posX), MathHelper.floor_double(this.mc.renderViewEntity.posY), MathHelper.floor_double(this.mc.renderViewEntity.posZ));
-        var2 = (float)this.mc.gameSettings.renderDistanceChunks / 16.0F;
-        float var3 = var1 * (1.0F - var2) + var2;
-        this.fogColor1 += (var3 - this.fogColor1) * 0.1F;
-        ++this.rendererUpdateCount;
-        this.itemRenderer.updateEquippedItem();
-        this.addRainParticles();
-        this.bossColorModifierPrev = this.bossColorModifier;
-
-        if (BossStatus.hasColorModifier)
-        {
-            this.bossColorModifier += 0.05F;
-
-            if (this.bossColorModifier > 1.0F)
-            {
-                this.bossColorModifier = 1.0F;
-            }
-
-            BossStatus.hasColorModifier = false;
-        }
-        else if (this.bossColorModifier > 0.0F)
-        {
-            this.bossColorModifier -= 0.0125F;
-        }
-    }
-
-    public ShaderGroup getShaderGroup()
-    {
-        return this.theShaderGroup;
-    }
-
-    public void updateShaderGroupSize(int p_147704_1_, int p_147704_2_)
-    {
-        if (OpenGlHelper.shadersSupported && this.theShaderGroup != null)
-        {
-            this.theShaderGroup.createBindFramebuffers(p_147704_1_, p_147704_2_);
-        }
-    }
-
-    /**
-     * Finds what block or object the mouse is over at the specified partial tick time. Args: partialTickTime
-     */
-    public void getMouseOver(float par1)
-    {
-        if (this.mc.renderViewEntity != null && this.mc.theWorld != null)
-        {
-            this.mc.pointedEntity = null;
-            double var2 = (double)this.mc.playerController.getBlockReachDistance();
-            this.mc.objectMouseOver = this.mc.renderViewEntity.rayTrace(var2, par1);
-            double var4 = var2;
-            Vec3 var6 = this.mc.renderViewEntity.getPosition(par1);
-
-            if (this.mc.playerController.extendedReach())
-            {
-                var2 = 6.0D;
-                var4 = 6.0D;
-            }
-            else
-            {
-                if (var2 > 3.0D)
-                {
-                    var4 = 3.0D;
-                }
-
-                var2 = var4;
-            }
-
-            if (this.mc.objectMouseOver != null)
-            {
-                var4 = this.mc.objectMouseOver.hitVec.distanceTo(var6);
-            }
-
-            Vec3 var7 = this.mc.renderViewEntity.getLook(par1);
-            Vec3 var8 = var6.addVector(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2);
-            this.pointedEntity = null;
-            Vec3 var9 = null;
-            float var10 = 1.0F;
-            List var11 = this.mc.theWorld.getEntitiesWithinAABBExcludingEntity(this.mc.renderViewEntity, this.mc.renderViewEntity.boundingBox.addCoord(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2).expand((double)var10, (double)var10, (double)var10));
-            double var12 = var4;
-
-            for (int var14 = 0; var14 < var11.size(); ++var14)
-            {
-                Entity var15 = (Entity)var11.get(var14);
-
-                if (var15.canBeCollidedWith())
-                {
-                    float var16 = var15.getCollisionBorderSize();
-                    AxisAlignedBB var17 = var15.boundingBox.expand((double)var16, (double)var16, (double)var16);
-                    MovingObjectPosition var18 = var17.calculateIntercept(var6, var8);
-
-                    if (var17.isVecInside(var6))
-                    {
-                        if (0.0D < var12 || var12 == 0.0D)
-                        {
-                            this.pointedEntity = var15;
-                            var9 = var18 == null ? var6 : var18.hitVec;
-                            var12 = 0.0D;
-                        }
-                    }
-                    else if (var18 != null)
-                    {
-                        double var19 = var6.distanceTo(var18.hitVec);
-
-                        if (var19 < var12 || var12 == 0.0D)
-                        {
-                            boolean canRiderInteract = false;
-
-                            if (Reflector.ForgeEntity_canRiderInteract.exists())
-                            {
-                                canRiderInteract = Reflector.callBoolean(var15, Reflector.ForgeEntity_canRiderInteract, new Object[0]);
-                            }
-
-                            if (var15 == this.mc.renderViewEntity.ridingEntity && !canRiderInteract)
-                            {
-                                if (var12 == 0.0D)
-                                {
-                                    this.pointedEntity = var15;
-                                    var9 = var18.hitVec;
-                                }
-                            }
-                            else
-                            {
-                                this.pointedEntity = var15;
-                                var9 = var18.hitVec;
-                                var12 = var19;
-                            }
-                        }
-                    }
-                }
-            }
-
-            if (this.pointedEntity != null && (var12 < var4 || this.mc.objectMouseOver == null))
-            {
-                this.mc.objectMouseOver = new MovingObjectPosition(this.pointedEntity, var9);
-
-                if (this.pointedEntity instanceof EntityLivingBase || this.pointedEntity instanceof EntityItemFrame)
-                {
-                    this.mc.pointedEntity = this.pointedEntity;
-                }
-            }
-        }
-    }
-
-    /**
-     * Update FOV modifier hand
-     */
-    private void updateFovModifierHand()
-    {
-        if (this.mc.renderViewEntity instanceof EntityPlayerSP)
-        {
-            EntityPlayerSP var1 = (EntityPlayerSP)this.mc.renderViewEntity;
-            this.fovMultiplierTemp = var1.getFOVMultiplier();
-        }
-        else
-        {
-            this.fovMultiplierTemp = this.mc.thePlayer.getFOVMultiplier();
-        }
-
-        this.fovModifierHandPrev = this.fovModifierHand;
-        this.fovModifierHand += (this.fovMultiplierTemp - this.fovModifierHand) * 0.5F;
-
-        if (this.fovModifierHand > 1.5F)
-        {
-            this.fovModifierHand = 1.5F;
-        }
-
-        if (this.fovModifierHand < 0.1F)
-        {
-            this.fovModifierHand = 0.1F;
-        }
-    }
-
-    /**
-     * Changes the field of view of the player depending on if they are underwater or not
-     */
-    private float getFOVModifier(float par1, boolean par2)
-    {
-        if (this.debugViewDirection > 0)
-        {
-            return 90.0F;
-        }
-        else
-        {
-            EntityLivingBase var3 = this.mc.renderViewEntity;
-            float var4 = 70.0F;
-
-            if (par2)
-            {
-                var4 = this.mc.gameSettings.fovSetting;
-                var4 *= this.fovModifierHandPrev + (this.fovModifierHand - this.fovModifierHandPrev) * par1;
-            }
-
-            boolean zoomActive = false;
-
-            if (this.mc.currentScreen == null)
-            {
-                if (this.mc.gameSettings.ofKeyBindZoom.getKeyCode() < 0)
-                {
-                    zoomActive = Mouse.isButtonDown(this.mc.gameSettings.ofKeyBindZoom.getKeyCode() + 100);
-                }
-                else
-                {
-                    zoomActive = Keyboard.isKeyDown(this.mc.gameSettings.ofKeyBindZoom.getKeyCode());
-                }
-            }
-
-            if (zoomActive)
-            {
-                if (!Config.zoomMode)
-                {
-                    Config.zoomMode = true;
-                    this.mc.gameSettings.smoothCamera = true;
-                }
-
-                if (Config.zoomMode)
-                {
-                    var4 /= 4.0F;
-                }
-            }
-            else if (Config.zoomMode)
-            {
-                Config.zoomMode = false;
-                this.mc.gameSettings.smoothCamera = false;
-                this.mouseFilterXAxis = new MouseFilter();
-                this.mouseFilterYAxis = new MouseFilter();
-            }
-
-            if (var3.getHealth() <= 0.0F)
-            {
-                float var6 = (float)var3.deathTime + par1;
-                var4 /= (1.0F - 500.0F / (var6 + 500.0F)) * 2.0F + 1.0F;
-            }
-
-            Block var61 = ActiveRenderInfo.getBlockAtEntityViewpoint(this.mc.theWorld, var3, par1);
-
-            if (var61.getMaterial() == Material.water)
-            {
-                var4 = var4 * 60.0F / 70.0F;
-            }
-
-            return var4 + this.prevDebugCamFOV + (this.debugCamFOV - this.prevDebugCamFOV) * par1;
-        }
-    }
-
-    private void hurtCameraEffect(float par1)
-    {
-        EntityLivingBase var2 = this.mc.renderViewEntity;
-        float var3 = (float)var2.hurtTime - par1;
-        float var4;
-
-        if (var2.getHealth() <= 0.0F)
-        {
-            var4 = (float)var2.deathTime + par1;
-            GL11.glRotatef(40.0F - 8000.0F / (var4 + 200.0F), 0.0F, 0.0F, 1.0F);
-        }
-
-        if (var3 >= 0.0F)
-        {
-            var3 /= (float)var2.maxHurtTime;
-            var3 = MathHelper.sin(var3 * var3 * var3 * var3 * (float)Math.PI);
-            var4 = var2.attackedAtYaw;
-            GL11.glRotatef(-var4, 0.0F, 1.0F, 0.0F);
-            GL11.glRotatef(-var3 * 14.0F, 0.0F, 0.0F, 1.0F);
-            GL11.glRotatef(var4, 0.0F, 1.0F, 0.0F);
-        }
-    }
-
-    /**
-     * Setups all the GL settings for view bobbing. Args: partialTickTime
-     */
-    private void setupViewBobbing(float par1)
-    {
-        if (this.mc.renderViewEntity instanceof EntityPlayer)
-        {
-            EntityPlayer var2 = (EntityPlayer)this.mc.renderViewEntity;
-            float var3 = var2.distanceWalkedModified - var2.prevDistanceWalkedModified;
-            float var4 = -(var2.distanceWalkedModified + var3 * par1);
-            float var5 = var2.prevCameraYaw + (var2.cameraYaw - var2.prevCameraYaw) * par1;
-            float var6 = var2.prevCameraPitch + (var2.cameraPitch - var2.prevCameraPitch) * par1;
-            GL11.glTranslatef(MathHelper.sin(var4 * (float)Math.PI) * var5 * 0.5F, -Math.abs(MathHelper.cos(var4 * (float)Math.PI) * var5), 0.0F);
-            GL11.glRotatef(MathHelper.sin(var4 * (float)Math.PI) * var5 * 3.0F, 0.0F, 0.0F, 1.0F);
-            GL11.glRotatef(Math.abs(MathHelper.cos(var4 * (float)Math.PI - 0.2F) * var5) * 5.0F, 1.0F, 0.0F, 0.0F);
-            GL11.glRotatef(var6, 1.0F, 0.0F, 0.0F);
-        }
-    }
-
-    /**
-     * sets up player's eye (or camera in third person mode)
-     */
-    private void orientCamera(float par1)
-    {
-        EntityLivingBase var2 = this.mc.renderViewEntity;
-        float var3 = var2.yOffset - 1.62F;
-        double var4 = var2.prevPosX + (var2.posX - var2.prevPosX) * (double)par1;
-        double var6 = var2.prevPosY + (var2.posY - var2.prevPosY) * (double)par1 - (double)var3;
-        double var8 = var2.prevPosZ + (var2.posZ - var2.prevPosZ) * (double)par1;
-        GL11.glRotatef(this.prevCamRoll + (this.camRoll - this.prevCamRoll) * par1, 0.0F, 0.0F, 1.0F);
-
-        if (var2.isPlayerSleeping())
-        {
-            var3 = (float)((double)var3 + 1.0D);
-            GL11.glTranslatef(0.0F, 0.3F, 0.0F);
-
-            if (!this.mc.gameSettings.debugCamEnable)
-            {
-                Block var27 = this.mc.theWorld.getBlock(MathHelper.floor_double(var2.posX), MathHelper.floor_double(var2.posY), MathHelper.floor_double(var2.posZ));
-
-                if (Reflector.ForgeHooksClient_orientBedCamera.exists())
-                {
-                    Reflector.callVoid(Reflector.ForgeHooksClient_orientBedCamera, new Object[] {this.mc, var2});
-                }
-                else if (var27 == Blocks.bed)
-                {
-                    int var11 = this.mc.theWorld.getBlockMetadata(MathHelper.floor_double(var2.posX), MathHelper.floor_double(var2.posY), MathHelper.floor_double(var2.posZ));
-                    int var13 = var11 & 3;
-                    GL11.glRotatef((float)(var13 * 90), 0.0F, 1.0F, 0.0F);
-                }
-
-                GL11.glRotatef(var2.prevRotationYaw + (var2.rotationYaw - var2.prevRotationYaw) * par1 + 180.0F, 0.0F, -1.0F, 0.0F);
-                GL11.glRotatef(var2.prevRotationPitch + (var2.rotationPitch - var2.prevRotationPitch) * par1, -1.0F, 0.0F, 0.0F);
-            }
-        }
-        else if (this.mc.gameSettings.thirdPersonView > 0)
-        {
-            double var271 = (double)(this.thirdPersonDistanceTemp + (this.thirdPersonDistance - this.thirdPersonDistanceTemp) * par1);
-            float var28;
-            float var281;
-
-            if (this.mc.gameSettings.debugCamEnable)
-            {
-                var28 = this.prevDebugCamYaw + (this.debugCamYaw - this.prevDebugCamYaw) * par1;
-                var281 = this.prevDebugCamPitch + (this.debugCamPitch - this.prevDebugCamPitch) * par1;
-                GL11.glTranslatef(0.0F, 0.0F, (float)(-var271));
-                GL11.glRotatef(var281, 1.0F, 0.0F, 0.0F);
-                GL11.glRotatef(var28, 0.0F, 1.0F, 0.0F);
-            }
-            else
-            {
-                var28 = var2.rotationYaw;
-                var281 = var2.rotationPitch;
-
-                if (this.mc.gameSettings.thirdPersonView == 2)
-                {
-                    var281 += 180.0F;
-                }
-
-                double var14 = (double)(-MathHelper.sin(var28 / 180.0F * (float)Math.PI) * MathHelper.cos(var281 / 180.0F * (float)Math.PI)) * var271;
-                double var16 = (double)(MathHelper.cos(var28 / 180.0F * (float)Math.PI) * MathHelper.cos(var281 / 180.0F * (float)Math.PI)) * var271;
-                double var18 = (double)(-MathHelper.sin(var281 / 180.0F * (float)Math.PI)) * var271;
-
-                for (int var20 = 0; var20 < 8; ++var20)
-                {
-                    float var21 = (float)((var20 & 1) * 2 - 1);
-                    float var22 = (float)((var20 >> 1 & 1) * 2 - 1);
-                    float var23 = (float)((var20 >> 2 & 1) * 2 - 1);
-                    var21 *= 0.1F;
-                    var22 *= 0.1F;
-                    var23 *= 0.1F;
-                    MovingObjectPosition var24 = this.mc.theWorld.rayTraceBlocks(Vec3.createVectorHelper(var4 + (double)var21, var6 + (double)var22, var8 + (double)var23), Vec3.createVectorHelper(var4 - var14 + (double)var21 + (double)var23, var6 - var18 + (double)var22, var8 - var16 + (double)var23));
-
-                    if (var24 != null)
-                    {
-                        double var25 = var24.hitVec.distanceTo(Vec3.createVectorHelper(var4, var6, var8));
-
-                        if (var25 < var271)
-                        {
-                            var271 = var25;
-                        }
-                    }
-                }
-
-                if (this.mc.gameSettings.thirdPersonView == 2)
-                {
-                    GL11.glRotatef(180.0F, 0.0F, 1.0F, 0.0F);
-                }
-
-                GL11.glRotatef(var2.rotationPitch - var281, 1.0F, 0.0F, 0.0F);
-                GL11.glRotatef(var2.rotationYaw - var28, 0.0F, 1.0F, 0.0F);
-                GL11.glTranslatef(0.0F, 0.0F, (float)(-var271));
-                GL11.glRotatef(var28 - var2.rotationYaw, 0.0F, 1.0F, 0.0F);
-                GL11.glRotatef(var281 - var2.rotationPitch, 1.0F, 0.0F, 0.0F);
-            }
-        }
-        else
-        {
-            GL11.glTranslatef(0.0F, 0.0F, -0.1F);
-        }
-
-        if (!this.mc.gameSettings.debugCamEnable)
-        {
-            GL11.glRotatef(var2.prevRotationPitch + (var2.rotationPitch - var2.prevRotationPitch) * par1, 1.0F, 0.0F, 0.0F);
-            GL11.glRotatef(var2.prevRotationYaw + (var2.rotationYaw - var2.prevRotationYaw) * par1 + 180.0F, 0.0F, 1.0F, 0.0F);
-        }
-
-        GL11.glTranslatef(0.0F, var3, 0.0F);
-        var4 = var2.prevPosX + (var2.posX - var2.prevPosX) * (double)par1;
-        var6 = var2.prevPosY + (var2.posY - var2.prevPosY) * (double)par1 - (double)var3;
-        var8 = var2.prevPosZ + (var2.posZ - var2.prevPosZ) * (double)par1;
-        this.cloudFog = this.mc.renderGlobal.hasCloudFog(var4, var6, var8, par1);
-    }
-
-    /**
-     * sets up projection, view effects, camera position/rotation
-     */
-    private void setupCameraTransform(float par1, int par2)
-    {
+	private static final Logger logger = LogManager.getLogger();
+	private static final ResourceLocation locationRainPng = new ResourceLocation("textures/environment/rain.png");
+	private static final ResourceLocation locationSnowPng = new ResourceLocation("textures/environment/snow.png");
+	public static boolean anaglyphEnable;
+
+	/** Anaglyph field (0=R, 1=GB) */
+	public static int anaglyphField;
+
+	/** A reference to the Minecraft object. */
+	private Minecraft mc;
+	/** MINECRIFT */
+	public float farPlaneDistance;
+	public static final float MAX_CROSSHAIR_DISTANCE = 64f;
+	/** END MINECRIFT */
+	public ItemRenderer itemRenderer;
+	private final MapItemRenderer theMapItemRenderer;
+
+	/** Entity renderer update count */
+	private int rendererUpdateCount;
+
+	/** Pointed entity */
+	private MouseFilter mouseFilterXAxis = new MouseFilter();
+	private MouseFilter mouseFilterYAxis = new MouseFilter();
+
+	/** Mouse filter dummy 1 */
+	private MouseFilter mouseFilterDummy1 = new MouseFilter();
+
+	/** Mouse filter dummy 2 */
+	private MouseFilter mouseFilterDummy2 = new MouseFilter();
+
+	/** Mouse filter dummy 3 */
+	private MouseFilter mouseFilterDummy3 = new MouseFilter();
+
+	/** Mouse filter dummy 4 */
+	private MouseFilter mouseFilterDummy4 = new MouseFilter();
+	private float thirdPersonDistance = 4.0F;
+
+	/** Third person distance temp */
+	private float thirdPersonDistanceTemp = 4.0F;
+	private float debugCamYaw;
+	private float prevDebugCamYaw;
+	private float debugCamPitch;
+	private float prevDebugCamPitch;
+
+	/** Smooth cam yaw */
+	private float smoothCamYaw;
+
+	/** Smooth cam pitch */
+	private float smoothCamPitch;
+
+	/** Smooth cam filter X */
+	private float smoothCamFilterX;
+
+	/** Smooth cam filter Y */
+	private float smoothCamFilterY;
+
+	/** Smooth cam partial ticks */
+	private float smoothCamPartialTicks;
+	private float debugCamFOV;
+	private float prevDebugCamFOV;
+	private float camRoll;
+	private float prevCamRoll;
+
+	/**
+	 * The texture id of the blocklight/skylight texture used for lighting effects
+	 */
+	private final DynamicTexture lightmapTexture;
+
+	/**
+	 * Colors computed in updateLightmap() and loaded into the lightmap emptyTexture
+	 */
+	private final int[] lightmapColors;
+	private final ResourceLocation locationLightMap;
+
+	/** FOV modifier hand */
+	private float fovModifierHand;
+
+	/** FOV modifier hand prev */
+	private float fovModifierHandPrev;
+
+	/** FOV multiplier temp */
+	private float fovMultiplierTemp;
+	private float bossColorModifier;
+	private float bossColorModifierPrev;
+
+	/** Cloud fog mode */
+	private boolean cloudFog;
+	private final IResourceManager resourceManager;
+	public ShaderGroup theShaderGroup;
+
+	/** MINECRIFT */
+	public static final ResourceLocation[] shaderResourceLocations = new ResourceLocation[] {new ResourceLocation("shaders/post/notch.json"), new ResourceLocation("shaders/post/fxaa.json"), new ResourceLocation("shaders/post/art.json"), new ResourceLocation("shaders/post/bumpy.json"), new ResourceLocation("shaders/post/blobs2.json"), new ResourceLocation("shaders/post/pencil.json"), new ResourceLocation("shaders/post/color_convolve.json"), new ResourceLocation("shaders/post/deconverge.json"), new ResourceLocation("shaders/post/flip.json"), new ResourceLocation("shaders/post/invert.json"), new ResourceLocation("shaders/post/ntsc.json"), new ResourceLocation("shaders/post/outline.json"), new ResourceLocation("shaders/post/phosphor.json"), new ResourceLocation("shaders/post/scan_pincushion.json"), new ResourceLocation("shaders/post/sobel.json"), new ResourceLocation("shaders/post/bits.json"), new ResourceLocation("shaders/post/desaturate.json"), new ResourceLocation("shaders/post/green.json"), new ResourceLocation("shaders/post/blur.json"), new ResourceLocation("shaders/post/wobble.json"), new ResourceLocation("shaders/post/blobs.json"), new ResourceLocation("shaders/post/antialias.json")};
+	public static final int shaderCount = shaderResourceLocations.length;
+	public double cameraZoom;
+	public double cameraYaw;
+	public double cameraPitch;
+	/** END MINECRIFT */
+
+	/** Previous frame time in milliseconds */
+	private long prevFrameTime;
+
+	/** End time of last render (ns) */
+	private long renderEndNanoTime;
+
+	/**
+	 * Is set, updateCameraAndRender() calls updateLightmap(); set by updateTorchFlicker()
+	 */
+	private boolean lightmapUpdateNeeded;
+
+	/** Torch flicker X */
+	float torchFlickerX;
+
+	/** Torch flicker DX */
+	float torchFlickerDX;
+
+	/** Torch flicker Y */
+	float torchFlickerY;
+
+	/** Torch flicker DY */
+	float torchFlickerDY;
+	private Random random;
+
+	/** Rain sound counter */
+	private int rainSoundCounter;
+
+	/** Rain X coords */
+	float[] rainXCoords;
+
+	/** Rain Y coords */
+	float[] rainYCoords;
+
+	/** Fog color buffer */
+	FloatBuffer fogColorBuffer;
+
+	/** red component of the fog color */
+	float fogColorRed;
+
+	/** green component of the fog color */
+	float fogColorGreen;
+
+	/** blue component of the fog color */
+	float fogColorBlue;
+
+	/** Fog color 2 */
+	private float fogColor2;
+
+	/** Fog color 1 */
+	private float fogColor1;
+
+	/**
+	 * Debug view direction (0=OFF, 1=Front, 2=Right, 3=Back, 4=Left, 5=TiltLeft, 6=TiltRight)
+	 */
+	public int debugViewDirection;
+	private static final String __OBFID = "CL_00000947";
+	private boolean initialized = false;
+	private World updatedWorld = null;
+	private boolean showDebugInfo = false;
+	public boolean fogStandard = false;
+	private long lastServerTime = 0L;
+	private int lastServerTicks = 0;
+	private int serverWaitTime = 0;
+	private int serverWaitTimeCurrent = 0;
+	private float avgServerTimeDiff = 0.0F;
+	private float avgServerTickDiff = 0.0F;
+	public long[] frameTimes = new long[512];
+	public long[] tickTimes = new long[512];
+	public long[] chunkTimes = new long[512];
+	public long[] serverTimes = new long[512];
+	public int numRecordedFrameTimes = 0;
+	public long prevFrameTimeNano = -1L;
+	private boolean lastShowDebugInfo = false;
+	private boolean showExtendedDebugInfo = false;
+	private long lastErrorCheckTimeMs = 0L;
+
+	/** MINECRIFT */
+	public int renderpass = 0;
+	public EulerOrient currentEulerOrientDegrees = new EulerOrient();
+	public boolean sndSystemReflect = true;
+	public boolean guiYawOrientationResetRequested = false;
+	public boolean hudShowingLastFrame = false; //Used for detecting when UI is shown, fixing the guiYaw
+	public boolean guiScreenShowingThisFrame = false;
+	public float hudHeadYaw = 0.0f; //Not including mouse
+	public boolean inGameMenuShowingLastFrame = false;
+	public boolean inWorldGuiScreenShowingThisFrame = false;
+	public float inGameMenuHeadYaw = 0.0f; //Not including mouse
+	public Vec3 interpolatedPlayerPos = Vec3.createVectorHelper(0, 0, 0);
+	public double cameraRoll;
+	public float headYaw = 0.0F; //relative to head tracker reference frame, absolute
+	public float headPitch = 0.0F;
+	public float headRoll = 0.0F;
+	public float prevHeadYaw = 0.0F;
+	public float prevHeadPitch = 0.0F;
+	public float prevHeadRoll = 0.0F;
+
+	public float crossX;
+	public float crossY;
+	public float crossZ;
+
+	public FloatBuffer[] eyeproj = new FloatBuffer[2]; //i dislike you.
+	
+	private boolean eyeCollision = false;
+	Block eyeCollisionBlock;
+	Vec3 eyeCollisionBlockPosLoc;
+	public float headCollisionThresholdDistance = 0.05f;
+	public float headCollisionDistance = -1f;
+	public Field _soundManagerSndSystemField = null;
+	public float clipDistance = 0f;
+	public float minClipDistance = 0.05f;
+	public boolean trySoundSystemReflect = true;
+	public float lookYawOffset = 0;
+	public float lookPitchOffset = 0;
+	public int callCount = 0;
+	public boolean warningsEnabled = false;
+	private Vec3 centerEyePosToCrossDirection;
+	public Vec3 crossVec;
+	/** END MINECRIFT */
+
+	public EntityRenderer(Minecraft p_i45076_1_, IResourceManager p_i45076_2_)
+	{
+		/** MINECRIFT **/
+		//this.shaderIndex = shaderCount;
+		this.cameraZoom = 1.0D;
+		this.prevFrameTime = Minecraft.getSystemTime();
+		this.random = new Random();
+		this.fogColorBuffer = GLAllocation.createDirectFloatBuffer(16);
+		this.mc = p_i45076_1_;
+		this.resourceManager = p_i45076_2_;
+		this.theMapItemRenderer = new MapItemRenderer(p_i45076_1_.getTextureManager());
+		this.itemRenderer = new ItemRenderer(p_i45076_1_);
+		this.lightmapTexture = new DynamicTexture(16, 16);
+		this.locationLightMap = p_i45076_1_.getTextureManager().getDynamicTextureLocation("lightMap", this.lightmapTexture);
+		this.lightmapColors = this.lightmapTexture.getTextureData();
+		this.theShaderGroup = null;
+
+		/** END MINECRIFT */
+	}
+
+	public boolean isShaderActive()
+	{
+		return OpenGlHelper.shadersSupported && this.theShaderGroup != null;
+	}
+
+	public void stopUseShader()
+	{
+		if (this.theShaderGroup != null)
+		{
+			this.theShaderGroup.deleteShaderGroup();
+		}
+
+		this.theShaderGroup = null;
+		/** MINECRIFT **/
+		this.mc.vrSettings.shaderIndex = VRSettings.NO_SHADER;
+		this.mc.vrSettings.saveOptions();
+		/** END MINECRIFT **/
+	}
+
+	public void deactivateShader()
+	{
+		if (this.theShaderGroup != null)
+		{
+			this.theShaderGroup.deleteShaderGroup();
+		}
+
+		this.theShaderGroup = null;
+		/** MINECRIFT **/
+		this.mc.vrSettings.shaderIndex = VRSettings.NO_SHADER;
+		this.mc.vrSettings.saveOptions();
+		/** END MINECRIFT **/
+	}
+
+	public void activateNextShader()
+	{
+		if (OpenGlHelper.isFramebufferEnabled() && OpenGlHelper.shadersSupported)
+		{
+			/** MINECRIFT */
+			this.mc.vrSettings.shaderIndex++;
+			if (this.mc.vrSettings.shaderIndex >= shaderCount) {
+				this.mc.vrSettings.shaderIndex = VRSettings.NO_SHADER;
+			}
+			this.mc.vrSettings.saveOptions();
+			// The change will be picked up the next time round the render loop...
+		}
+	}
+
+	public ShaderGroup initShaderGroup(Framebuffer framebuffer)
+	{
+		ShaderGroup shaderGroup = null;
+
+		if (this.mc.vrSettings.shaderIndex >= shaderCount) {
+			this.mc.vrSettings.shaderIndex = VRSettings.NO_SHADER;
+			this.mc.vrSettings.saveOptions();
+		}
+
+		if (this.theShaderGroup != null)
+		{
+			this.theShaderGroup.deleteShaderGroup();
+		}
+
+		if (OpenGlHelper.shadersSupported && this.mc.vrSettings.shaderIndex != VRSettings.NO_SHADER)
+		{
+			try
+			{
+				logger.info("Selecting effect " + shaderResourceLocations[this.mc.vrSettings.shaderIndex]);
+				shaderGroup = new ShaderGroup(this.mc.getTextureManager(), this.resourceManager, framebuffer, shaderResourceLocations[this.mc.vrSettings.shaderIndex]);
+				shaderGroup.createBindFramebuffers(framebuffer.framebufferWidth, framebuffer.framebufferHeight);
+			}
+			catch (IOException var2)
+			{
+				logger.warn("Failed to load shader: " + shaderResourceLocations[this.mc.vrSettings.shaderIndex], var2);
+				this.mc.vrSettings.shaderIndex = VRSettings.NO_SHADER;
+			}
+			catch (JsonSyntaxException var3)
+			{
+				logger.warn("Failed to load shader: " + shaderResourceLocations[this.mc.vrSettings.shaderIndex], var3);
+				this.mc.vrSettings.shaderIndex = VRSettings.NO_SHADER;
+			}
+		}
+		else
+		{
+			logger.info("No effect selected");
+		}
+
+		return shaderGroup;
+	}
+
+	public void onResourceManagerReload(IResourceManager par1ResourceManager)
+	{
+		if (OpenGlHelper.shadersSupported && ShaderLinkHelper.getStaticShaderLinkHelper() == null)
+		{
+			ShaderLinkHelper.setNewStaticShaderLinkHelper();
+		}
+
+		if (this.theShaderGroup != null)
+		{
+			this.theShaderGroup.deleteShaderGroup();
+		}
+
+		if (this.mc.vrSettings.shaderIndex != VRSettings.NO_SHADER)
+		{
+			try
+			{
+				this.theShaderGroup = new ShaderGroup(this.mc.getTextureManager(), par1ResourceManager, this.mc.getFramebuffer(), shaderResourceLocations[this.mc.vrSettings.shaderIndex]);
+				this.theShaderGroup.createBindFramebuffers(this.mc.getFramebuffer().framebufferWidth, this.mc.getFramebuffer().framebufferHeight);
+			}
+			catch (IOException var3)
+			{
+				logger.warn("Failed to load shader: " + shaderResourceLocations[this.mc.vrSettings.shaderIndex], var3);
+				this.mc.vrSettings.shaderIndex = VRSettings.NO_SHADER;
+			}
+		}
+	}
+	/** END MINECRIFT */
+
+	/**
+	 * Updates the entity renderer
+	 */
+	public void updateRenderer()
+	{
+		if (OpenGlHelper.shadersSupported && ShaderLinkHelper.getStaticShaderLinkHelper() == null)
+		{
+			ShaderLinkHelper.setNewStaticShaderLinkHelper();
+		}
+
+		this.updateFovModifierHand();
+		this.updateTorchFlicker();
+		this.fogColor2 = this.fogColor1;
+		this.thirdPersonDistanceTemp = this.thirdPersonDistance;
+		this.prevDebugCamYaw = this.debugCamYaw;
+		this.prevDebugCamPitch = this.debugCamPitch;
+		this.prevDebugCamFOV = this.debugCamFOV;
+		this.prevCamRoll = this.camRoll;
+		float var1;
+		float var2;
+
+		if (this.mc.gameSettings.smoothCamera)
+		{
+			var1 = this.mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
+			var2 = var1 * var1 * var1 * 8.0F;
+			this.smoothCamFilterX = this.mouseFilterXAxis.smooth(this.smoothCamYaw, 0.05F * var2);
+			this.smoothCamFilterY = this.mouseFilterYAxis.smooth(this.smoothCamPitch, 0.05F * var2);
+			this.smoothCamPartialTicks = 0.0F;
+			this.smoothCamYaw = 0.0F;
+			this.smoothCamPitch = 0.0F;
+		}
+
+		if (this.mc.renderViewEntity == null)
+		{
+			this.mc.renderViewEntity = this.mc.thePlayer;
+		}
+
+		var1 = this.mc.theWorld.getLightBrightness(MathHelper.floor_double(this.mc.renderViewEntity.posX), MathHelper.floor_double(this.mc.renderViewEntity.posY), MathHelper.floor_double(this.mc.renderViewEntity.posZ));
+		var2 = (float)this.mc.gameSettings.renderDistanceChunks / 16.0F;
+		float var3 = var1 * (1.0F - var2) + var2;
+		this.fogColor1 += (var3 - this.fogColor1) * 0.1F;
+		++this.rendererUpdateCount;
+		this.itemRenderer.updateEquippedItem();
+		this.addRainParticles();
+		this.bossColorModifierPrev = this.bossColorModifier;
+
+		if (BossStatus.hasColorModifier)
+		{
+			this.bossColorModifier += 0.05F;
+
+			if (this.bossColorModifier > 1.0F)
+			{
+				this.bossColorModifier = 1.0F;
+			}
+
+			BossStatus.hasColorModifier = false;
+		}
+		else if (this.bossColorModifier > 0.0F)
+		{
+			this.bossColorModifier -= 0.0125F;
+		}
+	}
+
+	public ShaderGroup getShaderGroup()
+	{
+		return this.theShaderGroup;
+	}
+
+	public void updateShaderGroupSize(int p_147704_1_, int p_147704_2_)
+	{
+		if (OpenGlHelper.shadersSupported && this.theShaderGroup != null)
+		{
+			this.theShaderGroup.createBindFramebuffers(p_147704_1_, p_147704_2_);
+		}
+	}
+
+	/**
+	 * Finds what block or object the mouse is over at the specified partial tick time. Args: partialTickTime
+	 */
+	public void getMouseOver(float par1)
+	{
+		/** MINECRIFT */    
+		//No-op for performance reasons (MouseOver set in render loop via getPointedBlock)
+	}
+
+	//checks around the eye position for an opaque block or water block so we can render fog and overlays for that eye
+	public Block getEyeCollisionBlock(EyeType eye){
+		Vec3 exact = mc.roomScale.getEyePos_World(eye);
+		int var2 = (int) Math.floor(exact.xCoord);
+		int var3 = (int) Math.floor(exact.yCoord);
+		int var4 = (int) Math.floor(exact.zCoord);
+
+		float l =	BlockLiquid.getLiquidHeightPercent(mc.theWorld.getBlockMetadata(var2, var3, var4));
+		Block b = 	this.mc.theWorld.getBlock(var2, var3, var4);
+
+		if (b.isNormalCube() ||
+				(b.getMaterial() == Material.water && 
+				(this.mc.theWorld.getBlock(var2, var3 +1 , var4).getMaterial() == Material.water  ||
+				exact.yCoord - var3 < (1- l )) 
+						)  
+				) //head in block
+		{          	
+			eyeCollisionBlockPosLoc = Vec3.createVectorHelper(var2, var3, var4);
+			return this.mc.theWorld.getBlock(var2, var3, var4);
+		}
+		else
+		{
+			for (int var6 = 0; var6 < 8; ++var6)
+			{
+				float var7 = ((float)((var6 >> 0) % 2) - 0.5F) * .07f;
+				float var8 = ((float)((var6 >> 1) % 2) - 0.5F) * .07f;
+				float var9 = ((float)((var6 >> 2) % 2) - 0.5F) * .07f;
+				int var10 = MathHelper.floor_double(exact.xCoord + var7);
+				int var11 = MathHelper.floor_double(exact.yCoord + var8);
+				int var12 = MathHelper.floor_double(exact.zCoord + var9);
+
+				if (this.mc.theWorld.getBlock(var10, var11, var12).isNormalCube())
+				{
+					eyeCollisionBlockPosLoc = Vec3.createVectorHelper(var10, var11, var12);
+					return this.mc.theWorld.getBlock(var10, var11, var12);
+				}
+			}          
+		}
+
+		return null;
+
+	}
+
+	public Vec3 getCameraBlock(){
+		Vec3 cam = mc.roomScale.getHMDPos_World();
+		return Vec3.createVectorHelper(Math.floor(cam.xCoord), Math.floor(cam.yCoord), Math.floor(cam.zCoord));
+	}
+
+	public Vec3 getEyeBlock(EyeType eye){
+		Vec3 cam = mc.roomScale.getEyePos_World(eye);
+		return Vec3.createVectorHelper(Math.floor(cam.xCoord), Math.floor(cam.yCoord), Math.floor(cam.zCoord));
+	}
+
+	public boolean cameraIsInOpaqueBlock(){
+
+		//        for (int var1 = 0; var1 < 8; ++var1)
+		//        {
+		//            float var2 = ((float)((var1 >> 0) % 2) - 0.5F) * this.width * 0.8F;
+		//            float var3 = ((float)((var1 >> 1) % 2) - 0.5F) * 0.1F;
+		//            float var4 = ((float)((var1 >> 2) % 2) - 0.5F) * this.width * 0.8F;
+
+		Vec3 campos = getCameraBlock();
+
+		//            int var5 = MathHelper.floor_double(this.posX + (double)var2);
+		//            //VIVE Crawling experiemnt
+		//            int var6 = MathHelper.floor_double(this.boundingBox.minY + (double)this.height + (double)var3);
+		//            //END VIVE
+		//            int var7 = MathHelper.floor_double(this.posZ + (double)var4);
+
+		if ( this.mc.thePlayer.worldObj.getBlock((int)campos.xCoord, (int)campos.yCoord, (int)campos.zCoord).isNormalCube())
+		{
+			return true;
+		}
+
+		//    }
+
+		return false;
+	}
+
+
+	public void getPointedBlock(float par1)
+	{
+		/** END MINECRIFT */    
+		if (this.mc.renderViewEntity != null && this.mc.theWorld != null)
+		{
+			/** MINECRIFT */
+			// Lets choose to use the head position for block / entity distance hit / miss calcs for now. Lean
+			// forward, you can hit further away...
+
+			this.mc.pointedEntity = null;
+			double blockReachDistance = mc.vrSettings.vrWorldScale * (double)this.mc.playerController.getBlockReachDistance();
+			double entityReachDistance = (double)this.mc.playerController.getBlockReachDistance();
+			// Darktemp's crosshair fix
+			// VIVE START - interact source	
+			
+			Vec3 aimsource = mc.roomScale.getControllerMainPos_World();
+			Vec3 aimsoucecopy = Vec3.createVectorHelper(aimsource.xCoord, aimsource.yCoord, aimsource.zCoord);
+			Vec3 aimsourcecopy2 = Vec3.createVectorHelper(aimsource.xCoord, aimsource.yCoord, aimsource.zCoord);
+			// VIVE END - interact source
+
+			Vec3 aim = mc.roomScale.getControllerMainDir_World();
+			Vec3 endPos = aimsource.addVector(aim.xCoord*blockReachDistance,aim.yCoord*blockReachDistance ,aim.zCoord*blockReachDistance );
+			crossVec=aimsource.addVector(aim.xCoord*blockReachDistance,aim.yCoord*blockReachDistance ,aim.zCoord*blockReachDistance );
+
+			this.mc.objectMouseOver = this.mc.theWorld.rayTraceBlocks(aimsource, endPos, false, false, true);
+			
+			//JRBUDDA - i dunno what any of this does that option isnt used.
+			
+			double maxreach = MAX_CROSSHAIR_DISTANCE;
+			
+			//   System.out.println(this.mc.objectMouseOver.toString());
+			if (this.mc.objectMouseOver == null || this.mc.objectMouseOver.typeOfHit == MovingObjectPosition.MovingObjectType.MISS)
+			{
+				// Get MISS distance
+				if (!this.mc.vrSettings.maxCrosshairDistanceAtBlockReach) {
+					endPos = aimsoucecopy.addVector(aim.xCoord * MAX_CROSSHAIR_DISTANCE, aim.yCoord * MAX_CROSSHAIR_DISTANCE, aim.zCoord * MAX_CROSSHAIR_DISTANCE);
+					MovingObjectPosition crossPos = this.mc.theWorld.rayTraceBlocks(aimsoucecopy, endPos, false, false, true);
+					if (crossPos != null) {
+						crossVec = crossPos.hitVec;
+						maxreach = crossVec.distanceTo(aimsourcecopy2);
+					} else {
+						crossVec = Vec3.createVectorHelper(endPos.xCoord, endPos.yCoord, endPos.zCoord);
+						maxreach = crossVec.distanceTo(aimsourcecopy2);
+					}
+				}
+				this.mc.objectMouseOver = null;
+			}
+			else
+			{
+				// Get HIT distance
+				maxreach = this.mc.objectMouseOver.hitVec.distanceTo(aimsourcecopy2); // Set entityreach here - we can't hit an entity behind whatever this is...
+				crossVec = this.mc.objectMouseOver.hitVec;
+			}
+
+			Entity pointedEntity = null;
+			Vec3 hitLocation = null;
+		
+			AxisAlignedBB bb = AxisAlignedBB.getBoundingBox(
+					-maxreach, -maxreach, -maxreach, 
+					maxreach, maxreach, maxreach)
+					.offset(aimsourcecopy2.xCoord, aimsourcecopy2.yCoord,  aimsourcecopy2.zCoord).expand(1, 1, 1);
+			
+			List entitiesWithinCrosshairDist = this.mc.theWorld.getEntitiesWithinAABBExcludingEntity(this.mc.renderViewEntity, bb);
+			
+			double reach = maxreach;
+			double dist = 0;
+			
+			for (int i = 0; i < entitiesWithinCrosshairDist.size(); ++i)
+			{
+				Entity entity = (Entity)entitiesWithinCrosshairDist.get(i);
+
+				if (entity.canBeCollidedWith())
+				{
+					float borderSize = entity.getCollisionBorderSize();
+					AxisAlignedBB boundingBox = entity.boundingBox.expand((double)borderSize, (double)borderSize, (double)borderSize);
+					MovingObjectPosition collision = boundingBox.calculateIntercept(aimsourcecopy2, crossVec);
+
+					if (boundingBox.isVecInside(aimsourcecopy2))
+					{
+						if (0.0D < reach || reach == 0.0D)
+						{
+							pointedEntity = entity;                     
+							hitLocation = collision == null ? aimsourcecopy2 : collision.hitVec;
+							reach = 0.0D;
+						}
+					}
+					else if (collision != null)
+					{
+						dist = aimsourcecopy2.distanceTo(collision.hitVec);
+
+						if (dist < maxreach || reach == 0.0D)
+						{
+							boolean canRiderInteract = false;
+
+							if (Reflector.ForgeEntity_canRiderInteract.exists())
+							{
+								canRiderInteract = Reflector.callBoolean(entity, Reflector.ForgeEntity_canRiderInteract, new Object[0]);
+							}
+
+							if (entity == this.mc.renderViewEntity.ridingEntity && !canRiderInteract)
+							{
+								if (reach == 0.0D)
+								{
+									pointedEntity = entity;
+									hitLocation = collision.hitVec;
+								}
+							}
+							else
+							{
+								pointedEntity = entity;
+								hitLocation = collision.hitVec;
+							}
+						}
+					}
+				}
+			}
+
+			
+			if (pointedEntity != null && hitLocation !=null )
+				crossVec = hitLocation;
+			
+			if (pointedEntity != null && (dist < entityReachDistance) ) {
+				this.mc.objectMouseOver = new MovingObjectPosition(pointedEntity, hitLocation);
+				crossVec = this.mc.objectMouseOver.hitVec;
+
+				if (pointedEntity instanceof EntityLivingBase || pointedEntity instanceof EntityItemFrame) {
+					this.mc.pointedEntity = pointedEntity;
+				}
+			}
+			
+			// Set up crosshair position
+			float SLIGHTLY_CLOSER = 0.001f;
+			Vec3 cameraPos = mc.roomScale.getEyePos_World(mc.currentEye);
+			centerEyePosToCrossDirection = cameraPos.subtract(crossVec).normalize();   // VIVE use camerapos
+			crossX = (float)(crossVec.xCoord - (centerEyePosToCrossDirection.xCoord*SLIGHTLY_CLOSER) - interpolatedPlayerPos.xCoord);
+			crossY = (float)(crossVec.yCoord - (centerEyePosToCrossDirection.yCoord*SLIGHTLY_CLOSER) - interpolatedPlayerPos.yCoord);
+			crossZ = (float)(crossVec.zCoord - (centerEyePosToCrossDirection.zCoord*SLIGHTLY_CLOSER) - interpolatedPlayerPos.zCoord);
+
+			// VIVE START - teleport movement
+			if (!mc.vrPlayer.getFreeMoveMode() && mc.gameSettings.keyBindForward.getIsKeyPressed()) { mc.vrPlayer.updateTeleportDestinations(this, mc, mc.renderViewEntity);}
+			// VIVE END - teleport movement
+
+			/** END MINECRIFT */    
+		}
+	}
+
+	private boolean crosshairValid = false;
+	
+	/**
+	 * Update FOV modifier hand
+	 */
+	private void updateFovModifierHand()
+	{
+		if (this.mc.renderViewEntity instanceof EntityPlayerSP)
+		{
+			EntityPlayerSP var1 = (EntityPlayerSP)this.mc.renderViewEntity;
+			this.fovMultiplierTemp = var1.getFOVMultiplier();
+		}
+		else
+		{
+			this.fovMultiplierTemp = this.mc.thePlayer.getFOVMultiplier();
+		}
+
+		this.fovModifierHandPrev = this.fovModifierHand;
+		this.fovModifierHand += (this.fovMultiplierTemp - this.fovModifierHand) * 0.5F;
+
+		if (this.fovModifierHand > 1.5F)
+		{
+			this.fovModifierHand = 1.5F;
+		}
+
+		if (this.fovModifierHand < 0.1F)
+		{
+			this.fovModifierHand = 0.1F;
+		}
+	}
+
+	/**
+	 * Changes the field of view of the player depending on if they are underwater or not
+	 */
+	private float getFOVModifier(float par1, boolean par2)
+	{
+		if (this.debugViewDirection > 0)
+		{
+			return 90.0F;
+		}
+		else
+		{
+			EntityLivingBase var3 = this.mc.renderViewEntity;
+			float var4 = 70.0F;
+
+			if (par2)
+			{
+				var4 = this.mc.gameSettings.fovSetting;
+				var4 *= this.fovModifierHandPrev + (this.fovModifierHand - this.fovModifierHandPrev) * par1;
+			}
+
+			boolean zoomActive = false;
+
+			if (this.mc.currentScreen == null)
+			{
+				if (this.mc.gameSettings.ofKeyBindZoom.getKeyCode() < 0)
+				{
+					zoomActive = Mouse.isButtonDown(this.mc.gameSettings.ofKeyBindZoom.getKeyCode() + 100);
+				}
+				else
+				{
+					zoomActive = Keyboard.isKeyDown(this.mc.gameSettings.ofKeyBindZoom.getKeyCode());
+				}
+			}
+
+			if (zoomActive)
+			{
+				if (!Config.zoomMode)
+				{
+					Config.zoomMode = true;
+					this.mc.gameSettings.smoothCamera = true;
+				}
+
+				if (Config.zoomMode)
+				{
+					var4 /= 4.0F;
+				}
+			}
+			else if (Config.zoomMode)
+			{
+				Config.zoomMode = false;
+				this.mc.gameSettings.smoothCamera = false;
+				this.mouseFilterXAxis = new MouseFilter();
+				this.mouseFilterYAxis = new MouseFilter();
+			}
+
+			if (var3.getHealth() <= 0.0F)
+			{
+				float var6 = (float)var3.deathTime + par1;
+				var4 /= (1.0F - 500.0F / (var6 + 500.0F)) * 2.0F + 1.0F;
+			}
+
+			Block var61 = ActiveRenderInfo.getBlockAtEntityViewpoint(this.mc.theWorld, var3, par1);
+
+			if (var61.getMaterial() == Material.water)
+			{
+				var4 = var4 * 60.0F / 70.0F;
+			}
+
+			return var4 + this.prevDebugCamFOV + (this.debugCamFOV - this.prevDebugCamFOV) * par1;
+		}
+	}
+
+	private void hurtCameraEffect(float par1)
+	{
+
+		EntityLivingBase var2 = this.mc.renderViewEntity;
+		float var3 = (float)var2.hurtTime - par1;
+		float var4;
+
+		// VIVE START - don't tilt camera to avoid motion sickeness
+		if (this.mc.stereoProvider.isStereo())
+			return;
+		// VIVE END - don't tilt camera to avoid motion sickeness
+		//
+
+		if (var2.getHealth() <= 0.0F)
+		{
+			var4 = (float)var2.deathTime + par1;
+			GL11.glRotatef(40.0F - 8000.0F / (var4 + 200.0F), 0.0F, 0.0F, 1.0F);
+		}
+
+		if (var3 >= 0.0F)
+		{
+			var3 /= (float)var2.maxHurtTime;
+			var3 = MathHelper.sin(var3 * var3 * var3 * var3 * (float)Math.PI);
+			var4 = var2.attackedAtYaw;
+			GL11.glRotatef(-var4, 0.0F, 1.0F, 0.0F);
+			GL11.glRotatef(-var3 * 14.0F, 0.0F, 0.0F, 1.0F);
+			GL11.glRotatef(var4, 0.0F, 1.0F, 0.0F);
+		}
+	}
+
+	/**
+	 * Setups all the GL settings for view bobbing. Args: partialTickTime
+	 */
+	private void setupViewBobbing(float par1)
+	{
+		// VIVE START - disable all view bobbing, it causes nausea
+		if (this.mc.stereoProvider.isStereo())
+			return;
+		// VIVE END - disable all view bobbing, it causes nausea
+
+		if (this.mc.renderViewEntity instanceof EntityPlayer)
+		{
+			EntityPlayer var2 = (EntityPlayer)this.mc.renderViewEntity;
+			float var3 = var2.distanceWalkedModified - var2.prevDistanceWalkedModified;
+			/** MINECRIFT */       // TODO: Tweak this
+			float var4 = -(var2.distanceWalkedModified + var3 * par1) * this.mc.vrSettings.movementSpeedMultiplier;
+			float var5 = var2.prevCameraYaw + (var2.cameraYaw - var2.prevCameraYaw) * par1 * this.mc.vrSettings.movementSpeedMultiplier;
+			float var6 = var2.prevCameraPitch + (var2.cameraPitch - var2.prevCameraPitch) * par1 * this.mc.vrSettings.movementSpeedMultiplier;
+			/** END MINECRIFT */
+			GL11.glTranslatef(MathHelper.sin(var4 * (float)Math.PI) * var5 * 0.5F, -Math.abs(MathHelper.cos(var4 * (float)Math.PI) * var5), 0.0F);
+			GL11.glRotatef(MathHelper.sin(var4 * (float)Math.PI) * var5 * 3.0F, 0.0F, 0.0F, 1.0F);
+			GL11.glRotatef(Math.abs(MathHelper.cos(var4 * (float)Math.PI - 0.2F) * var5) * 5.0F, 1.0F, 0.0F, 0.0F);
+			GL11.glRotatef(var6, 1.0F, 0.0F, 0.0F);
+		}
+	}
+
+	/**
+	 * sets up player's eye (or camera in third person mode)
+	 */
+	private void orientCamera(float par1)
+	{
+		EntityLivingBase var2 = this.mc.renderViewEntity;
+//		float var3 = var2.yOffset - 1.62F;
+		double var4 = interpolatedPlayerPos.xCoord;
+		double var6 = interpolatedPlayerPos.yCoord;
+		double var8 = interpolatedPlayerPos.zCoord;
+		
+		/** MINECRIFT *
+        GL11.glRotatef(this.prevCamRoll + (this.camRoll - this.prevCamRoll) * p_78467_1_, 0.0F, 0.0F, 1.0F);
+		 ** END MINECRIFT */
+		if (mc.renderViewEntity.isPlayerSleeping() && false)       // VIVE - don't do crazy stuff with the camera when sleeping
+		{
+//			var3 = (float)((double)var3 + 1.0D);
+//			GL11.glTranslatef(0.0F, 0.3F, 0.0F);
+//
+//			if (!this.mc.gameSettings.debugCamEnable)
+//			{
+//				Block var27 = this.mc.theWorld.getBlock(MathHelper.floor_double(var2.posX), MathHelper.floor_double(var2.posY), MathHelper.floor_double(var2.posZ));
+//
+//				if (Reflector.ForgeHooksClient_orientBedCamera.exists())
+//				{
+//					Reflector.callVoid(Reflector.ForgeHooksClient_orientBedCamera, new Object[] {this.mc, var2});
+//				}
+//				else if (var27 == Blocks.bed)
+//				{
+//					int var11 = this.mc.theWorld.getBlockMetadata(MathHelper.floor_double(var2.posX), MathHelper.floor_double(var2.posY), MathHelper.floor_double(var2.posZ));
+//					int var13 = var11 & 3;
+//					GL11.glRotatef((float)(var13 * 90), 0.0F, 1.0F, 0.0F);
+//				}
+//
+//				GL11.glRotatef(var2.prevRotationYaw + (var2.rotationYaw - var2.prevRotationYaw) * par1 + 180.0F, 0.0F, -1.0F, 0.0F);
+//				GL11.glRotatef(var2.prevRotationPitch + (var2.rotationPitch - var2.prevRotationPitch) * par1, -1.0F, 0.0F, 0.0F);
+//			}
+		}
+		else if (this.mc.gameSettings.thirdPersonView > 0)
+		{
+			double var271 = (double)(this.thirdPersonDistanceTemp + (this.thirdPersonDistance - this.thirdPersonDistanceTemp) * par1);
+			float var28;
+			float var281;
+
+			if (this.mc.gameSettings.debugCamEnable)
+			{
+				var28 = this.prevDebugCamYaw + (this.debugCamYaw - this.prevDebugCamYaw) * par1;
+				var281 = this.prevDebugCamPitch + (this.debugCamPitch - this.prevDebugCamPitch) * par1;
+				GL11.glTranslatef(0.0F, 0.0F, (float)(-var271));
+				GL11.glRotatef(var281, 1.0F, 0.0F, 0.0F);
+				GL11.glRotatef(var28, 0.0F, 1.0F, 0.0F);
+			}
+			else
+			{
+				var28 = var2.rotationYaw;
+				var281 = var2.rotationPitch;
+
+				if (this.mc.gameSettings.thirdPersonView == 2)
+				{
+					var281 += 180.0F;
+				}
+
+				double var14 = (double)(-MathHelper.sin(var28 / 180.0F * (float)Math.PI) * MathHelper.cos(var281 / 180.0F * (float)Math.PI)) * var271;
+				double var16 = (double)(MathHelper.cos(var28 / 180.0F * (float)Math.PI) * MathHelper.cos(var281 / 180.0F * (float)Math.PI)) * var271;
+				double var18 = (double)(-MathHelper.sin(var281 / 180.0F * (float)Math.PI)) * var271;
+
+				for (int var20 = 0; var20 < 8; ++var20)
+				{
+					float var21 = (float)((var20 & 1) * 2 - 1);
+					float var22 = (float)((var20 >> 1 & 1) * 2 - 1);
+					float var23 = (float)((var20 >> 2 & 1) * 2 - 1);
+					var21 *= 0.1F;
+					var22 *= 0.1F;
+					var23 *= 0.1F;
+					MovingObjectPosition var24 = this.mc.theWorld.rayTraceBlocks(Vec3.createVectorHelper(interpolatedPlayerPos.xCoord + (double)var21, interpolatedPlayerPos.yCoord + (double)var22, interpolatedPlayerPos.zCoord
+							+ (double)var23), Vec3.createVectorHelper(interpolatedPlayerPos.xCoord - var14 + (double)var21 + (double)var23, interpolatedPlayerPos.yCoord - var18 + (double)var22, interpolatedPlayerPos.zCoord - var16 + (double)var23));
+
+					if (var24 != null)
+					{
+						double var25 = var24.hitVec.distanceTo(Vec3.createVectorHelper(var4, var6, var8));
+
+						if (var25 < var271)
+						{
+							var271 = var25;
+						}
+					}
+				}
+
+				if (this.mc.gameSettings.thirdPersonView == 2)
+				{
+					GL11.glRotatef(180.0F, 0.0F, 1.0F, 0.0F);
+				}
+
+				GL11.glRotatef(var2.rotationPitch - var281, 1.0F, 0.0F, 0.0F);
+				GL11.glRotatef(var2.rotationYaw - var28, 0.0F, 1.0F, 0.0F);
+				GL11.glTranslatef(0.0F, 0.0F, (float)(-var271));
+				GL11.glRotatef(var28 - var2.rotationYaw, 0.0F, 1.0F, 0.0F);
+				GL11.glRotatef(var281 - var2.rotationPitch, 1.0F, 0.0F, 0.0F);
+			}
+		}
+		else
+		{
+			/** MINECRIFT */        
+			//            GL11.glTranslatef(0.0F, 0.0F, -0.1F);  // TODO: Minecrift
+		}
+
+		if (!this.mc.gameSettings.debugCamEnable)
+		{
+			// VIVE START - don't add minecraft player height to the openVR position data
+			orientModelView(true, false);
+			// VIVE END - don't add minecraft player height to the openVR position data
+			//GL11.glRotatef(180f, 0f, 1f, 0f); //do not understand this.
+		}
+
+		// VIVE START - move camera up out of the bed
+		if (var2.isPlayerSleeping())
+		{
+			GL11.glTranslatef(0.0f,-0.7f,0.0f);
+		}
+		// VIVE END - move camera up out of the bed
+
+		this.cloudFog = this.mc.renderGlobal.hasCloudFog(interpolatedPlayerPos.xCoord, interpolatedPlayerPos.yCoord, interpolatedPlayerPos.zCoord, par1);
+		/** END MINECRIFT */
+	}
+
+	/**
+	 * sets up projection, view effects, camera position/rotation
+	 */
+	private void setupCameraTransform(float par1, int par2)
+	{
+		/** MINECRIFT */
+		/*
+        // Setup farPlaneDistance in Minecraft.setupRenderConfig
         this.farPlaneDistance = (float)(this.mc.gameSettings.renderDistanceChunks * 16);
 
         if (Config.isFogFancy())
@@ -804,16 +1074,14 @@
         {
             this.farPlaneDistance *= 0.83F;
         }
+		 */
 
-        GL11.glMatrixMode(GL11.GL_PROJECTION);
-        GL11.glLoadIdentity();
-        float var3 = 0.07F;
-
-        if (this.mc.gameSettings.anaglyph)
-        {
-            GL11.glTranslatef((float)(-(par2 * 2 - 1)) * var3, 0.0F, 0.0F);
-        }
+		GL11.glMatrixMode(GL11.GL_PROJECTION);
+		GL11.glLoadIdentity();
+		float var3 = 0.07F;
 
+		/*
+        // Setup clip in Minecraft.setupRenderConfig instead...
         float clipDistance = this.farPlaneDistance * 2.0F;
 
         if (clipDistance < 128.0F)
@@ -825,1829 +1093,3910 @@
         {
             clipDistance = 256.0F;
         }
+		 */
 
-        if (this.cameraZoom != 1.0D)
-        {
-            GL11.glTranslatef((float)this.cameraYaw, (float)(-this.cameraPitch), 0.0F);
-            GL11.glScaled(this.cameraZoom, this.cameraZoom, 1.0D);
-        }
-
-        Project.gluPerspective(this.getFOVModifier(par1, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, clipDistance);
-        float var4;
-
-        if (this.mc.playerController.enableEverythingIsScrewedUpMode())
-        {
-            var4 = 0.6666667F;
-            GL11.glScalef(1.0F, var4, 1.0F);
-        }
-
-        GL11.glMatrixMode(GL11.GL_MODELVIEW);
-        GL11.glLoadIdentity();
-
-        if (this.mc.gameSettings.anaglyph)
-        {
-            GL11.glTranslatef((float)(par2 * 2 - 1) * 0.1F, 0.0F, 0.0F);
-        }
-
-        this.hurtCameraEffect(par1);
-
-        if (this.mc.gameSettings.viewBobbing)
-        {
-            this.setupViewBobbing(par1);
-        }
-
-        var4 = this.mc.thePlayer.prevTimeInPortal + (this.mc.thePlayer.timeInPortal - this.mc.thePlayer.prevTimeInPortal) * par1;
-
-        if (var4 > 0.0F)
-        {
-            byte var7 = 20;
-
-            if (this.mc.thePlayer.isPotionActive(Potion.confusion))
-            {
-                var7 = 7;
-            }
-
-            float var6 = 5.0F / (var4 * var4 + 5.0F) - var4 * 0.04F;
-            var6 *= var6;
-            GL11.glRotatef(((float)this.rendererUpdateCount + par1) * (float)var7, 0.0F, 1.0F, 1.0F);
-            GL11.glScalef(1.0F / var6, 1.0F, 1.0F);
-            GL11.glRotatef(-((float)this.rendererUpdateCount + par1) * (float)var7, 0.0F, 1.0F, 1.0F);
-        }
-
-        this.orientCamera(par1);
-
-        if (this.debugViewDirection > 0)
-        {
-            int var71 = this.debugViewDirection - 1;
-
-            if (var71 == 1)
-            {
-                GL11.glRotatef(90.0F, 0.0F, 1.0F, 0.0F);
-            }
-
-            if (var71 == 2)
-            {
-                GL11.glRotatef(180.0F, 0.0F, 1.0F, 0.0F);
-            }
-
-            if (var71 == 3)
-            {
-                GL11.glRotatef(-90.0F, 0.0F, 1.0F, 0.0F);
-            }
-
-            if (var71 == 4)
-            {
-                GL11.glRotatef(90.0F, 1.0F, 0.0F, 0.0F);
-            }
-
-            if (var71 == 5)
-            {
-                GL11.glRotatef(-90.0F, 1.0F, 0.0F, 0.0F);
-            }
-        }
+		if (!this.mc.stereoProvider.isStereo() && this.cameraZoom != 1.0D && !this.mc.vrSettings.debugPos)
+		{
+			GL11.glTranslatef((float)this.cameraYaw, (float)(-this.cameraPitch), (float)(-this.cameraRoll)); // Minecrift
+			GL11.glScaled(this.cameraZoom, this.cameraZoom, 1.0D);
+		}
+
+		if (this.mc.stereoProvider.isStereo())
+		{
+			GL11.glMultMatrix(eyeproj[mc.currentEye.value()]);
+		}
+		else
+		{
+			Project.gluPerspective(this.getFOVModifier(par1, true), (float) this.mc.displayWidth / (float) this.mc.displayHeight, minClipDistance, clipDistance);
+		}
+
+		float var4;
+
+		if (this.mc.playerController.enableEverythingIsScrewedUpMode() && !this.mc.vrSettings.debugPos)
+		{
+			var4 = 0.6666667F;
+			GL11.glScalef(1.0F, var4, 1.0F);
+		}
+
+		GL11.glMatrixMode(GL11.GL_MODELVIEW);
+		GL11.glLoadIdentity();
+
+
+		if (!this.mc.vrSettings.debugPos) {
+			this.hurtCameraEffect(par1);
+		}
+
+		if (this.mc.gameSettings.viewBobbing && !this.mc.vrSettings.debugPos)
+		{
+			this.setupViewBobbing(par1);
+		}
+
+		var4 = this.mc.thePlayer.prevTimeInPortal + (this.mc.thePlayer.timeInPortal - this.mc.thePlayer.prevTimeInPortal) * par1;
+
+		if (var4 > 0.0F && !this.mc.vrSettings.debugPos)
+		{
+			byte var7 = 20;
+
+			if (this.mc.thePlayer.isPotionActive(Potion.confusion))
+			{
+				var7 = 7;
+			}
+
+			float var6 = 5.0F / (var4 * var4 + 5.0F) - var4 * 0.04F;
+			var6 *= var6;
+			GL11.glRotatef(((float)this.rendererUpdateCount + par1) * (float)var7, 0.0F, 1.0F, 1.0F);
+			GL11.glScalef(1.0F / var6, 1.0F, 1.0F);
+			GL11.glRotatef(-((float)this.rendererUpdateCount + par1) * (float)var7, 0.0F, 1.0F, 1.0F);
+		}
+
+		this.orientCamera(par1);
+
+		if (this.debugViewDirection > 0 && !this.mc.vrSettings.debugPos)
+		{
+			int var71 = this.debugViewDirection - 1;
+
+			if (var71 == 1)
+			{
+				GL11.glRotatef(90.0F, 0.0F, 1.0F, 0.0F);
+			}
+
+			if (var71 == 2)
+			{
+				GL11.glRotatef(180.0F, 0.0F, 1.0F, 0.0F);
+			}
+
+			if (var71 == 3)
+			{
+				GL11.glRotatef(-90.0F, 0.0F, 1.0F, 0.0F);
+			}
+
+			if (var71 == 4)
+			{
+				GL11.glRotatef(90.0F, 1.0F, 0.0F, 0.0F);
+			}
+
+			if (var71 == 5)
+			{
+				GL11.glRotatef(-90.0F, 1.0F, 0.0F, 0.0F);
+			}
+		}
+		/** END MINECRIFT */
+	}
+
+	//VIVE
+	public void renderDebugAxes(int r, int g, int b){
+		renderCircle(Vec3.createVectorHelper(0, 0, 0), (float) .05, 32, r, g, b	, 255, 0);
+		renderCircle(Vec3.createVectorHelper(0, .01, 0), (float) .03, 32, r, g, b	, 255, 0);
+		renderCircle(Vec3.createVectorHelper(0,0.02, 0), (float) .01, 32, r, g, b	, 255, 0);
+		renderCircle(Vec3.createVectorHelper(0, 0, .15), (float) .02, 32, r, g, b	, 255, 2);
+
+	}
+	//END VIVE
+	
+	/**
+	 * Render player (right) hand
+	 */
+	/** MINECRIFT SHADERS MOD **/
+	public void renderHand(float par1, int analglyphpass)
+	/** MINECRIFT SHADERS MOD END **/
+	{
+		/** MINECRIFT */
+
+		GL11.glMatrixMode(GL11.GL_PROJECTION);
+		GL11.glLoadIdentity();
+
+		float var3 = 0.07F;
+
+		if (this.mc.gameSettings.anaglyph && !this.mc.vrSettings.debugPos)
+		{
+			GL11.glTranslatef((float)(-(analglyphpass * 2 - 1)) * var3, 0.0F, 0.0F);
+		}
+
+		if (!this.mc.stereoProvider.isStereo() && this.cameraZoom != 1.0D && !this.mc.vrSettings.debugPos)
+		{
+			GL11.glTranslatef((float) this.cameraYaw, (float) (-this.cameraPitch), 0.0F);
+			GL11.glScaled(this.cameraZoom, this.cameraZoom, 1.0D);
+		}
+		/** MINECRIFT SHADERS MOD **/
+		boolean shadersMod = Reflector.shadersModExists();
+		if (shadersMod) {
+			Reflector.callVoid(Reflector.ShadersMod_Shaders_applyHandDepth, new Object[] {});
+		}
+		/** END MINECRIFT SHADERS MOD **/
+		// Minecrift - use correct projection
+		if (this.mc.stereoProvider.isStereo())
+		{
+			GL11.glMultMatrix(eyeproj[mc.currentEye.value()]);
+		}
+		else
+		{
+			Project.gluPerspective(this.getFOVModifier(par1, false), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * 2.0F);
+		}
+
+		if (this.mc.playerController.enableEverythingIsScrewedUpMode() && !this.mc.vrSettings.debugPos)
+		{
+			float var4 = 0.6666667F;
+			GL11.glScalef(1.0F, var4, 1.0F);
+		}
+
+		GL11.glMatrixMode(GL11.GL_MODELVIEW);
+		GL11.glPushMatrix();
+			GL11.glLoadIdentity();
+	
+	    	RenderHelper.enableStandardItemLighting();    
+			GL11.glEnable(GL11.GL_LIGHTING);
+				
+			if (this.mc.gameSettings.anaglyph && !this.mc.vrSettings.debugPos)
+			{
+				GL11.glTranslatef((float) (analglyphpass * 2 - 1) * 0.1F, 0.0F, 0.0F);
+			}
+			/** MINECRIFT */
+			/** MINECRIFT SHADERS MOD */
+			boolean render = true;
+			if (shadersMod) {
+				render = (Boolean)Reflector.getFieldValue(Reflector.ShadersMod_Shaders_isHandRendered);
+			}
+			
+			if (true) {
+				GL11.glPushMatrix();
+	
+				if (!this.mc.vrSettings.debugPos)
+				{
+					this.hurtCameraEffect(par1);
+				}
+	
+				if (this.mc.gameSettings.viewBobbing && !this.mc.vrSettings.debugPos)
+				{
+					this.setupViewBobbing(par1);
+				}
+	
+				//from player face to HMD
+				orientModelView(false, false);  // VIVE - don't add minecraft player height to the openVR position data
+	
+				
+				if (this.mc.gameSettings.thirdPersonView == 0 && !this.mc.renderViewEntity.isPlayerSleeping() /*&& !this.mc.vrSettings.hideGui*/ && !this.mc.playerController.enableEverythingIsScrewedUpMode())
+				{
+	
+					// VIVE START - from HMD to controller
+					SetupRenderingAtController(0);
+	
+					
+					
+					this.enableLightmap((double) par1);
+	
+					if (shadersMod) {
+						Reflector.callVoid(Reflector.ShadersMod_ShadersRender_renderItemFP, new Object[] {this.itemRenderer, par1});
+					}
+					else {
+	
+						ItemStack item = mc.thePlayer.inventory.getCurrentItem();
+	
+						if(item != null && item.getItem()instanceof ItemBow){
+							boolean infiniteAmmo = mc.thePlayer.capabilities.isCreativeMode || EnchantmentHelper.getEnchantmentLevel(Enchantment.infinity.effectId, item) > 0;
+							int c = 0;
+							if (mc.vrSettings.vrReverseShootingEye) c = 1;
+							if ((mc.thePlayer.inventory.hasItem(Items.arrow) || infiniteAmmo) && !mc.bowTracker.isNotched()) { //render the arrow in right, left hand will check for and render bow.
+								renderItemInFirstPersonForController(par1, c,  new ItemStack(Items.arrow));  
+							} else {
+								renderItemInFirstPersonForController(par1, c,  null); //hand  
+							}
+						}else {
+							this.itemRenderer.renderItemInFirstPerson(par1);
+						}
+					}
+					this.disableLightmap((double) par1);
+				}
+	
+	
+		    	RenderHelper.disableStandardItemLighting();    
+				GL11.glDisable(GL11.GL_LIGHTING);
+				GL11.glPopMatrix();
+			}
+	
+	
+			if (shadersMod) {
+				//if (!Shaders.isCompositeRendered) {
+				if (!(Boolean)Reflector.getFieldValue(Reflector.ShadersMod_Shaders_isCompositeRendered)) {
+					return;
+				}
+	
+				this.disableLightmap((double) par1);
+			}
+			/** END MINECRIFT SHADERS MOD */
+			if (this.mc.gameSettings.thirdPersonView == 0 && !this.mc.renderViewEntity.isPlayerSleeping())
+			{
+	
+				this.itemRenderer.renderOverlays(par1);
+	
+				//blue circle buddy	  - have to draw here so it sits on top of overlays (face in block)
+				GL11.glMatrixMode(GL11.GL_MODELVIEW);
+				GL11.glLoadIdentity();
+				orientModelView(false, false);    
+	
+				if(this.mc.vrSettings.vrShowBlueCircleBuddy){
+					if(eyeCollision ){
+						int was = GL11.glGetInteger(GL11.GL_DEPTH_FUNC);
+						GL11.glDepthFunc(GL11.GL_ALWAYS);
+						renderCircle(mc.thePlayer.getPosition(par1).addVector(-interpolatedPlayerPos.xCoord, - mc.thePlayer.yOffset+ mc.thePlayer.yOffset2 -interpolatedPlayerPos.yCoord + 0.02f, -interpolatedPlayerPos.zCoord), 0.05f, 32, 0, 255, 255, 128, 1);
+						GL11.glDepthFunc(was);
+
+					}  else {
+						renderCircle(mc.thePlayer.getPosition(par1).addVector(-interpolatedPlayerPos.xCoord, - mc.thePlayer.yOffset + mc.thePlayer.yOffset2 -interpolatedPlayerPos.yCoord + 0.02f, -interpolatedPlayerPos.zCoord), 0.05f, 32, 0, 255, 255, 48, 1);            		
+					}
+				}
+				
+				if (!this.mc.vrSettings.debugPos) {
+					this.hurtCameraEffect(par1);
+				}
+			}
+	
+			if (this.mc.gameSettings.viewBobbing && !this.mc.vrSettings.debugPos)
+			{
+				this.setupViewBobbing(par1);
+			}
+		GL11.glPopMatrix();
+	}
+		/** END MINECRIFT */
+
+
+    //this is we dont have to change the signature of renderiteminfirstperson
+    public void renderItemInFirstPersonForController(float nano, int controller, ItemStack item){ //controller relative
+    	ItemRenderer e = this.itemRenderer;
+    	ItemStack prev = e.itemToRender;
+    	int preci = e.controller;
+    	e.itemToRender = item;
+    	e.controller = controller;
+    	e.renderItemInFirstPerson(nano);
+    	e.itemToRender = prev;
+    	e.controller = preci;
     }
-
-    /**
-     * Render player hand
-     */
-    private void renderHand(float par1, int par2)
-    {
-        if (this.debugViewDirection <= 0)
+	
+	/**
+	 * Disable secondary texture unit used by lightmap
+	 */
+	public void disableLightmap(double par1)
+	{
+		OpenGlHelper.setActiveTexture(OpenGlHelper.lightmapTexUnit);
+		GL11.glDisable(GL11.GL_TEXTURE_2D);
+		OpenGlHelper.setActiveTexture(OpenGlHelper.defaultTexUnit);
+		/** MINECRIFT SHADERS MOD */
+		if (Reflector.shadersModExists()) {
+			//Shaders.disableLightmap();
+			Reflector.callVoid(Reflector.ShadersMod_Shaders_disableLightmap, new Object[] {});
+		}
+		/** END MINECRIFT SHADERS MOD */
+	}
+
+	/**
+	 * Enable lightmap in secondary texture unit
+	 */
+	public void enableLightmap(double par1)
+	{
+		OpenGlHelper.setActiveTexture(OpenGlHelper.lightmapTexUnit);
+		GL11.glMatrixMode(GL11.GL_TEXTURE);
+		GL11.glLoadIdentity();
+		float var3 = 0.00390625F;
+		GL11.glScalef(var3, var3, var3);
+		GL11.glTranslatef(8.0F, 8.0F, 8.0F);
+		GL11.glMatrixMode(GL11.GL_MODELVIEW);
+		this.mc.getTextureManager().bindTexture(this.locationLightMap);
+		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
+		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
+		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, GL11.GL_CLAMP);
+		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL11.GL_CLAMP);
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		GL11.glEnable(GL11.GL_TEXTURE_2D);
+		OpenGlHelper.setActiveTexture(OpenGlHelper.defaultTexUnit);
+		/** MINECRIFT SHADERS MOD */
+		if (Reflector.shadersModExists()) {
+			//Shaders.enableLightmap();
+			Reflector.callVoid(Reflector.ShadersMod_Shaders_enableLightmap, new Object[]{});
+		}
+		/** END MINECRIFT SHADERS MOD */
+	}
+
+	/**
+	 * Recompute a random value that is applied to block color in updateLightmap()
+	 */
+	private void updateTorchFlicker()
+	{
+		this.torchFlickerDX = (float)((double)this.torchFlickerDX + (Math.random() - Math.random()) * Math.random() * Math.random());
+		this.torchFlickerDY = (float)((double)this.torchFlickerDY + (Math.random() - Math.random()) * Math.random() * Math.random());
+		this.torchFlickerDX = (float)((double)this.torchFlickerDX * 0.9D);
+		this.torchFlickerDY = (float)((double)this.torchFlickerDY * 0.9D);
+		this.torchFlickerX += (this.torchFlickerDX - this.torchFlickerX) * 1.0F;
+		this.torchFlickerY += (this.torchFlickerDY - this.torchFlickerY) * 1.0F;
+		this.lightmapUpdateNeeded = true;
+	}
+
+	private void updateLightmap(float par1)
+	{
+		WorldClient var2 = this.mc.theWorld;
+
+		if (var2 != null)
+		{
+			if (CustomColorizer.updateLightmap(var2, this.torchFlickerX, this.lightmapColors, this.mc.thePlayer.isPotionActive(Potion.nightVision)))
+			{
+				this.lightmapTexture.updateDynamicTexture();
+				this.lightmapUpdateNeeded = false;
+				return;
+			}
+
+			for (int var3 = 0; var3 < 256; ++var3)
+			{
+				float var4 = var2.getSunBrightness(1.0F) * 0.95F + 0.05F;
+				float var5 = var2.provider.lightBrightnessTable[var3 / 16] * var4;
+				float var6 = var2.provider.lightBrightnessTable[var3 % 16] * (this.torchFlickerX * 0.1F + 1.5F);
+
+				if (var2.lastLightningBolt > 0)
+				{
+					var5 = var2.provider.lightBrightnessTable[var3 / 16];
+				}
+
+				float var7 = var5 * (var2.getSunBrightness(1.0F) * 0.65F + 0.35F);
+				float var8 = var5 * (var2.getSunBrightness(1.0F) * 0.65F + 0.35F);
+				float var11 = var6 * ((var6 * 0.6F + 0.4F) * 0.6F + 0.4F);
+				float var12 = var6 * (var6 * var6 * 0.6F + 0.4F);
+				float var13 = var7 + var6;
+				float var14 = var8 + var11;
+				float var15 = var5 + var12;
+				var13 = var13 * 0.96F + 0.03F;
+				var14 = var14 * 0.96F + 0.03F;
+				var15 = var15 * 0.96F + 0.03F;
+				float var16;
+
+				if (this.bossColorModifier > 0.0F)
+				{
+					var16 = this.bossColorModifierPrev + (this.bossColorModifier - this.bossColorModifierPrev) * par1;
+					var13 = var13 * (1.0F - var16) + var13 * 0.7F * var16;
+					var14 = var14 * (1.0F - var16) + var14 * 0.6F * var16;
+					var15 = var15 * (1.0F - var16) + var15 * 0.6F * var16;
+				}
+
+				if (var2.provider.dimensionId == 1)
+				{
+					var13 = 0.22F + var6 * 0.75F;
+					var14 = 0.28F + var11 * 0.75F;
+					var15 = 0.25F + var12 * 0.75F;
+				}
+
+				float var17;
+
+				if (this.mc.thePlayer.isPotionActive(Potion.nightVision))
+				{
+					var16 = this.getNightVisionBrightness(this.mc.thePlayer, par1);
+					var17 = 1.0F / var13;
+
+					if (var17 > 1.0F / var14)
+					{
+						var17 = 1.0F / var14;
+					}
+
+					if (var17 > 1.0F / var15)
+					{
+						var17 = 1.0F / var15;
+					}
+
+					var13 = var13 * (1.0F - var16) + var13 * var17 * var16;
+					var14 = var14 * (1.0F - var16) + var14 * var17 * var16;
+					var15 = var15 * (1.0F - var16) + var15 * var17 * var16;
+				}
+
+				if (var13 > 1.0F)
+				{
+					var13 = 1.0F;
+				}
+
+				if (var14 > 1.0F)
+				{
+					var14 = 1.0F;
+				}
+
+				if (var15 > 1.0F)
+				{
+					var15 = 1.0F;
+				}
+
+				var16 = this.mc.gameSettings.gammaSetting;
+				var17 = 1.0F - var13;
+				float var18 = 1.0F - var14;
+				float var19 = 1.0F - var15;
+				var17 = 1.0F - var17 * var17 * var17 * var17;
+				var18 = 1.0F - var18 * var18 * var18 * var18;
+				var19 = 1.0F - var19 * var19 * var19 * var19;
+				var13 = var13 * (1.0F - var16) + var17 * var16;
+				var14 = var14 * (1.0F - var16) + var18 * var16;
+				var15 = var15 * (1.0F - var16) + var19 * var16;
+				var13 = var13 * 0.96F + 0.03F;
+				var14 = var14 * 0.96F + 0.03F;
+				var15 = var15 * 0.96F + 0.03F;
+
+				if (var13 > 1.0F)
+				{
+					var13 = 1.0F;
+				}
+
+				if (var14 > 1.0F)
+				{
+					var14 = 1.0F;
+				}
+
+				if (var15 > 1.0F)
+				{
+					var15 = 1.0F;
+				}
+
+				if (var13 < 0.0F)
+				{
+					var13 = 0.0F;
+				}
+
+				if (var14 < 0.0F)
+				{
+					var14 = 0.0F;
+				}
+
+				if (var15 < 0.0F)
+				{
+					var15 = 0.0F;
+				}
+
+				short var20 = 255;
+				int var21 = (int)(var13 * 255.0F);
+				int var22 = (int)(var14 * 255.0F);
+				int var23 = (int)(var15 * 255.0F);
+				this.lightmapColors[var3] = var20 << 24 | var21 << 16 | var22 << 8 | var23;
+			}
+
+			this.lightmapTexture.updateDynamicTexture();
+			this.lightmapUpdateNeeded = false;
+		}
+	}
+
+	/**
+	 * Gets the night vision brightness
+	 */
+	private float getNightVisionBrightness(EntityPlayer par1EntityPlayer, float par2)
+	{
+		int var3 = par1EntityPlayer.getActivePotionEffect(Potion.nightVision).getDuration();
+		return var3 > 200 ? 1.0F : 0.7F + MathHelper.sin(((float)var3 - par2) * (float)Math.PI * 0.2F) * 0.3F;
+	}
+
+	/**
+	 * Will update any inputs that effect the camera angle (mouse) and then render the world and GUI
+	 */
+	public void updateCameraAndRender(float par1)
+	{
+
+		if (!this.initialized)
+		{
+			TextureUtils.registerResourceListener();
+			RenderPlayerOF.register();
+			ItemRendererOF world = new ItemRendererOF(this.mc);
+			this.itemRenderer = world;
+			RenderManager.instance.itemRenderer = world;
+
+			if (Config.getBitsOs() == 64 && Config.getBitsJre() == 32)
+			{
+				Config.setNotify64BitJava(true);
+			}
+
+			this.initialized = true;
+		}
+
+		Config.checkDisplayMode();
+		WorldClient world1 = this.mc.theWorld;
+
+		if (world1 != null && Config.getNewRelease() != null)
+		{
+			String var2 = "HD_U".replace("HD_U", "HD Ultra").replace("L", "Light");
+			String var13 = var2 + " " + Config.getNewRelease();
+			ChatComponentText var14 = new ChatComponentText("A new \u00a7eOptiFine\u00a7f version is available: \u00a7e" + var13 + "\u00a7f");
+			this.mc.ingameGUI.getChatGUI().printChatMessage(var14);
+			Config.setNewRelease((String)null);
+		}
+
+		if (world1 != null && Config.isNotify64BitJava())
+		{
+			Config.setNotify64BitJava(false);
+			ChatComponentText var21 = new ChatComponentText(I18n.format("You can install \u00a7e64-bit Java\u00a7f to increase performance", new Object[0]));
+			this.mc.ingameGUI.getChatGUI().printChatMessage(var21);
+		}
+
+		/** MINECRIFT */
+		if (world1 != null && this.warningsEnabled)
+		{
+			// ADD ANY WARNINGS HERE
+			//if (!Display.isFullscreen() && this.mc.isDirectMode == false)
+			//    this.mc.printChatMessage("Minecrift is not running in Fullscreen mode. Please Fullscreen via F11!");
+
+			this.warningsEnabled = false;
+		}
+
+		if (world1 == null)
+			this.warningsEnabled = true;
+		/** END MINECRIFT */
+		if (this.mc.currentScreen instanceof GuiMainMenu)
+		{
+			this.updateMainMenu((GuiMainMenu)this.mc.currentScreen);
+		}
+
+		if (this.updatedWorld != world1)
+		{
+			RandomMobs.worldChanged(this.updatedWorld, world1);
+			Config.updateThreadPriorities();
+			this.lastServerTime = 0L;
+			this.lastServerTicks = 0;
+			this.updatedWorld = world1;
+		}
+
+		RenderBlocks.fancyGrass = Config.isGrassFancy() || Config.isBetterGrassFancy();
+		Blocks.leaves.setGraphicsLevel(Config.isTreesFancy());
+
+		if (this.lightmapUpdateNeeded)
+		{
+			this.updateLightmap(par1);
+		}
+
+		boolean var21 = Display.isActive();
+
+		if (!var21 && this.mc.gameSettings.pauseOnLostFocus && (!this.mc.gameSettings.touchscreen || !Mouse.isButtonDown(1)))
+		{
+			if (Minecraft.getSystemTime() - this.prevFrameTime > 500L)
+			{
+				this.mc.displayInGameMenu();
+			}
+		}
+		else
+		{
+			this.prevFrameTime = Minecraft.getSystemTime();
+		}
+		/** MINECRIFT */
+		//Update hud Yaw
+		//if( guiScreenShowingThisFrame && !hudShowingLastFrame)
+		//  hudHeadYaw = this.mc.lookaimController.getBodyYawDegrees() - (float)this.cameraYaw;
+
+		// update in-game menu yaw
+		if( inWorldGuiScreenShowingThisFrame && !inGameMenuShowingLastFrame)
+			inGameMenuHeadYaw = this.mc.roomScale.getHMDYaw_World() - (float)this.cameraYaw;
+
+		hudShowingLastFrame = guiScreenShowingThisFrame;
+		inGameMenuShowingLastFrame = inWorldGuiScreenShowingThisFrame;
+
+		/** END MINECRIFT */
+
+
+		if (!this.mc.skipRenderWorld)
+		{
+			
+			/** MINECRIFT */
+			anaglyphEnable = false;
+			
+			boolean var12;
+			/** END MINECRIFT */
+
+			//RENDER WORLD
+			if (this.mc.theWorld != null && !(mc.currentScreen instanceof GuiWinGame))
+			{
+				this.mc.mcProfiler.startSection("level");
+				/** MINECRIFT */
+
+				this.renderWorld(par1, 0L);
+
+				/** END MINECRIFT */
+				if (OpenGlHelper.shadersSupported)
+				{
+					if (this.theShaderGroup != null)
+					{
+						GL11.glMatrixMode(GL11.GL_TEXTURE);
+						GL11.glPushMatrix();
+						GL11.glLoadIdentity();
+						this.theShaderGroup.loadShaderGroup(par1);
+						GL11.glPopMatrix();
+						/** MINECRIFT */
+						GL11.glMatrixMode(GL11.GL_MODELVIEW);
+						/** END MINECRIFT */
+					}
+
+					this.mc.getFramebuffer().bindFramebuffer(true);
+				}
+
+				this.renderEndNanoTime = System.nanoTime();
+				/** MINECRIFT */
+				if (!this.mc.stereoProvider.isStereo())
+				{
+					if (!this.mc.vrSettings.hideGui || this.mc.currentScreen != null)
+					{
+						GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);
+						var12 = this.mc.gameSettings.fancyGraphics;
+
+						if (!Config.isVignetteEnabled())
+						{
+							this.mc.gameSettings.fancyGraphics = false;
+						}
+
+						/** MINECRIFT FORGE **/
+						// Disable any forge gui crosshairs and helmet overlay (pumkinblur)
+						if (Reflector.ForgeGuiIngame_renderCrosshairs.exists()) {
+							Reflector.ForgeGuiIngame_renderCrosshairs.setValue(false);
+							Reflector.ForgeGuiIngame_renderHelmet.setValue(false);
+						}
+						/** END MINECRIFT FORGE **/
+					
+						
+						//why was this called twice per loop??
+					//	this.mc.ingameGUI.renderGameOverlay(par1, this.mc.currentScreen != null, var161, var171);
+						
+						this.mc.gameSettings.fancyGraphics = var12;
+
+						if (this.mc.gameSettings.ofShowFps && !this.mc.gameSettings.showDebugInfo)
+						{
+							Config.drawFps();
+						}
+
+					}
+				}
+				/** END MINECRIFT */
+				this.mc.mcProfiler.endSection(); //level
+			}
+			else //world is null
+			{
+				/** MINECRIFT */ // Gui Main Menus...
+
+				GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);            // Clear Screen And Depth Buffer on the framebuffer to black
+				GL11.glDisable(GL11.GL_BLEND);
+
+				/** END MINECRIFT */
+				this.renderEndNanoTime = System.nanoTime();
+			}
+
+			/** MINECRIFT */ // Minecrift - render fade
+			renderFadeEffects();
+
+				GL11.glDisable(GL11.GL_BLEND);
+				GL11.glDisable(GL11.GL_ALPHA_TEST);
+				GL11.glEnable(GL11.GL_DEPTH_TEST);
+
+				if(!mc.bowTracker.isDrawing)
+					renderGuiLayer(par1);
+
+				// VIVE START - render controllers in main menu
+				if (this.mc.theWorld==null || mc.currentScreen instanceof GuiWinGame)
+				{
+					renderMainMenuHands();
+				}
+				// VIVE END - render controllers in main menu
+	
+				
+			//begone, foul 2d rendering!
+//			else if (this.mc.integratedServerLaunchInProgress)
+//			{
+//				this.mc.enableGuiSizeHack();
+//				this.mc.loadingScreen.renderTarget = this.mc.getFramebuffer();
+//				this.mc.loadingScreen.render();
+//				this.mc.disableGuiSizeHack();
+//			}
+//			else if (this.mc.currentScreen != null)
+//			{
+//				this.mc.enableGuiSizeHack();
+//				GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
+//
+//				if (this.mc.showSplashScreen){
+//					//why is this here.
+//				this.mc.showSplash(this.mc.getFramebuffer());
+//				}		
+//				else
+//				{
+//					try
+//					{
+//						var12 = false;
+//
+//						if (Reflector.EventBus_post.exists())
+//						{
+//							var12 = Reflector.postForgeBusEvent(Reflector.DrawScreenEvent_Pre_Constructor, new Object[] {this.mc.currentScreen, Integer.valueOf(mouseX), Integer.valueOf(mouseY), Float.valueOf(par1)});
+//						}
+//
+//						if (!var12)
+//						{
+//							this.mc.currentScreen.drawScreen(mouseX, mouseY, par1);
+//						}
+//
+//						
+//						Reflector.postForgeBusEvent(Reflector.DrawScreenEvent_Post_Constructor, new Object[] {this.mc.currentScreen, Integer.valueOf(mouseX), Integer.valueOf(mouseY), Float.valueOf(par1)});
+//					}
+//					catch (Throwable var131)
+//					{
+//						CrashReport var10 = CrashReport.makeCrashReport(var131, "Rendering screen");
+//						CrashReportCategory var11 = var10.makeCategory("Screen render details");
+//						var11.addCrashSectionCallable("Screen name", new Callable()
+//						{
+//							private static final String __OBFID = "CL_00000948";
+//							public String call()
+//							{
+//								return EntityRenderer.this.mc.currentScreen.getClass().getCanonicalName();
+//							}
+//						});
+//						var11.addCrashSectionCallable("Mouse location", new Callable()
+//						{
+//							private static final String __OBFID = "CL_00000950";
+//							public String call()
+//							{
+//								return String.format("Scaled: (%d, %d). Absolute: (%d, %d)", new Object[] {Integer.valueOf(mouseX), Integer.valueOf(mouseY), Integer.valueOf(Mouse.getX()), Integer.valueOf(Mouse.getY())});
+//							}
+//						});
+//						var11.addCrashSectionCallable("Screen size", new Callable()
+//						{
+//							private static final String __OBFID = "CL_00000951";
+//							public String call()
+//							{
+//								return String.format("Scaled: (%d, %d). Absolute: (%d, %d). Scale factor of %d", new Object[] {Integer.valueOf(var133.getScaledWidth()), Integer.valueOf(var133.getScaledHeight()), Integer.valueOf(EntityRenderer.this.mc.displayWidth), Integer.valueOf(EntityRenderer.this.mc.displayHeight), Integer.valueOf(var133.getScaleFactor())});
+//							}
+//						});
+//						throw new ReportedException(var10);
+//					}
+//				}
+//			}
+
+			// Minecrift - handle notification text
+			handleNotificationText();
+
+			/** END MINECRIFT */    
+		}
+
+		this.frameFinish();
+		this.waitForServerThread();
+
+		if (this.mc.gameSettings.showDebugInfo != this.lastShowDebugInfo)
+		{
+			this.showExtendedDebugInfo = this.mc.gameSettings.showDebugProfilerChart;
+			this.lastShowDebugInfo = this.mc.gameSettings.showDebugInfo;
+		}
+
+		if (this.mc.gameSettings.showDebugInfo)
+		{
+			this.showLagometer(this.mc.mcProfiler.timeTickNano, this.mc.mcProfiler.timeUpdateChunksNano);
+		}
+
+		if (this.mc.gameSettings.ofProfiler)
+		{
+			this.mc.gameSettings.showDebugProfilerChart = true;
+		}
+	}
+
+	public void func_152430_c(float p_152430_1_)
+	{
+		this.setupOverlayRendering();
+		ScaledResolution var2 = new ScaledResolution(this.mc, this.mc.displayWidth, this.mc.displayHeight);
+		int var3 = var2.getScaledWidth();
+		int var4 = var2.getScaledHeight();
+		this.mc.ingameGUI.renderStreamIndicator((float)var3, (float)var4);
+	}
+
+	public void renderWorld(float par1, long par2)
+	{
+		/** MINECRIFT SHADERS MOD **/
+		boolean shadersMod = Reflector.shadersModExists();
+		if (shadersMod) {
+			Reflector.callVoid(Reflector.ShadersMod_Shaders_beginRender, new Object[] {this.mc, par1, par2});
+		}
+		/** END MINECRIFT SHADERS MOD **/
+		this.mc.mcProfiler.startSection("lightTex");
+
+		if (this.lightmapUpdateNeeded)
+		{
+			this.updateLightmap(par1);
+		}
+
+		GL11.glEnable(GL11.GL_CULL_FACE);
+		GL11.glEnable(GL11.GL_DEPTH_TEST);
+		GL11.glEnable(GL11.GL_ALPHA_TEST);
+		GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);
+
+		if (this.mc.renderViewEntity == null)
+		{
+			this.mc.renderViewEntity = this.mc.thePlayer;
+		}
+
+		this.mc.mcProfiler.endStartSection("pick");
+		this.getMouseOver(par1);
+		EntityLivingBase player = this.mc.renderViewEntity;
+		RenderGlobal rg = this.mc.renderGlobal;
+		EffectRenderer var6 = this.mc.effectRenderer;
+
+		/** MINECRIFT */
+		interpolatedPlayerPos.xCoord = player.lastTickPosX + (player.posX - player.lastTickPosX) * (double)par1;
+		interpolatedPlayerPos.yCoord = player.lastTickPosY + (player.posY - player.lastTickPosY) * (double)par1;
+		interpolatedPlayerPos.zCoord = player.lastTickPosZ + (player.posZ - player.lastTickPosZ) * (double)par1;
+		interpolatedPlayerPos = Vec3.createVectorHelper(interpolatedPlayerPos.xCoord, interpolatedPlayerPos.yCoord, interpolatedPlayerPos.zCoord);
+		
+		//update interpolatedRoomOrigin
+		mc.vrPlayer.onFrameUpdate(par1);
+		
+		if( this.mc.currentScreen == null )
+		{
+			getPointedBlock(par1);   // TODO: This needs to be called once, and with the average position
+			// information for the entire frame, not individual eye pos camRelX, Y, Z
+		}
+
+		// Update sound engine
+		setSoundListenerOrientation();
+		/** END MINECRIFT */
+		this.mc.mcProfiler.endStartSection("center");
+
+		this.mc.mcProfiler.endStartSection("clear");
+		/** MINECRIFT SHADERS MOD **/
+
+		if (shadersMod) {
+			//Shaders.setViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
+			Reflector.callVoid(Reflector.ShadersMod_Shaders_setViewport, new Object[] {0, 0, this.mc.displayFBWidth, this.mc.displayFBHeight});
+		}
+		else {
+			GL11.glViewport(0, 0, this.mc.displayFBWidth, this.mc.displayFBHeight);
+		}
+
+		this.updateFogColor(par1);
+
+		//Main eye clear - start from here.
+		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
+
+		if(mc.vrSettings.vrUseStencil && mc.stereoProvider.isStereo() && mc.vrPlayer.isHMDTracking())	
+			mc.doStencilForEye(mc.currentEye == EyeType.ovrEye_Left ? 0 : 1); //TODO: dont render this every damn frame.
+		else GL11.glDisable(GL11.GL_STENCIL_TEST);
+
+		if (shadersMod) {
+			//Shaders.clearRenderBuffer();
+			Reflector.callVoid(Reflector.ShadersMod_Shaders_clearRenderBuffer, new Object[] {});
+		}
+		GL11.glEnable(GL11.GL_CULL_FACE);
+		this.mc.mcProfiler.endStartSection("camera");	
+
+		this.setupCameraTransform(par1, 0);
+
+		if (shadersMod) {
+			//Shaders.setCamera(par1);
+			Reflector.callVoid(Reflector.ShadersMod_Shaders_setCamera, new Object[] {par1});
+		}
+		/** END MINECRIFT SHADERS MOD **/
+		/** MINECRIFT */ // Save our projection and modelview matrices
+		GL11.glMatrixMode(GL11.GL_PROJECTION);
+		GL11.glPushMatrix();
+		GL11.glMatrixMode(GL11.GL_MODELVIEW);
+		GL11.glPushMatrix();
+		/** END MINECRIFT */
+		ActiveRenderInfo.updateRenderInfo(this.mc.thePlayer, this.mc.gameSettings.thirdPersonView == 2);
+		this.mc.mcProfiler.endStartSection("frustrum");
+		ClippingHelperImpl.getInstance();
+
+		/** MINECRIFT SHADERS MOD **/
+		if (shadersMod)
+		{
+			if(/*!Shaders.isShadowPass*/!(Boolean)Reflector.getFieldValue(Reflector.ShadersMod_Shaders_isShadowPass) && (Config.isSkyEnabled() || Config.isSunMoonEnabled() || Config.isStarsEnabled()))
+			{
+				this.setupFog(-1, par1);
+				this.mc.mcProfiler.endStartSection("sky");
+				//Shaders.beginSky();
+				Reflector.callVoid(Reflector.ShadersMod_Shaders_beginSky, new Object[] {});
+				rg.renderSky(par1);
+				//Shaders.endSky();
+				Reflector.callVoid(Reflector.ShadersMod_Shaders_endSky, new Object[] {});
+			}
+			else
+			{
+				GL11.glDisable(GL11.GL_BLEND);
+			}
+		}
+		else
+		{
+			if (!Config.isSkyEnabled() && !Config.isSunMoonEnabled() && !Config.isStarsEnabled())
+			{
+				GL11.glDisable(GL11.GL_BLEND);
+			}
+			else
+			{
+				this.setupFog(-1, par1);
+				this.mc.mcProfiler.endStartSection("sky");
+				rg.renderSky(par1);
+			}
+		}
+		/** END MINECRIFT SHADERS MOD **/
+
+		GL11.glEnable(GL11.GL_FOG);
+		this.setupFog(1, par1);
+
+		if (this.mc.gameSettings.ambientOcclusion != 0)
+		{
+			GL11.glShadeModel(GL11.GL_SMOOTH);
+		}
+
+		this.mc.mcProfiler.endStartSection("culling");
+		Frustrum frustrum = new Frustrum();
+		/** MINECRIFT */
+		/** MINECRIFT SHADERS MOD **/
+		if (shadersMod) {
+			//ShadersRender.setFrustrumPosition(var14, interpolatedPlayerPos.xCoord, interpolatedPlayerPos.yCoord, interpolatedPlayerPos.zCoord);
+			//ShadersRender.clipRenderersByFrustrum(this.mc.renderGlobal, var14, par1);
+			Reflector.callVoid(Reflector.ShadersMod_ShadersRender_setFrustrumPosition, new Object[] {frustrum, interpolatedPlayerPos.xCoord, interpolatedPlayerPos.yCoord, interpolatedPlayerPos.zCoord});
+			Reflector.callVoid(Reflector.ShadersMod_ShadersRender_clipRenderersByFrustrum, new Object[] {this.mc.renderGlobal, frustrum, par1});
+		}
+		else {
+			
+			frustrum.setPosition(interpolatedPlayerPos.xCoord, interpolatedPlayerPos.yCoord, interpolatedPlayerPos.zCoord);
+			
+			this.mc.renderGlobal.clipRenderersByFrustum(frustrum, par1);
+		}
+		/** END MINECRIFT SHADERS MOD **/
+
+		//    if (eye == 0 && renderpass == 0)  //why one eye?
+		if ( renderpass == 0)  
+		{
+			/** END MINECRIFT */
+			/** MINECRIFT SHADERS MOD **/
+			if (shadersMod) {
+				//Shaders.beginUpdateChunks();
+				Reflector.callVoid(Reflector.ShadersMod_Shaders_beginUpdateChunks, new Object[] {});
+			}
+			this.mc.mcProfiler.endStartSection("updatechunks");
+
+			while (!this.mc.renderGlobal.updateRenderers(player, false) && par2 != 0L)
+			{
+				long var17 = par2 - System.nanoTime();
+
+				if (var17 < 0L || var17 > 1000000000L)
+				{
+					break;
+				}
+			}
+
+			if (shadersMod) {
+				//Shaders.endUpdateChunks();
+				Reflector.callVoid(Reflector.ShadersMod_Shaders_endUpdateChunks, new Object[] {});
+			}
+			/** END MINECRIFT SHADERS MOD **/
+		}
+
+		if (player.posY < 128.0D)
+		{
+			this.renderCloudsCheck(rg, par1);
+		}
+
+		this.mc.mcProfiler.endStartSection("prepareterrain");
+		this.setupFog(0, par1);
+		GL11.glEnable(GL11.GL_FOG);
+		this.mc.getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
+		RenderHelper.disableStandardItemLighting();
+		this.mc.mcProfiler.endStartSection("terrain");
+
+
+		GL11.glMatrixMode(GL11.GL_MODELVIEW);
+		GL11.glPushMatrix();
+
+		/** MINECRIFT SHADERS MOD **/
+		if (shadersMod) {
+			//Shaders.beginTerrain();
+			Reflector.callVoid(Reflector.ShadersMod_Shaders_beginTerrain, new Object[] {});
+		}
+
+		rg.sortAndRender(player, 0, (double)par1);
+
+		if (shadersMod) {
+			//Shaders.endTerrain();
+			Reflector.callVoid(Reflector.ShadersMod_Shaders_endTerrain, new Object[] {});
+		}
+		/** END MINECRIFT SHADERS MOD **/
+
+
+		GL11.glShadeModel(GL11.GL_FLAT);
+		GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);
+		boolean hasForge = Reflector.ForgeHooksClient.exists();
+		EntityPlayer var18;
+
+		/** MINECRIFT */
+		boolean renderOutline = this.mc.vrSettings.renderBlockOutlineMode == VRSettings.RENDER_BLOCK_OUTLINE_MODE_ALWAYS ||
+				(this.mc.vrSettings.renderBlockOutlineMode == VRSettings.RENDER_BLOCK_OUTLINE_MODE_HUD && !this.mc.vrSettings.hideGui);
+		// VIVE START - don't render outline if aiming a teleport
+		if (mc.vrPlayer.movementTeleportProgress>0.0f)
+		{
+			renderOutline = false;
+		}
+
+
+		// VIVE END - don't render outline if aiming a teleport
+		/** END MINECRIFT */
+		if (this.debugViewDirection == 0)
+		{ //this renders all the entities
+			debugViewDirection(par1, player, rg, frustrum, hasForge, renderOutline);
+		}
+
+		GL11.glMatrixMode(GL11.GL_MODELVIEW);
+		GL11.glPopMatrix();
+
+
+		if (this.cameraZoom == 1.0D && player instanceof EntityPlayer && renderOutline && this.mc.objectMouseOver != null && !player.isInsideOfMaterial(Material.water))   // Minecrift
+		{
+			var18 = (EntityPlayer)player;
+			GL11.glDisable(GL11.GL_ALPHA_TEST);
+			this.mc.mcProfiler.endStartSection("outline");
+
+			if ((!hasForge || !Reflector.callBoolean(Reflector.ForgeHooksClient_onDrawBlockHighlight, new Object[] {rg, var18, this.mc.objectMouseOver, Integer.valueOf(0), var18.inventory.getCurrentItem(), Float.valueOf(par1)})) && renderOutline)    // Minecrift
+			{
+				rg.drawSelectionBox(var18, this.mc.objectMouseOver, 0, par1);
+			}
+			GL11.glEnable(GL11.GL_ALPHA_TEST);
+		}
+		/** END MINECRIFT */
+
+		this.mc.mcProfiler.endStartSection("destroyProgress");
+		GL11.glEnable(GL11.GL_BLEND);
+		OpenGlHelper.glBlendFunc(770, 1, 1, 0);
+		rg.drawBlockDamageTexture(Tessellator.instance, player, par1);
+		GL11.glDisable(GL11.GL_BLEND);
+		/** MINECRIFT SHADERS MOD **/
+		if (this.debugViewDirection == 0)
+		{
+			this.enableLightmap((double)par1);
+			this.mc.mcProfiler.endStartSection("litParticles");
+			if (shadersMod) {
+				//Shaders.beginLitParticles();
+				Reflector.callVoid(Reflector.ShadersMod_Shaders_beginLitParticles, new Object[] {});
+			}
+			var6.renderLitParticles(player, par1);
+			RenderHelper.disableStandardItemLighting();
+			this.setupFog(0, par1);
+			this.mc.mcProfiler.endStartSection("particles");
+			if (shadersMod) {
+				//Shaders.beginParticles();
+				Reflector.callVoid(Reflector.ShadersMod_Shaders_beginParticles, new Object[] {});
+			}
+			var6.renderParticles(player, par1);
+			if (shadersMod) {
+				//Shaders.endParticles();
+				Reflector.callVoid(Reflector.ShadersMod_Shaders_endParticles, new Object[] {});
+			}
+			this.disableLightmap((double)par1);
+		}
+
+		GL11.glDepthMask(false);
+		GL11.glEnable(GL11.GL_CULL_FACE);
+		this.mc.mcProfiler.endStartSection("weather");
+		if (shadersMod) {
+			//Shaders.beginWeather();
+			Reflector.callVoid(Reflector.ShadersMod_Shaders_beginWeather, new Object[] {});
+		}
+		this.renderRainSnow(par1);
+		if (shadersMod) {
+			//Shaders.endWeather();
+			Reflector.callVoid(Reflector.ShadersMod_Shaders_endWeather, new Object[] {});
+		}
+		GL11.glDepthMask(true);
+		if (shadersMod) {
+			//ShadersRender.renderHand0(this, par1, var13);
+			//Shaders.preWater();
+			Reflector.callVoid(Reflector.ShadersMod_Shaders_renderHand0, new Object[] {this, par1, 0});
+			Reflector.callVoid(Reflector.ShadersMod_Shaders_preWater, new Object[] {});
+		}
+
+
+		/** END MINECRIFT SHADERS MOD **/
+		GL11.glDisable(GL11.GL_BLEND);
+		GL11.glEnable(GL11.GL_CULL_FACE);
+		OpenGlHelper.glBlendFunc(770, 771, 1, 0);
+		GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);
+		this.setupFog(0, par1);
+		GL11.glEnable(GL11.GL_BLEND);
+		GL11.glDepthMask(false);
+		this.mc.getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
+		WrUpdates.resumeBackgroundUpdates();           
+
+		if (Config.isWaterFancy())
+		{
+			this.mc.mcProfiler.endStartSection("water");
+
+			if (this.mc.gameSettings.ambientOcclusion != 0)
+			{
+				GL11.glShadeModel(GL11.GL_SMOOTH);
+			}
+
+			GL11.glEnable(GL11.GL_BLEND);
+			OpenGlHelper.glBlendFunc(770, 771, 1, 0);
+
+			if (this.mc.gameSettings.anaglyph)
+			{
+				if (anaglyphField == 0)
+				{
+					GL11.glColorMask(false, true, true, true);
+				}
+				else
+				{
+					GL11.glColorMask(true, false, false, true);
+				}
+				/** MINECRIFT SHADERS MOD **/
+				if (shadersMod) {
+					//Shaders.beginWater();
+					Reflector.callVoid(Reflector.ShadersMod_Shaders_beginWater, new Object[] {});
+				}
+				rg.renderAllSortedRenderers(1, (double)par1);
+				if (shadersMod) {
+					//Shaders.endWater();
+					Reflector.callVoid(Reflector.ShadersMod_Shaders_endWater, new Object[] {});
+				}
+			}
+			else
+			{
+				if (shadersMod) {
+					//Shaders.beginWater();
+					Reflector.callVoid(Reflector.ShadersMod_Shaders_beginWater, new Object[] {});
+				}
+				rg.renderAllSortedRenderers(1, (double)par1);
+				if (shadersMod) {
+					//Shaders.endWater();
+					Reflector.callVoid(Reflector.ShadersMod_Shaders_endWater, new Object[] {});
+				}
+			}
+
+			GL11.glDisable(GL11.GL_BLEND);
+			GL11.glShadeModel(GL11.GL_FLAT);
+		}
+		else
+		{
+			this.mc.mcProfiler.endStartSection("water");
+			if (shadersMod) {
+				//Shaders.beginWater();
+				Reflector.callVoid(Reflector.ShadersMod_Shaders_beginWater, new Object[]{});
+			}
+			rg.renderAllSortedRenderers(1, (double)par1);
+			if (shadersMod) {
+				//Shaders.endWater();
+				Reflector.callVoid(Reflector.ShadersMod_Shaders_endWater, new Object[]{});
+			}
+		}
+
+		/** END MINECRIFT SHADERS MOD **/
+		WrUpdates.pauseBackgroundUpdates();
+
+		if (hasForge && this.debugViewDirection == 0)
+		{
+			RenderHelper.enableStandardItemLighting();
+			this.mc.mcProfiler.endStartSection("entities");
+			Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(1)});
+			this.mc.renderGlobal.renderEntities(player, frustrum, par1);
+			Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(-1)});
+			RenderHelper.disableStandardItemLighting();
+
+		}
+
+		GL11.glDepthMask(true);
+		GL11.glEnable(GL11.GL_CULL_FACE);
+		GL11.glDisable(GL11.GL_BLEND);
+		GL11.glDisable(GL11.GL_FOG);
+
+
+		if (player.posY >= 128.0D + (double)(this.mc.gameSettings.ofCloudsHeight * 128.0F))
+		{
+			this.mc.mcProfiler.endStartSection("aboveClouds");
+			this.renderCloudsCheck(rg, par1);
+		}
+
+		if (hasForge)
+		{
+			this.mc.mcProfiler.endStartSection("FRenderLast");
+			Reflector.callVoid(Reflector.ForgeHooksClient_dispatchRenderLast, new Object[] {rg, Float.valueOf(par1)});
+		}          
+
+		eyeCollisionBlock = getEyeCollisionBlock(mc.currentEye);
+
+
+		eyeCollision = (eyeCollisionBlock != null && eyeCollisionBlock.isNormalCube());
+
+		////END WORLD RENDERING
+
+		////START LOCAL RENDERING
+
+		/** MINECRIFT */ // restore our projection and modelview matrices
+		GL11.glMatrixMode(GL11.GL_PROJECTION);
+		GL11.glPopMatrix();
+		GL11.glMatrixMode(GL11.GL_MODELVIEW);
+		GL11.glPopMatrix();
+
+		if (this.mc.gameSettings.thirdPersonView == 0 && this.mc.vrSettings.renderFullFirstPersonModelMode == VRSettings.RENDER_FIRST_PERSON_HAND)
+		{
+			this.mc.mcProfiler.endStartSection("hand");
+			boolean haveRenderedFirstPersonHand = Reflector.callBoolean(Reflector.ForgeHooksClient_renderFirstPersonHand, new Object[]{this.mc.renderGlobal, Float.valueOf(par1), Integer.valueOf(0)});
+			/** MINECRIFT SHADERS MOD **/
+			boolean render = true;
+			if (shadersMod) {
+				//render = !Shaders.isShadowPass;
+				render = !(Boolean)Reflector.getFieldValue(Reflector.ShadersMod_Shaders_isShadowPass);
+			}
+			if (!haveRenderedFirstPersonHand && this.cameraZoom == 1.0D && render)
+			{
+				if (shadersMod) {
+					//ShadersRender.renderHand1(this, par1, var13);
+					//Shaders.renderCompositeFinal();
+					//GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);     // Minecrift - Don't clear depth buffer
+					//ShadersRender.renderFPOverlay(this, par1, var13);
+					Reflector.callVoid(Reflector.ShadersMod_Shaders_renderHand1, new Object[] {this, par1, 0});
+					Reflector.callVoid(Reflector.ShadersMod_Shaders_renderCompositeFinal, new Object[] {});
+					//GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);     // Minecrift - Don't clear depth buffer
+					Reflector.callVoid(Reflector.ShadersMod_Shaders_renderFPOverlay, new Object[] {this, par1, 0});
+				}
+				else {
+					//GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);     // Minecrift - Don't clear depth buffer
+
+					this.renderHand(par1, 0);
+					// VIVE - render left hand
+					this.renderLeftHand(par1);
+				}
+			}
+		}
+
+
+
+
+		/** END MINECRIFT */
+		if (shadersMod) {
+			//Shaders.endRender();
+			Reflector.callVoid(Reflector.ShadersMod_Shaders_endRender, new Object[] {});
+		}
+
+		/** END MINECRIFT SHADERS MOD **/
+		if (!this.mc.gameSettings.anaglyph)
+		{
+			this.mc.mcProfiler.endSection();
+			return;
+		}
+
+
+		GL11.glColorMask(true, true, true, false);
+		this.mc.mcProfiler.endSection();
+
+	}
+
+	private void debugViewDirection(float par1, EntityLivingBase var4, RenderGlobal var5, Frustrum var14,
+			boolean hasForge, boolean renderOutline) {
+		EntityPlayer var18;
+		GL11.glMatrixMode(GL11.GL_MODELVIEW);
+		GL11.glPopMatrix();
+		GL11.glPushMatrix();
+		RenderHelper.enableStandardItemLighting();
+		this.mc.mcProfiler.endStartSection("entities");
+
+		if (hasForge)
+		{
+			Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(0)});
+		}
+
+		var5.renderEntities(var4, var14, par1);
+
+		if (hasForge)
+		{
+			Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(-1)});
+		}
+
+		RenderHelper.disableStandardItemLighting();
+		this.disableLightmap((double)par1);
+		GL11.glMatrixMode(GL11.GL_MODELVIEW);
+		GL11.glPopMatrix();
+		GL11.glPushMatrix();
+		/** MINECRIFT */
+		if (this.mc.objectMouseOver != null && var4.isInsideOfMaterial(Material.water) && var4 instanceof EntityPlayer && renderOutline)     // Minecrift
+		{
+			var18 = (EntityPlayer)var4;
+			GL11.glDisable(GL11.GL_ALPHA_TEST);
+			this.mc.mcProfiler.endStartSection("outline");
+
+			if ((!hasForge || !Reflector.callBoolean(Reflector.ForgeHooksClient_onDrawBlockHighlight, new Object[] {var5, var18, this.mc.objectMouseOver, Integer.valueOf(0), var18.inventory.getCurrentItem(), Float.valueOf(par1)})) && renderOutline)    // Minecrift
+			{
+				var5.drawSelectionBox(var18, this.mc.objectMouseOver, 0, par1);
+			}
+			GL11.glEnable(GL11.GL_ALPHA_TEST);
+		}
+	}
+
+	/**
+	 * Render clouds if enabled
+	 */
+	private void renderCloudsCheck(RenderGlobal par1RenderGlobal, float par2)
+	{
+		/** MINECRIFT SHADERS MOD **/
+		boolean render = this.mc.gameSettings.shouldRenderClouds();
+		boolean shadersMod = Reflector.shadersModExists();
+		if (shadersMod) {
+			//render = Shaders.shouldRenderClouds(this.mc.gameSettings);
+			render = Reflector.callBoolean(Reflector.ShadersMod_Shaders_shouldRenderClouds, new Object[] {this.mc.gameSettings});
+		}
+		if (render)
+		{
+			this.mc.mcProfiler.endStartSection("clouds");
+			GL11.glPushMatrix();
+			this.setupFog(0, par2);
+			GL11.glEnable(GL11.GL_FOG);
+			if (shadersMod) {
+				//Shaders.beginClouds();
+				Reflector.callVoid(Reflector.ShadersMod_Shaders_beginClouds, new Object[] {});
+			}
+			par1RenderGlobal.renderClouds(par2);
+			if (shadersMod) {
+				//Shaders.endClouds();
+				Reflector.callVoid(Reflector.ShadersMod_Shaders_endClouds, new Object[] {});
+			}
+			GL11.glDisable(GL11.GL_FOG);
+			this.setupFog(1, par2);
+			GL11.glPopMatrix();
+		}
+		/** END MINECRIFT SHADERS MOD **/
+	}
+
+	private void addRainParticles()
+	{
+		float var1 = this.mc.theWorld.getRainStrength(1.0F);
+
+		if (!Config.isRainFancy())
+		{
+			var1 /= 2.0F;
+		}
+
+		if (var1 != 0.0F && Config.isRainSplash())
+		{
+			this.random.setSeed((long)this.rendererUpdateCount * 312987231L);
+			EntityLivingBase var2 = this.mc.renderViewEntity;
+			WorldClient var3 = this.mc.theWorld;
+			int var4 = MathHelper.floor_double(var2.posX);
+			int var5 = MathHelper.floor_double(var2.posY);
+			int var6 = MathHelper.floor_double(var2.posZ);
+			byte var7 = 10;
+			double var8 = 0.0D;
+			double var10 = 0.0D;
+			double var12 = 0.0D;
+			int var14 = 0;
+			int var15 = (int)(100.0F * var1 * var1);
+
+			if (this.mc.gameSettings.particleSetting == 1)
+			{
+				var15 >>= 1;
+			}
+			else if (this.mc.gameSettings.particleSetting == 2)
+			{
+				var15 = 0;
+			}
+
+			for (int var16 = 0; var16 < var15; ++var16)
+			{
+				int var17 = var4 + this.random.nextInt(var7) - this.random.nextInt(var7);
+				int var18 = var6 + this.random.nextInt(var7) - this.random.nextInt(var7);
+				int var19 = var3.getPrecipitationHeight(var17, var18);
+				Block var20 = var3.getBlock(var17, var19 - 1, var18);
+				BiomeGenBase var21 = var3.getBiomeGenForCoords(var17, var18);
+
+				if (var19 <= var5 + var7 && var19 >= var5 - var7 && var21.canSpawnLightningBolt() && var21.getFloatTemperature(var17, var19, var18) >= 0.15F)
+				{
+					float var22 = this.random.nextFloat();
+					float var23 = this.random.nextFloat();
+
+					if (var20.getMaterial() == Material.lava)
+					{
+						this.mc.effectRenderer.addEffect(new EntitySmokeFX(var3, (double)((float)var17 + var22), (double)((float)var19 + 0.1F) - var20.getBlockBoundsMinY(), (double)((float)var18 + var23), 0.0D, 0.0D, 0.0D));
+					}
+					else if (var20.getMaterial() != Material.air)
+					{
+						++var14;
+
+						if (this.random.nextInt(var14) == 0)
+						{
+							var8 = (double)((float)var17 + var22);
+							var10 = (double)((float)var19 + 0.1F) - var20.getBlockBoundsMinY();
+							var12 = (double)((float)var18 + var23);
+						}
+
+						EntityRainFX fx = new EntityRainFX(var3, (double)((float)var17 + var22), (double)((float)var19 + 0.1F) - var20.getBlockBoundsMinY(), (double)((float)var18 + var23));
+						CustomColorizer.updateWaterFX(fx, var3);
+						this.mc.effectRenderer.addEffect(fx);
+					}
+				}
+			}
+
+			if (var14 > 0 && this.random.nextInt(3) < this.rainSoundCounter++)
+			{
+				this.rainSoundCounter = 0;
+
+				if (var10 > var2.posY + 1.0D && var3.getPrecipitationHeight(MathHelper.floor_double(var2.posX), MathHelper.floor_double(var2.posZ)) > MathHelper.floor_double(var2.posY))
+				{
+					this.mc.theWorld.playSound(var8, var10, var12, "ambient.weather.rain", 0.1F, 0.5F, false);
+				}
+				else
+				{
+					this.mc.theWorld.playSound(var8, var10, var12, "ambient.weather.rain", 0.2F, 1.0F, false);
+				}
+			}
+		}
+	}
+
+	/**
+	 * Render rain and snow
+	 */
+	protected void renderRainSnow(float par1)
+	{
+		if (Reflector.ForgeWorldProvider_getWeatherRenderer.exists())
+		{
+			WorldProvider var2 = this.mc.theWorld.provider;
+			Object var41 = Reflector.call(var2, Reflector.ForgeWorldProvider_getWeatherRenderer, new Object[0]);
+
+			if (var41 != null)
+			{
+				Reflector.callVoid(var41, Reflector.IRenderHandler_render, new Object[] {Float.valueOf(par1), this.mc.theWorld, this.mc});
+				return;
+			}
+		}
+
+		float var411 = this.mc.theWorld.getRainStrength(par1);
+
+		if (var411 > 0.0F)
+		{
+			this.enableLightmap((double)par1);
+
+			if (this.rainXCoords == null)
+			{
+				this.rainXCoords = new float[1024];
+				this.rainYCoords = new float[1024];
+
+				for (int var421 = 0; var421 < 32; ++var421)
+				{
+					for (int var42 = 0; var42 < 32; ++var42)
+					{
+						float var43 = (float)(var42 - 16);
+						float var44 = (float)(var421 - 16);
+						float var45 = MathHelper.sqrt_float(var43 * var43 + var44 * var44);
+						this.rainXCoords[var421 << 5 | var42] = -var44 / var45;
+						this.rainYCoords[var421 << 5 | var42] = var43 / var45;
+					}
+				}
+			}
+
+			if (Config.isRainOff())
+			{
+				return;
+			}
+
+			EntityLivingBase var431 = this.mc.renderViewEntity;
+			WorldClient var441 = this.mc.theWorld;
+			int var451 = MathHelper.floor_double(var431.posX);
+			int var461 = MathHelper.floor_double(var431.posY);
+			int var471 = MathHelper.floor_double(var431.posZ);
+			Tessellator var8 = Tessellator.instance;
+			GL11.glDisable(GL11.GL_CULL_FACE);
+			GL11.glNormal3f(0.0F, 1.0F, 0.0F);
+			GL11.glEnable(GL11.GL_BLEND);
+			OpenGlHelper.glBlendFunc(770, 771, 1, 0);
+			GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);
+			double var9 = var431.lastTickPosX + (var431.posX - var431.lastTickPosX) * (double)par1;
+			double var11 = var431.lastTickPosY + (var431.posY - var431.lastTickPosY) * (double)par1;
+			double var13 = var431.lastTickPosZ + (var431.posZ - var431.lastTickPosZ) * (double)par1;
+			int var15 = MathHelper.floor_double(var11);
+			byte var16 = 5;
+
+			if (Config.isRainFancy())
+			{
+				var16 = 10;
+			}
+
+			boolean var17 = false;
+			byte var18 = -1;
+			float var19 = (float)this.rendererUpdateCount + par1;
+
+			if (Config.isRainFancy())
+			{
+				var16 = 10;
+			}
+
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+			var17 = false;
+
+			for (int var20 = var471 - var16; var20 <= var471 + var16; ++var20)
+			{
+				for (int var21 = var451 - var16; var21 <= var451 + var16; ++var21)
+				{
+					int var22 = (var20 - var471 + 16) * 32 + var21 - var451 + 16;
+					float var23 = this.rainXCoords[var22] * 0.5F;
+					float var24 = this.rainYCoords[var22] * 0.5F;
+					BiomeGenBase var25 = var441.getBiomeGenForCoords(var21, var20);
+
+					if (var25.canSpawnLightningBolt() || var25.getEnableSnow())
+					{
+						int var26 = var441.getPrecipitationHeight(var21, var20);
+						int var27 = var461 - var16;
+						int var28 = var461 + var16;
+
+						if (var27 < var26)
+						{
+							var27 = var26;
+						}
+
+						if (var28 < var26)
+						{
+							var28 = var26;
+						}
+
+						float var29 = 1.0F;
+						int var30 = var26;
+
+						if (var26 < var15)
+						{
+							var30 = var15;
+						}
+
+						if (var27 != var28)
+						{
+							this.random.setSeed((long)(var21 * var21 * 3121 + var21 * 45238971 ^ var20 * var20 * 418711 + var20 * 13761));
+							float var31 = var25.getFloatTemperature(var21, var27, var20);
+							float var32;
+							double var35;
+
+							if (var441.getWorldChunkManager().getTemperatureAtHeight(var31, var26) >= 0.15F)
+							{
+								if (var18 != 0)
+								{
+									if (var18 >= 0)
+									{
+										var8.draw();
+									}
+
+									var18 = 0;
+									this.mc.getTextureManager().bindTexture(locationRainPng);
+									var8.startDrawingQuads();
+								}
+
+								var32 = ((float)(this.rendererUpdateCount + var21 * var21 * 3121 + var21 * 45238971 + var20 * var20 * 418711 + var20 * 13761 & 31) + par1) / 32.0F * (3.0F + this.random.nextFloat());
+								double var46 = (double)((float)var21 + 0.5F) - var431.posX;
+								var35 = (double)((float)var20 + 0.5F) - var431.posZ;
+								float var47 = MathHelper.sqrt_double(var46 * var46 + var35 * var35) / (float)var16;
+								float var38 = 1.0F;
+								var8.setBrightness(var441.getLightBrightnessForSkyBlocks(var21, var30, var20, 0));
+								var8.setColorRGBA_F(var38, var38, var38, ((1.0F - var47 * var47) * 0.5F + 0.5F) * var411);
+								var8.setTranslation(-var9 * 1.0D, -var11 * 1.0D, -var13 * 1.0D);
+								var8.addVertexWithUV((double)((float)var21 - var23) + 0.5D, (double)var27, (double)((float)var20 - var24) + 0.5D, (double)(0.0F * var29), (double)((float)var27 * var29 / 4.0F + var32 * var29));
+								var8.addVertexWithUV((double)((float)var21 + var23) + 0.5D, (double)var27, (double)((float)var20 + var24) + 0.5D, (double)(1.0F * var29), (double)((float)var27 * var29 / 4.0F + var32 * var29));
+								var8.addVertexWithUV((double)((float)var21 + var23) + 0.5D, (double)var28, (double)((float)var20 + var24) + 0.5D, (double)(1.0F * var29), (double)((float)var28 * var29 / 4.0F + var32 * var29));
+								var8.addVertexWithUV((double)((float)var21 - var23) + 0.5D, (double)var28, (double)((float)var20 - var24) + 0.5D, (double)(0.0F * var29), (double)((float)var28 * var29 / 4.0F + var32 * var29));
+								var8.setTranslation(0.0D, 0.0D, 0.0D);
+							}
+							else
+							{
+								if (var18 != 1)
+								{
+									if (var18 >= 0)
+									{
+										var8.draw();
+									}
+
+									var18 = 1;
+									this.mc.getTextureManager().bindTexture(locationSnowPng);
+									var8.startDrawingQuads();
+								}
+
+								var32 = ((float)(this.rendererUpdateCount & 511) + par1) / 512.0F;
+								float var48 = this.random.nextFloat() + var19 * 0.01F * (float)this.random.nextGaussian();
+								float var34 = this.random.nextFloat() + var19 * (float)this.random.nextGaussian() * 0.001F;
+								var35 = (double)((float)var21 + 0.5F) - var431.posX;
+								double var49 = (double)((float)var20 + 0.5F) - var431.posZ;
+								float var39 = MathHelper.sqrt_double(var35 * var35 + var49 * var49) / (float)var16;
+								float var40 = 1.0F;
+								var8.setBrightness((var441.getLightBrightnessForSkyBlocks(var21, var30, var20, 0) * 3 + 15728880) / 4);
+								var8.setColorRGBA_F(var40, var40, var40, ((1.0F - var39 * var39) * 0.3F + 0.5F) * var411);
+								var8.setTranslation(-var9 * 1.0D, -var11 * 1.0D, -var13 * 1.0D);
+								var8.addVertexWithUV((double)((float)var21 - var23) + 0.5D, (double)var27, (double)((float)var20 - var24) + 0.5D, (double)(0.0F * var29 + var48), (double)((float)var27 * var29 / 4.0F + var32 * var29 + var34));
+								var8.addVertexWithUV((double)((float)var21 + var23) + 0.5D, (double)var27, (double)((float)var20 + var24) + 0.5D, (double)(1.0F * var29 + var48), (double)((float)var27 * var29 / 4.0F + var32 * var29 + var34));
+								var8.addVertexWithUV((double)((float)var21 + var23) + 0.5D, (double)var28, (double)((float)var20 + var24) + 0.5D, (double)(1.0F * var29 + var48), (double)((float)var28 * var29 / 4.0F + var32 * var29 + var34));
+								var8.addVertexWithUV((double)((float)var21 - var23) + 0.5D, (double)var28, (double)((float)var20 - var24) + 0.5D, (double)(0.0F * var29 + var48), (double)((float)var28 * var29 / 4.0F + var32 * var29 + var34));
+								var8.setTranslation(0.0D, 0.0D, 0.0D);
+							}
+						}
+					}
+				}
+			}
+
+			if (var18 >= 0)
+			{
+				var8.draw();
+			}
+
+			GL11.glEnable(GL11.GL_CULL_FACE);
+			GL11.glDisable(GL11.GL_BLEND);
+			GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);
+			this.disableLightmap((double)par1);
+		}
+	}
+
+	/**
+	 * Setup orthogonal projection for rendering GUI screen overlays
+	 */
+	public void setupOverlayRendering()
+	{
+		ScaledResolution var1 = new ScaledResolution(this.mc, this.mc.displayWidth, this.mc.displayHeight);
+		GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
+		GL11.glMatrixMode(GL11.GL_PROJECTION);
+		GL11.glLoadIdentity();
+		GL11.glOrtho(0.0D, var1.getScaledWidth_double(), var1.getScaledHeight_double(), 0.0D, 1000.0D, 3000.0D);
+		GL11.glMatrixMode(GL11.GL_MODELVIEW);
+		GL11.glLoadIdentity();
+		GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
+	}
+
+	/**
+	 * calculates fog and calls glClearColor
+	 */
+	private void updateFogColor(float par1)
+	{
+		WorldClient var2 = this.mc.theWorld;
+		EntityLivingBase var3 = this.mc.renderViewEntity;
+		float var4 = 0.25F + 0.75F * (float)this.mc.gameSettings.renderDistanceChunks / 16.0F;
+		var4 = 1.0F - (float)Math.pow((double)var4, 0.25D);
+		Vec3 var5 = var2.getSkyColor(this.mc.renderViewEntity, par1);
+		var5 = CustomColorizer.getWorldSkyColor(var5, var2, this.mc.renderViewEntity, par1);
+		float var6 = (float)var5.xCoord;
+		float var7 = (float)var5.yCoord;
+		float var8 = (float)var5.zCoord;
+		Vec3 var9 = var2.getFogColor(par1);
+		var9 = CustomColorizer.getWorldFogColor(var9, var2, par1);
+		this.fogColorRed = (float)var9.xCoord;
+		this.fogColorGreen = (float)var9.yCoord;
+		this.fogColorBlue = (float)var9.zCoord;
+		float var11;
+
+		if (this.mc.gameSettings.renderDistanceChunks >= 4)
+		{
+			Vec3 var19 = MathHelper.sin(var2.getCelestialAngleRadians(par1)) > 0.0F ? Vec3.createVectorHelper(-1.0D, 0.0D, 0.0D) : Vec3.createVectorHelper(1.0D, 0.0D, 0.0D);
+			
+			Vec3 look = mc.roomScale.getHMDDir_World();
+			
+			var11 = (float)look.dotProduct(var19);
+
+			if (var11 < 0.0F)
+			{
+				var11 = 0.0F;
+			}
+
+			if (var11 > 0.0F)
+			{
+				float[] var20 = var2.provider.calcSunriseSunsetColors(var2.getCelestialAngle(par1), par1);
+
+				if (var20 != null)
+				{
+					var11 *= var20[3];
+					this.fogColorRed = this.fogColorRed * (1.0F - var11) + var20[0] * var11;
+					this.fogColorGreen = this.fogColorGreen * (1.0F - var11) + var20[1] * var11;
+					this.fogColorBlue = this.fogColorBlue * (1.0F - var11) + var20[2] * var11;
+				}
+			}
+		}
+
+		this.fogColorRed += (var6 - this.fogColorRed) * var4;
+		this.fogColorGreen += (var7 - this.fogColorGreen) * var4;
+		this.fogColorBlue += (var8 - this.fogColorBlue) * var4;
+		float var191 = var2.getRainStrength(par1);
+		float var201;
+
+		if (var191 > 0.0F)
+		{
+			var11 = 1.0F - var191 * 0.5F;
+			var201 = 1.0F - var191 * 0.4F;
+			this.fogColorRed *= var11;
+			this.fogColorGreen *= var11;
+			this.fogColorBlue *= var201;
+		}
+
+		var11 = var2.getWeightedThunderStrength(par1);
+
+		if (var11 > 0.0F)
+		{
+			var201 = 1.0F - var11 * 0.5F;
+			this.fogColorRed *= var201;
+			this.fogColorGreen *= var201;
+			this.fogColorBlue *= var201;
+		}
+
+		Block var21 = ActiveRenderInfo.getBlockAtEntityViewpoint(this.mc.theWorld, var3, par1);
+		float var22;
+		Vec3 fogYFactor;
+
+		if (this.cloudFog)
+		{
+			fogYFactor = var2.getCloudColour(par1);
+			this.fogColorRed = (float)fogYFactor.xCoord;
+			this.fogColorGreen = (float)fogYFactor.yCoord;
+			this.fogColorBlue = (float)fogYFactor.zCoord;
+		}
+		else if (var21.getMaterial() == Material.water)
+		{
+			var22 = (float)EnchantmentHelper.getRespiration(var3) * 0.2F;
+			this.fogColorRed = 0.02F + var22;
+			this.fogColorGreen = 0.02F + var22;
+			this.fogColorBlue = 0.2F + var22;
+			fogYFactor = CustomColorizer.getUnderwaterColor(this.mc.theWorld, this.mc.renderViewEntity.posX, this.mc.renderViewEntity.posY + 1.0D, this.mc.renderViewEntity.posZ);
+
+			if (fogYFactor != null)
+			{
+				this.fogColorRed = (float)fogYFactor.xCoord;
+				this.fogColorGreen = (float)fogYFactor.yCoord;
+				this.fogColorBlue = (float)fogYFactor.zCoord;
+			}
+		}
+		else if (var21.getMaterial() == Material.lava)
+		{
+			this.fogColorRed = 0.6F;
+			this.fogColorGreen = 0.1F;
+			this.fogColorBlue = 0.0F;
+		}
+
+		var22 = this.fogColor2 + (this.fogColor1 - this.fogColor2) * par1;
+		this.fogColorRed *= var22;
+		this.fogColorGreen *= var22;
+		this.fogColorBlue *= var22;
+		double fogYFactor1 = var2.provider.getVoidFogYFactor();
+
+		if (!Config.isDepthFog())
+		{
+			fogYFactor1 = 1.0D;
+		}
+
+		double var14 = (var3.lastTickPosY + (var3.posY - var3.lastTickPosY) * (double)par1) * fogYFactor1;
+
+		if (var3.isPotionActive(Potion.blindness))
+		{
+			int var23 = var3.getActivePotionEffect(Potion.blindness).getDuration();
+
+			if (var23 < 20)
+			{
+				var14 *= (double)(1.0F - (float)var23 / 20.0F);
+			}
+			else
+			{
+				var14 = 0.0D;
+			}
+		}
+
+		if (var14 < 1.0D)
+		{
+			if (var14 < 0.0D)
+			{
+				var14 = 0.0D;
+			}
+
+			var14 *= var14;
+			this.fogColorRed = (float)((double)this.fogColorRed * var14);
+			this.fogColorGreen = (float)((double)this.fogColorGreen * var14);
+			this.fogColorBlue = (float)((double)this.fogColorBlue * var14);
+		}
+
+		float var231;
+
+		if (this.bossColorModifier > 0.0F)
+		{
+			var231 = this.bossColorModifierPrev + (this.bossColorModifier - this.bossColorModifierPrev) * par1;
+			this.fogColorRed = this.fogColorRed * (1.0F - var231) + this.fogColorRed * 0.7F * var231;
+			this.fogColorGreen = this.fogColorGreen * (1.0F - var231) + this.fogColorGreen * 0.6F * var231;
+			this.fogColorBlue = this.fogColorBlue * (1.0F - var231) + this.fogColorBlue * 0.6F * var231;
+		}
+
+		float var17;
+
+		if (var3.isPotionActive(Potion.nightVision))
+		{
+			var231 = this.getNightVisionBrightness(this.mc.thePlayer, par1);
+			var17 = 1.0F / this.fogColorRed;
+
+			if (var17 > 1.0F / this.fogColorGreen)
+			{
+				var17 = 1.0F / this.fogColorGreen;
+			}
+
+			if (var17 > 1.0F / this.fogColorBlue)
+			{
+				var17 = 1.0F / this.fogColorBlue;
+			}
+
+			this.fogColorRed = this.fogColorRed * (1.0F - var231) + this.fogColorRed * var17 * var231;
+			this.fogColorGreen = this.fogColorGreen * (1.0F - var231) + this.fogColorGreen * var17 * var231;
+			this.fogColorBlue = this.fogColorBlue * (1.0F - var231) + this.fogColorBlue * var17 * var231;
+		}
+
+		if (this.mc.gameSettings.anaglyph)
+		{
+			var231 = (this.fogColorRed * 30.0F + this.fogColorGreen * 59.0F + this.fogColorBlue * 11.0F) / 100.0F;
+			var17 = (this.fogColorRed * 30.0F + this.fogColorGreen * 70.0F) / 100.0F;
+			float event = (this.fogColorRed * 30.0F + this.fogColorBlue * 70.0F) / 100.0F;
+			this.fogColorRed = var231;
+			this.fogColorGreen = var17;
+			this.fogColorBlue = event;
+		}
+
+		if (Reflector.EntityViewRenderEvent_FogColors_Constructor.exists())
+		{
+			Object event1 = Reflector.newInstance(Reflector.EntityViewRenderEvent_FogColors_Constructor, new Object[] {this, var3, var21, Float.valueOf(par1), Float.valueOf(this.fogColorRed), Float.valueOf(this.fogColorGreen), Float.valueOf(this.fogColorBlue)});
+			Reflector.postForgeBusEvent(event1);
+			this.fogColorRed = Reflector.getFieldValueFloat(event1, Reflector.EntityViewRenderEvent_FogColors_red, this.fogColorRed);
+			this.fogColorGreen = Reflector.getFieldValueFloat(event1, Reflector.EntityViewRenderEvent_FogColors_green, this.fogColorGreen);
+			this.fogColorBlue = Reflector.getFieldValueFloat(event1, Reflector.EntityViewRenderEvent_FogColors_blue, this.fogColorBlue);
+		}
+		/** MINECRIFT SHADERS MOD **/
+		if (Reflector.shadersModExists()) {
+			//Shaders.setClearColor(this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 0.0F);
+			Reflector.callVoid(Reflector.ShadersMod_Shaders_setClearColor, new Object[] {this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 0.0F});
+		}
+		else {
+			GL11.glClearColor(this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 0.0F);
+		}
+		/** END MINECRIFT SHADERS MOD **/
+	}
+
+	/**
+	 * Sets up the fog to be rendered. If the arg passed in is -1 the fog starts at 0 and goes to 80% of far plane
+	 * distance and is used for sky rendering.
+	 */
+	private void setupFog(int par1, float par2)
+	{
+		EntityLivingBase var3 = this.mc.renderViewEntity;
+		boolean var4 = false;
+		this.fogStandard = false;
+
+		if (var3 instanceof EntityPlayer)
+		{
+			var4 = ((EntityPlayer)var3).capabilities.isCreativeMode;
+		}
+		/** MINECRIFT SHADERS MOD **/
+		boolean shadersMod = Reflector.shadersModExists();
+		if (par1 == 999)
+		{
+			GL11.glFog(GL11.GL_FOG_COLOR, this.setFogColorBuffer(0.0F, 0.0F, 0.0F, 1.0F));
+			if (shadersMod) {
+				//Shaders.sglFogi(GL11.GL_FOG_MODE, GL11.GL_LINEAR);
+				Reflector.callVoid(Reflector.ShadersMod_Shaders_sglFogi, new Object[] {GL11.GL_FOG_MODE, GL11.GL_LINEAR});
+			}
+			else {
+				GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_LINEAR);
+			}
+
+			GL11.glFogf(GL11.GL_FOG_START, 0.0F);
+			GL11.glFogf(GL11.GL_FOG_END, 8.0F);
+
+			if (GLContext.getCapabilities().GL_NV_fog_distance)
+			{
+				if (shadersMod) {
+					//Shaders.sglFogi(34138, 34139);
+					Reflector.callVoid(Reflector.ShadersMod_Shaders_sglFogi, new Object[] {34138, 34139});
+				}
+				else {
+					GL11.glFogi(34138, 34139);
+				}
+			}
+
+			GL11.glFogf(GL11.GL_FOG_START, 0.0F);
+		}
+		else
+		{
+			GL11.glFog(GL11.GL_FOG_COLOR, this.setFogColorBuffer(this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 1.0F));
+			GL11.glNormal3f(0.0F, -1.0F, 0.0F);
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+
+			//jrbudda override for cam pos           
+			//Block var5 = ActiveRenderInfo.getBlockAtEntityViewpoint(this.mc.theWorld, var3, par2);
+			Block var5 = getEyeCollisionBlock(this.mc.currentEye);
+
+			if(var5==null) {
+				Vec3 L = this.getEyeBlock(this.mc.currentEye);
+				var5 = var3.worldObj.getBlock((int) L.xCoord, (int) L.yCoord, (int) L.zCoord);
+				if (var5.getMaterial() == Material.water) { var5 = Blocks.air;} //if we were in water it wouldnt be null to begin with.
+			}
+			//end jrbudda
+
+			Object event = Reflector.newInstance(Reflector.EntityViewRenderEvent_FogDensity_Constructor, new Object[] {this, var3, var5, Float.valueOf(par2), Float.valueOf(0.1F)});
+
+			if (Reflector.postForgeBusEvent(event))
+			{
+				float var10 = Reflector.getFieldValueFloat(event, Reflector.EntityViewRenderEvent_FogDensity_density, 0.0F);
+				GL11.glFogf(GL11.GL_FOG_DENSITY, var10);
+			}
+			else
+			{
+				float var6;
+
+				if (var3.isPotionActive(Potion.blindness))
+				{
+					var6 = 5.0F;
+					int var101 = var3.getActivePotionEffect(Potion.blindness).getDuration();
+
+					if (var101 < 20)
+					{
+						var6 = 5.0F + (this.farPlaneDistance - 5.0F) * (1.0F - (float)var101 / 20.0F);
+					}
+					if (shadersMod) {
+						//Shaders.sglFogi(GL11.GL_FOG_MODE, GL11.GL_LINEAR);
+						Reflector.callVoid(Reflector.ShadersMod_Shaders_sglFogi, new Object[] {GL11.GL_FOG_MODE, GL11.GL_LINEAR});
+					}
+					else {
+						GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_LINEAR);
+					}
+
+					if (par1 < 0)
+					{
+						GL11.glFogf(GL11.GL_FOG_START, 0.0F);
+						GL11.glFogf(GL11.GL_FOG_END, var6 * 0.8F);
+					}
+					else
+					{
+						GL11.glFogf(GL11.GL_FOG_START, var6 * 0.25F);
+						GL11.glFogf(GL11.GL_FOG_END, var6);
+					}
+
+					if (Config.isFogFancy())
+					{
+						if (shadersMod) {
+							//Shaders.sglFogi(34138, 34139);
+							Reflector.callVoid(Reflector.ShadersMod_Shaders_sglFogi, new Object[] {34138, 34139});
+						}
+						else {
+							GL11.glFogi(34138, 34139);
+						}
+					}
+				}
+				else if (this.cloudFog)
+				{
+					if (shadersMod) {
+						//Shaders.sglFogi(GL11.GL_FOG_MODE, GL11.GL_EXP);
+						Reflector.callVoid(Reflector.ShadersMod_Shaders_sglFogi, new Object[]{GL11.GL_FOG_MODE, GL11.GL_EXP});
+					}
+					else {
+						GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_EXP);
+					}
+					GL11.glFogf(GL11.GL_FOG_DENSITY, 0.1F);
+				}
+				else if (var5.getMaterial() == Material.water)
+				{
+					if (shadersMod) {
+						//Shaders.sglFogi(GL11.GL_FOG_MODE, GL11.GL_EXP);
+						Reflector.callVoid(Reflector.ShadersMod_Shaders_sglFogi, new Object[] {GL11.GL_FOG_MODE, GL11.GL_EXP});
+					}
+					else {
+						GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_EXP);
+					}
+
+					if (var3.isPotionActive(Potion.waterBreathing))
+					{
+						GL11.glFogf(GL11.GL_FOG_DENSITY, 0.05F);
+					}
+					else
+					{
+						GL11.glFogf(GL11.GL_FOG_DENSITY, 0.1F - (float) EnchantmentHelper.getRespiration(var3) * 0.03F);
+					}
+
+					if (Config.isClearWater())
+					{
+						GL11.glFogf(GL11.GL_FOG_DENSITY, 0.02F);
+					}
+				}
+				else if (var5.getMaterial() == Material.lava)
+				{
+					if (shadersMod) {
+						//Shaders.sglFogi(GL11.GL_FOG_MODE, GL11.GL_EXP);
+						Reflector.callVoid(Reflector.ShadersMod_Shaders_sglFogi, new Object[] {GL11.GL_FOG_MODE, GL11.GL_EXP});
+					}
+					else {
+						GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_EXP);
+					}
+					GL11.glFogf(GL11.GL_FOG_DENSITY, 2.0F);
+				}
+				else
+				{
+					var6 = this.farPlaneDistance;
+					this.fogStandard = true;
+
+					if (Config.isDepthFog() && this.mc.theWorld.provider.getWorldHasVoidParticles() && !var4)
+					{
+						double var102 = (double)((var3.getBrightnessForRender(par2) & 15728640) >> 20) / 16.0D + (var3.lastTickPosY + (var3.posY - var3.lastTickPosY) * (double)par2 + 4.0D) / 32.0D;
+
+						if (var102 < 1.0D)
+						{
+							if (var102 < 0.0D)
+							{
+								var102 = 0.0D;
+							}
+
+							var102 *= var102;
+							float var9 = 100.0F * (float)var102;
+
+							if (var9 < 5.0F)
+							{
+								var9 = 5.0F;
+							}
+
+							if (var6 > var9)
+							{
+								var6 = var9;
+							}
+						}
+					}
+					if (shadersMod) {
+						//Shaders.sglFogi(GL11.GL_FOG_MODE, GL11.GL_LINEAR);
+						Reflector.callVoid(Reflector.ShadersMod_Shaders_sglFogi, new Object[] {GL11.GL_FOG_MODE, GL11.GL_LINEAR});
+					}
+					else {
+						GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_LINEAR);
+					}
+
+					if (par1 < 0)
+					{
+						GL11.glFogf(GL11.GL_FOG_START, 0.0F);
+						GL11.glFogf(GL11.GL_FOG_END, var6);
+					}
+					else
+					{
+						GL11.glFogf(GL11.GL_FOG_START, var6 * Config.getFogStart());
+						GL11.glFogf(GL11.GL_FOG_END, var6);
+					}
+
+					if (GLContext.getCapabilities().GL_NV_fog_distance)
+					{
+						if (Config.isFogFancy())
+						{
+							if (shadersMod) {
+								//Shaders.sglFogi(34138, 34139);
+								Reflector.callVoid(Reflector.ShadersMod_Shaders_sglFogi, new Object[] {34138, 34139});
+							}
+							else {
+								GL11.glFogi(34138, 34139);
+							}
+						}
+
+						if (Config.isFogFast())
+						{
+							if (shadersMod) {
+								//Shaders.sglFogi(34138, 34140);
+								Reflector.callVoid(Reflector.ShadersMod_Shaders_sglFogi, new Object[] {34138, 34140});
+							}
+							else {
+								GL11.glFogi(34138, 34140);
+							}
+						}
+					}
+
+					if (this.mc.theWorld.provider.doesXZShowFog((int)var3.posX, (int)var3.posZ))
+					{
+						var6 = this.farPlaneDistance;
+						GL11.glFogf(GL11.GL_FOG_START, var6 * 0.05F);
+						GL11.glFogf(GL11.GL_FOG_END, var6);
+					}
+
+					Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.EntityViewRenderEvent_RenderFogEvent_Constructor, new Object[] {this, var3, var5, Float.valueOf(par2), Integer.valueOf(par1), Float.valueOf(var6)}));
+				}
+			}
+
+			GL11.glEnable(GL11.GL_COLOR_MATERIAL);
+			GL11.glColorMaterial(GL11.GL_FRONT, GL11.GL_AMBIENT);
+		}
+		/** END MINECRIFT SHADERS MOD **/
+	}
+
+	/**
+	 * Update and return fogColorBuffer with the RGBA values passed as arguments
+	 */
+	private FloatBuffer setFogColorBuffer(float par1, float par2, float par3, float par4)
+	{
+		/** MINECRIFT SHADERS MOD **/
+		if (Reflector.shadersModExists()) {
+			//Shaders.setFogColor(par1, par2, par3);
+			Reflector.callVoid(Reflector.ShadersMod_Shaders_setFogColor, new Object[]{par1, par2, par3});
+		}
+		/** END MINECRIFT SHADERS MOD **/
+		this.fogColorBuffer.clear();
+		this.fogColorBuffer.put(par1).put(par2).put(par3).put(par4);
+		this.fogColorBuffer.flip();
+		return this.fogColorBuffer;
+	}
+
+	public MapItemRenderer getMapItemRenderer()
+	{
+		return this.theMapItemRenderer;
+	}
+
+	private void waitForServerThread()
+	{
+		this.serverWaitTimeCurrent = 0;
+
+		if (!Config.isSmoothWorld())
+		{
+			this.lastServerTime = 0L;
+			this.lastServerTicks = 0;
+		}
+		else if (this.mc.getIntegratedServer() != null)
+		{
+			IntegratedServer srv = this.mc.getIntegratedServer();
+			boolean paused = this.mc.isGamePaused();
+
+			if (!paused && !(this.mc.currentScreen instanceof GuiDownloadTerrain))
+			{
+				if (this.serverWaitTime > 0)
+				{
+					Config.sleep((long)this.serverWaitTime);
+					this.serverWaitTimeCurrent = this.serverWaitTime;
+				}
+
+				long timeNow = System.nanoTime() / 1000000L;
+
+				if (this.lastServerTime != 0L && this.lastServerTicks != 0)
+				{
+					long timeDiff = timeNow - this.lastServerTime;
+
+					if (timeDiff < 0L)
+					{
+						this.lastServerTime = timeNow;
+						timeDiff = 0L;
+					}
+
+					if (timeDiff >= 50L)
+					{
+						this.lastServerTime = timeNow;
+						int ticks = srv.getTickCounter();
+						int tickDiff = ticks - this.lastServerTicks;
+
+						if (tickDiff < 0)
+						{
+							this.lastServerTicks = ticks;
+							tickDiff = 0;
+						}
+
+						if (tickDiff < 1 && this.serverWaitTime < 100)
+						{
+							this.serverWaitTime += 2;
+						}
+
+						if (tickDiff > 1 && this.serverWaitTime > 0)
+						{
+							--this.serverWaitTime;
+						}
+
+						this.lastServerTicks = ticks;
+					}
+				}
+				else
+				{
+					this.lastServerTime = timeNow;
+					this.lastServerTicks = srv.getTickCounter();
+					this.avgServerTickDiff = 1.0F;
+					this.avgServerTimeDiff = 50.0F;
+				}
+			}
+			else
+			{
+				if (this.mc.currentScreen instanceof GuiDownloadTerrain)
+				{
+					Config.sleep(20L);
+				}
+
+				this.lastServerTime = 0L;
+				this.lastServerTicks = 0;
+			}
+		}
+	}
+
+	private void showLagometer(long tickTimeNano, long chunkTimeNano)
+	{
+		if (this.mc.gameSettings.ofLagometer || this.showExtendedDebugInfo)
+		{
+			if (this.prevFrameTimeNano == -1L)
+			{
+				this.prevFrameTimeNano = System.nanoTime();
+			}
+
+			long timeNowNano = System.nanoTime();
+			int currFrameIndex = this.numRecordedFrameTimes & this.frameTimes.length - 1;
+			this.tickTimes[currFrameIndex] = tickTimeNano;
+			this.chunkTimes[currFrameIndex] = chunkTimeNano;
+			this.serverTimes[currFrameIndex] = (long)this.serverWaitTimeCurrent;
+			this.frameTimes[currFrameIndex] = timeNowNano - this.prevFrameTimeNano;
+			++this.numRecordedFrameTimes;
+			this.prevFrameTimeNano = timeNowNano;
+			GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
+			GL11.glMatrixMode(GL11.GL_PROJECTION);
+			GL11.glPushMatrix();
+			GL11.glEnable(GL11.GL_COLOR_MATERIAL);
+			GL11.glLoadIdentity();
+			GL11.glOrtho(0.0D, (double)this.mc.displayWidth, (double)this.mc.displayHeight, 0.0D, 1000.0D, 3000.0D);
+			GL11.glMatrixMode(GL11.GL_MODELVIEW);
+			GL11.glPushMatrix();
+			GL11.glLoadIdentity();
+			GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
+			GL11.glLineWidth(1.0F);
+			GL11.glDisable(GL11.GL_TEXTURE_2D);
+			Tessellator tessellator = Tessellator.instance;
+			tessellator.startDrawing(1);
+
+			for (int frameNum = 0; frameNum < this.frameTimes.length; ++frameNum)
+			{
+				int lum = (frameNum - this.numRecordedFrameTimes & this.frameTimes.length - 1) * 255 / this.frameTimes.length;
+				long heightFrame = this.frameTimes[frameNum] / 200000L;
+				float baseHeight = (float)this.mc.displayHeight;
+				tessellator.setColorOpaque_I(-16777216 + lum * 256);
+				tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight - (float)heightFrame + 0.5F), 0.0D);
+				tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + 0.5F), 0.0D);
+				baseHeight -= (float)heightFrame;
+				long heightTick = this.tickTimes[frameNum] / 200000L;
+				tessellator.setColorOpaque_I(-16777216 + lum * 65536 + lum * 256 + lum * 1);
+				tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + 0.5F), 0.0D);
+				tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + (float)heightTick + 0.5F), 0.0D);
+				baseHeight += (float)heightTick;
+				long heightChunk = this.chunkTimes[frameNum] / 200000L;
+				tessellator.setColorOpaque_I(-16777216 + lum * 65536);
+				tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + 0.5F), 0.0D);
+				tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + (float)heightChunk + 0.5F), 0.0D);
+				baseHeight += (float)heightChunk;
+				long srvTime = this.serverTimes[frameNum];
+
+				if (srvTime > 0L)
+				{
+					long heightSrv = srvTime * 1000000L / 200000L;
+					tessellator.setColorOpaque_I(-16777216 + lum * 1);
+					tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + 0.5F), 0.0D);
+					tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + (float)heightSrv + 0.5F), 0.0D);
+				}
+			}
+
+			tessellator.draw();
+			GL11.glMatrixMode(GL11.GL_PROJECTION);
+			GL11.glPopMatrix();
+			GL11.glMatrixMode(GL11.GL_MODELVIEW);
+			GL11.glPopMatrix();
+			GL11.glEnable(GL11.GL_TEXTURE_2D);
+		}
+	}
+
+	private void frameFinish()
+	{
+		/** MINECRIFT **/
+		/*
+        if (this.mc.theWorld != null)
         {
-            GL11.glMatrixMode(GL11.GL_PROJECTION);
-            GL11.glLoadIdentity();
-            float var3 = 0.07F;
+            long now = System.currentTimeMillis();
 
-            if (this.mc.gameSettings.anaglyph)
+            if (now > this.lastErrorCheckTimeMs + 10000L)
             {
-                GL11.glTranslatef((float)(-(par2 * 2 - 1)) * var3, 0.0F, 0.0F);
-            }
+                this.lastErrorCheckTimeMs = now;
+                int err = GL11.glGetError();
 
-            if (this.cameraZoom != 1.0D)
-            {
-                GL11.glTranslatef((float)this.cameraYaw, (float)(-this.cameraPitch), 0.0F);
-                GL11.glScaled(this.cameraZoom, this.cameraZoom, 1.0D);
+                if (err != 0)
+                {
+                    String text = GLU.gluErrorString(err);
+                    ChatComponentText msg = new ChatComponentText("\u00a7eOpenGL Error\u00a7f: " + err + " (" + text + ")");
+                    this.mc.ingameGUI.getChatGUI().printChatMessage(msg);
+                }
             }
+        }
+		 */
+		/** END MINECRIFT **/
+	}
+
+	private void updateMainMenu(GuiMainMenu mainGui)
+	{
+		try
+		{
+			String e = null;
+			Calendar calendar = Calendar.getInstance();
+			calendar.setTime(new Date());
+			int day = calendar.get(5);
+			int month = calendar.get(2) + 1;
+
+			if (day == 8 && month == 4)
+			{
+				e = "Happy birthday, OptiFine!";
+			}
+
+			if (day == 14 && month == 8)
+			{
+				e = "Happy birthday, sp614x!";
+			}
+
+			if (e == null)
+			{
+				return;
+			}
+
+			Field[] fs = GuiMainMenu.class.getDeclaredFields();
+
+			for (int i = 0; i < fs.length; ++i)
+			{
+				if (fs[i].getType() == String.class)
+				{
+					fs[i].setAccessible(true);
+					fs[i].set(mainGui, e);
+					break;
+				}
+			}
+		}
+		catch (Throwable var8)
+		{
+			;
+		}
+	}
+
+	/** MINECRIFT ADDITIONS BELOW **/
+
+	public void updatePositionAndOrientation( float renderPartialTicks, boolean displayActive )
+	{
+		//int millis = (int)(System.currentTimeMillis() - start);
+		//System.out.println("Update camera! " + millis + "ms");
+
+		EulerOrient o = mc.vrPlayer.getHMDEuler_World();
+
+		cameraYaw    = o.yaw;
+		cameraPitch  = o.pitch;
+		cameraRoll   = o.roll;
+
+		if (this.mc.vrSettings.debugPose)
+		{
+			System.out.println(String.format("headYaw:   %.2f, headPitch:   %.2f, headRoll:   %.2f", new Object[] {Float.valueOf(headYaw), Float.valueOf(headPitch), Float.valueOf(headRoll)}));
+			System.out.println(String.format("cameraYaw: %.2f, cameraPitch: %.2f, cameraRoll: %.2f", new Object[] {Float.valueOf((float)cameraYaw), Float.valueOf((float)cameraPitch), Float.valueOf((float)cameraRoll)}));
+		}
+
+
+		float PIOVER180 = (float)(Math.PI/180);
+		EntityLivingBase entity = this.mc.renderViewEntity;
+
+
+		if( entity != null )
+		{		//now we decide what direction vector to set our 'entity' at.
+			//This is used for all sorts of things both client and server side.
+
+			if(false){  //hmm, to use HMD?
+				//set model view direction to camera
+				entity.rotationYaw = (float)cameraYaw;
+				entity.rotationYawHead = (float)cameraYaw;
+				entity.rotationPitch = (float)cameraPitch;
+			} else { //default to looking 'at' the crosshair position.
+				if(centerEyePosToCrossDirection != null){
+					float pitch = - (float)Math.toDegrees(Math.asin(centerEyePosToCrossDirection.yCoord/centerEyePosToCrossDirection.lengthVector()));
+					float yaw = - (float)Math.toDegrees(Math.atan2(centerEyePosToCrossDirection.xCoord, centerEyePosToCrossDirection.zCoord));    
+					entity.rotationYaw = yaw;
+					entity.rotationYawHead = yaw;
+					entity.rotationPitch = pitch;
+				}
+			}
+
+			if(entity instanceof EntityPlayerSP){ //isnt it always?
+
+				if(entity.moveForward > 0 && (mc.vrPlayer.getFreeMoveMode() || entity.isRiding())){
+					//us laim, needed for server side movement.
+					entity.rotationYaw = entity.rotationYawHead = -mc.roomScale.getControllerOffhandYaw_World();
+					entity.rotationPitch = -mc.roomScale.getControllerOffhandPitch_World();
+				} else {
+					ItemStack i = ((EntityPlayerSP) entity).inventory.getCurrentItem();
+					if(i !=null){
+						if(i.getItem() instanceof ItemBow){
+							//use bow aim
+							Vec3 aim = mc.bowTracker.getAimVector();
+
+							float pitch = -(float)Math.toDegrees(Math.asin(aim.yCoord/aim.lengthVector()));
+							float yaw = -(float)Math.toDegrees(Math.atan2(aim.xCoord, aim.zCoord));   		
+
+							entity.rotationYaw =  (float)yaw;
+							entity.rotationYawHead =  (float)yaw;
+							entity.rotationPitch = (float)pitch;
+
+						}	 else if(i.getItem() == Items.snowball ||
+								i.getItem() == Items.egg  ||
+								i.getItem() == Items.spawn_egg  ||
+								i.getItem() == Items.potionitem  
+								) {
+							//use r_hand aim
+							entity.rotationYaw = entity.rotationYawHead = -mc.roomScale.getControllerMainYaw_World();
+							entity.rotationPitch = -mc.roomScale.getControllerMainPitch_World();
+						}
+					}
+				}
+			}
+		}
+
+	
+	}
+
+	private float checkCameraCollision(
+			double camX,       double camY,       double camZ,
+			double camXOffset, double camYOffset, double camZOffset, float distance )
+	{
+		//This loop offsets at [-.1, -.1, -.1], [.1,-.1,-.1], [.1,.1,-.1] etc... for all 8 directions
+		double minDistance = -1d;
+
+		// Lets extend out the test range somewhat
+		camXOffset *= 10f;
+		camYOffset *= 10f;
+		camZOffset *= 10f;
+
+		for (int var20 = 0; var20 < 8; ++var20)
+		{
+			final float MIN_DISTANCE = 0.06F;
+			float var21 = (float)((var20 & 1) * 2 - 1);
+			float var22 = (float)((var20 >> 1 & 1) * 2 - 1);
+			float var23 = (float)((var20 >> 2 & 1) * 2 - 1);
+			var21 *= 0.1F;
+			var22 *= 0.1F;
+			var23 *= 0.1F;
+			MovingObjectPosition var24 = this.mc.theWorld.rayTraceBlocks(
+					Vec3.createVectorHelper(camX + var21, camY + var22, camZ + var23),
+					Vec3.createVectorHelper(camX - camXOffset + var21, camY - camYOffset + var22, camZ - camZOffset + var23));
+
+			if (var24 != null && this.mc.theWorld.isBlockNormalCubeDefault(var24.blockX, var24.blockY, var24.blockZ, true))
+			{
+				double var25 = var24.hitVec.distanceTo(Vec3.createVectorHelper(camX, camY, camZ)) - MIN_DISTANCE;
+
+				if (minDistance == -1d)
+				{
+					minDistance = var25;
+				}
+				else if (var25 < minDistance)
+				{
+					minDistance = var25;
+				}
+			}
+		}
+		if (minDistance == -1d)
+			minDistance = distance *= 10d;
+
+		return (float)minDistance;
+	}
+
+	public void drawSizedQuad(float displayWidth, float displayHeight, float size)
+	{
+		float aspect = displayHeight / displayWidth;
+
+		GL11.glBegin(GL11.GL_QUADS);
+
+		GL11.glTexCoord2f(0.0f, 0.0f);
+		GL11.glVertex3f(-(size / 2f), -(size * aspect) / 2f, 0.0f);  // Bottom Left Of The Texture and Quad
+		GL11.glTexCoord2f(1.0f, 0.0f);
+		GL11.glVertex3f(size / 2f, -(size * aspect) / 2f, 0.0f);  // Bottom Right Of The Texture and Quad
+		GL11.glTexCoord2f(1.0f, 1.0f);
+		GL11.glVertex3f(size / 2f, (size * aspect) / 2f, 0.0f);  // Top Right Of The Texture and Quad
+		GL11.glTexCoord2f(0.0f, 1.0f);
+		GL11.glVertex3f(-(size / 2f), (size * aspect) / 2f, 0.0f);  // Top Left  Of The Texture and Quad
+
+		GL11.glEnd();
+	}
+
+	// TODO: Move this into Reflector OR use existing Reflector function!
+	public Field getDeclaredField(Class clazz, String unObfuscatedName, String obfuscatedName, String srgName)
+	{
+		Field field = null;
+		String s = clazz.getName();
+
+		try
+		{
+			field = clazz.getDeclaredField(unObfuscatedName);
+		}
+		catch (NoSuchFieldException e)
+		{
+			try
+			{
+				field = clazz.getDeclaredField(obfuscatedName);
+			}
+			catch (NoSuchFieldException e1)
+			{
+				try
+				{
+					field = clazz.getDeclaredField(srgName);
+				}
+				catch (NoSuchFieldException e2)
+				{
+					e.printStackTrace();
+					e1.printStackTrace();
+					e2.printStackTrace();
+				};
+			};
+		}
+
+		return field;
+	}
+
+	/**
+	 * Sets the listener of sounds
+	 */
+	public void setSoundListenerOrientation()
+	{
+		SoundSystem sndSystem = null;
+
+		// Get the soundManager from mc.mcSoundHandler (sndManager or field_147694_f)
+		// then get SoundSystem from it (sndSystem or field_148620_e)
+		// Obfuscated names (from MCP908/conf/joined.srg):
+		//    SoundHandler.sndManager = SoundHandler.field_147694_f = btp/a
+		//    stem.sndSystem = SoundSySoundSystem.field_148620_e = btj/e
+
+		// Use reflection to get the sndManager
+		if (sndSystemReflect && _soundManagerSndSystemField == null && this.trySoundSystemReflect)
+		{
+			try
+			{
+				// Get SoundManager from the SoundHandler...
+				Field soundManagerField = getDeclaredField(mc.mcSoundHandler.getClass(), "sndManager", "f", "field_147694_f");
+				if (soundManagerField != null)
+				{
+					soundManagerField.setAccessible(true);
+					this.mc.sndManager = (SoundManager) soundManagerField.get(mc.mcSoundHandler);
+				}
+
+				// ...get SoundSystem from SoundManager
+				if (this.mc.sndManager != null)
+				{
+					_soundManagerSndSystemField = getDeclaredField(this.mc.sndManager.getClass(), "sndSystem", "e", "field_148620_e");
+					if (_soundManagerSndSystemField != null)
+					{
+						_soundManagerSndSystemField.setAccessible(true);
+					}
+				}
+			}
+			catch (IllegalAccessException e)
+			{
+				e.printStackTrace();
+			}
+
+			if (_soundManagerSndSystemField == null) {
+				this.trySoundSystemReflect = false;
+				System.out.println("[Minecrift]: FAILED to reflect sndSystem");
+			}
+			else {
+				System.out.println("[Minecrift]: Reflected sndSystem");
+			}
+		}
+
+		if (_soundManagerSndSystemField != null && this.mc.sndManager != null)
+		{
+			try
+			{
+				sndSystem = (SoundSystem)_soundManagerSndSystemField.get(this.mc.sndManager);
+			}
+			catch (IllegalArgumentException e) { }
+			catch (IllegalAccessException e) { };
+		}
+
+		float PIOVER180 = (float)(Math.PI/180);
+
+		// TODO: Set based on head orient (headphones) or body orient (speakers)
+
+		Vec3 up = Vec3.createVectorHelper(0, 1, 0);
+		up.rotateAroundZ(-(float)cameraRoll * PIOVER180);
+		up.rotateAroundX(-(float)cameraPitch* PIOVER180);
+		up.rotateAroundY(-(float)cameraYaw  * PIOVER180);
+		//synchronized (SoundSystemConfig.THREAD_SYNC) {
+		if (/*SoundManger.soundLibrary != null &&*/ sndSystem != null /* && this.mc.gameSettings.getSoundVolume(SoundCategory // Which sound category?) != 0f // this.mc.gameSettings.soundVolume != 0f */)
+		{
+			// The sound system is on a separate thread? Sync issues? Can get to crash by turning analyglph mode on?
+
+			sndSystem.setListenerPosition((float) interpolatedPlayerPos.xCoord, (float) interpolatedPlayerPos.yCoord, (float) interpolatedPlayerPos.zCoord);
+			Vec3 hmd = mc.roomScale.getHMDDir_World();
+			sndSystem.setListenerOrientation((float)hmd.xCoord,(float) hmd.yCoord,(float) hmd.zCoord,
+					(float) up.xCoord, (float) up.yCoord, (float) up.zCoord);
+		}
+		//}
+		if( mc.mumbleLink != null ) {
+			Vec3 forward = Vec3.createVectorHelper(0, 0 , -1);
+			forward.rotateAroundZ(-(float)cameraRoll * PIOVER180);
+			forward.rotateAroundX(-(float)cameraPitch* PIOVER180);
+			forward.rotateAroundY(-(float)cameraYaw  * PIOVER180);
+			mc.mumbleLink.updateMumble(
+					(float)interpolatedPlayerPos.xCoord,  (float)interpolatedPlayerPos.yCoord,  (float)interpolatedPlayerPos.zCoord,
+					(float)forward.xCoord, (float)forward.yCoord, (float)forward.zCoord,
+					(float)up.xCoord,      (float)up.yCoord,      (float)up.zCoord);
+		}
+	}
+
+	public void handleNotificationText()
+	{
+		String prefix = "";
+		String message = "";
+		String suffix = "";
+
+		boolean renderTxt = false;
+
+		// error info takes precedence
+		if (mc.errorHelper != null) {
+			if (System.currentTimeMillis() < mc.errorHelper.endTime)
+			{
+				prefix = mc.errorHelper.title;
+				message = mc.errorHelper.message;
+				suffix = mc.errorHelper.resolution;
+				renderTxt = true;
+			}
+			else
+			{
+				mc.errorHelper = null;
+			}
+		}
+		// otherwise display any calibration info
+		if (renderTxt)
+			displayNotificationText(prefix, message, suffix,
+					this.mc.displayWidth, this.mc.displayHeight, this.mc.stereoProvider.isStereo(), !this.mc.stereoProvider.isStereo());
+	}
+
+	public void displayNotificationText(String prefix, String message, String suffix,
+			int displayWidth, int displayHeight, boolean isStereo, boolean isGuiOrtho)
+	{
+		final float INITIAL_TEXT_SCALE = isGuiOrtho ? 0.0055f : 0.00375f;
+		final int TEXT_WORDWRAP_LEN = 55;
+		final int COLUMN_GAP = 12;
+
+		float fade = isGuiOrtho ? 0.85f : 0.80f;
+		Color3f rgb = new Color3f(0f, 0f, 0f);
+	//	renderFadeBlend(rgb, fade);
+
+		// Pass matrici on to OpenGL...
+		GL11.glMatrixMode(GL11.GL_PROJECTION);
+		GL11.glPushMatrix();
+			GL11.glLoadIdentity();
+			if (isStereo)
+			{
+				GL11.glMultMatrix(eyeproj[mc.currentEye.value()]);
+			}
+			else
+			{
+				Project.gluPerspective(90f, (float) displayWidth / (float) displayHeight, minClipDistance, clipDistance);
+			}
+			GL11.glMatrixMode(GL11.GL_MODELVIEW);
+			GL11.glPushMatrix();
+				GL11.glLoadIdentity();
+		
+				int column = 8;
+				ArrayList<String> wrapped = new ArrayList<String>();
+				if (message != null)
+					Utils.wordWrap(message, TEXT_WORDWRAP_LEN, wrapped);
+				float rows = wrapped.size();
+				float shift = rows / 2f;
+		
+				float x = isGuiOrtho ? 0f : -this.mc.vrSettings.getHalfIPD(this.mc.currentEye);
+				float y = shift * COLUMN_GAP * 0.003f; // Move up
+				float z = -0.6f;
+		
+				GL11.glDisable(GL11.GL_DEPTH_TEST);
+				GL11.glTranslatef(x, y, z);
+				GL11.glRotatef(180f, 0.0F, 1.0F, 0.0F);
+				float textScale = (float) Math.sqrt((x * x + y * y + z * z));
+				GL11.glScalef(-INITIAL_TEXT_SCALE * textScale, -INITIAL_TEXT_SCALE * textScale, -INITIAL_TEXT_SCALE * textScale);
+				if (prefix != null)
+					mc.fontRendererObj.drawStringWithShadow(prefix, -mc.fontRendererObj.getStringWidth(prefix) / 2, -8, /*white*/16777215);
+		
+				for (String line : wrapped)
+				{
+					mc.fontRendererObj.drawStringWithShadow(line, -mc.fontRendererObj.getStringWidth(line) / 2, column, /*white*/16777215);
+					column += COLUMN_GAP;
+				}
+				column += COLUMN_GAP;
+				if (suffix != null)
+					mc.fontRendererObj.drawStringWithShadow(suffix, -mc.fontRendererObj.getStringWidth(suffix) / 2, column, /*white*/16777215);
+		
+				GL11.glEnable(GL11.GL_DEPTH_TEST);
+				GL11.glMatrixMode(GL11.GL_PROJECTION);
+			GL11.glPopMatrix();
+			GL11.glMatrixMode(GL11.GL_MODELVIEW);
+		GL11.glPopMatrix();
+	}
+
+	public void renderFadeEffects()
+	{
+		//        float overallFade = 0f;
+		//        Color3f rgb = new Color3f(0f, 0f, 0f);
+		//
+		//        // Determine pos track based fade
+		//        float posTrackFade = 0f;
+		//        if (this.mc.theWorld != null && this.mc.vrSettings.posTrackBlankOnCollision == true)
+		//        {
+		//            if (this.headCollision)
+		//            {
+		//                posTrackFade = 1f;
+		//                //this.mc.printChatMessage("Collision");
+		//            }
+		//            else if (this.headCollisionDistance != -1f && this.headCollisionDistance < this.headCollisionThresholdDistance)
+		//            {
+		//                posTrackFade = 1f - ((1f / this.headCollisionThresholdDistance) * this.headCollisionDistance);
+		//                //this.mc.printChatMessage("Collision in " + fadeBlend);
+		//            }
+		//            //else
+		//             //this.mc.printChatMessage("No collision");
+		//        }
+		//
+		//        float vrComfortFade = 0f;
+		//        if (this.mc.theWorld != null && this.mc.lookaimController != null && this.mc.vrSettings.useVrComfort != VRSettings.VR_COMFORT_OFF)
+		//        {
+		//            float yawRatchet = (float)this.mc.lookaimController.ratchetingYawTransitionPercent();
+		//            float pitchRatchet = (float)this.mc.lookaimController.ratchetingPitchTransitionPercent();
+		//
+		//            if (this.mc.vrSettings.vrComfortTransitionBlankingMode == VRSettings.VR_COMFORT_TRANS_BLANKING_MODE_BLANK)
+		//            {
+		//                if (yawRatchet > -1f || pitchRatchet > -1f)
+		//                {
+		//                    vrComfortFade = 1f;
+		//                }
+		//            }
+		//            else if(this.mc.vrSettings.vrComfortTransitionBlankingMode == VRSettings.VR_COMFORT_TRANS_BLANKING_MODE_FADE)
+		//            {
+		//                if (yawRatchet > -1f || pitchRatchet > -1f)
+		//                {
+		//                    vrComfortFade = Math.max(yawRatchet, pitchRatchet);
+		//                    if (vrComfortFade < 40f)
+		//                    {
+		//                        vrComfortFade = (vrComfortFade / 40f);
+		//                    }
+		//                    else if (vrComfortFade > 60f)
+		//                    {
+		//                        vrComfortFade = ((100f - vrComfortFade) / 40f);
+		//                    }
+		//                    else
+		//                    {
+		//                        vrComfortFade = 1f;
+		//                    }
+		//                }
+		//            }
+		//        }
+		//
+		//        overallFade = Math.max(posTrackFade, vrComfortFade);
+		//
+		//        if (overallFade > 0f)
+		//            renderFadeBlend(rgb, overallFade);
+	}
+
+	public void renderFadeBlend(Color3f rgb, float fadeAlpha)
+	{
+		renderFadeBlend(rgb, fadeAlpha, 0, this.mc.displayWidth, this.mc.displayHeight, 0);
+	}
+
+	// Thanks to mhagain
+	public void renderFadeBlend (Color3f rgb, float fadeAlpha, int left, int right, int bottom, int top)
+	{
+		GL11.glEnable(GL11.GL_BLEND);
+		GL11.glEnable(GL11.GL_ALPHA_TEST);
+		GL11.glDisable(GL11.GL_CULL_FACE);
+		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+		GL11.glDisable(GL11.GL_DEPTH_TEST);
+		GL11.glDisable(GL11.GL_TEXTURE_2D);
+
+		GL11.glMatrixMode(GL11.GL_PROJECTION);
+		GL11.glPushMatrix();
+		GL11.glLoadIdentity();
+
+		// when laying out a 2D view, sometimes "top-left is the origin" makes more sense.
+		// it is the direction i read in, after all.  live with it, weenies.
+		GL11.glOrtho(0, this.mc.displayWidth, this.mc.displayHeight, 0, -1, 1);
+
+		GL11.glMatrixMode(GL11.GL_MODELVIEW);
+		GL11.glPushMatrix();
+		GL11.glLoadIdentity();
+
+		GL11.glColor4f(rgb.x, rgb.y, rgb.z, fadeAlpha);
+
+		GL11.glBegin(GL11.GL_QUADS);
+
+		GL11.glVertex3f(left, top, 0);
+		GL11.glVertex3f(right, top, 0);
+		GL11.glVertex3f(right, bottom, 0);
+		GL11.glVertex3f(left, bottom, 0);
+
+		GL11.glEnd();
+
+		GL11.glDisable(GL11.GL_BLEND);
+		GL11.glEnable(GL11.GL_DEPTH_TEST);
+		GL11.glEnable(GL11.GL_TEXTURE_2D);
+
+		GL11.glMatrixMode(GL11.GL_PROJECTION);
+		GL11.glPopMatrix();
+
+		GL11.glMatrixMode(GL11.GL_MODELVIEW);
+		GL11.glPopMatrix();
+	}
+
+	public void drawLine(Vec3 start, Vec3 end)
+	{
+		GL11.glEnable(GL11.GL_BLEND);
+		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+		GL11.glColor4f(0.0F, 0.0F, 0.0F, 0.4F);
+		GL11.glLineWidth(6.0F);
+		GL11.glDisable(GL11.GL_TEXTURE_2D);
+		GL11.glDepthMask(false);
+
+		Tessellator var2 = Tessellator.instance;
+		var2.startDrawing(GL11.GL_LINE_STRIP);
+		var2.addVertex(start.xCoord, start.yCoord, start.zCoord);
+		var2.addVertex(end.xCoord, end.yCoord, end.zCoord);
+		var2.draw();
+
+		GL11.glDepthMask(true);
+		GL11.glEnable(GL11.GL_TEXTURE_2D);
+		GL11.glDisable(GL11.GL_BLEND);
+	}
+
+	public void orientModelView(boolean correctOffsets, boolean adjustHeight)   // VIVE added param
+	{
+		// Rotation
+		if (this.mc.gameSettings.thirdPersonView == 2)	GL11.glRotatef((float) -this.headRoll, 0.0F, 0.0F, 1.0F);
+		else GL11.glMultMatrix(mc.roomScale.getHMDMatrix_World());
+			
+		Vec3 campos = getCameraPos_Render();
+	//	Vec3 center = mc.roomScale.getRoomOriginPos_World();
+		// Position
+	
+		float x = (float) (campos.xCoord );
+		float y = (float) (campos.yCoord);
+		float z = (float) (campos.zCoord );
+		GL11.glTranslatef(x,y,z);
+
+		if (correctOffsets)
+		{
+			// Correct for yaw / pitch offsets
+//			GL11.glRotatef(this.lookPitchOffset, 1.0F, 0.0F, 0.0F);
+//			GL11.glRotatef(this.lookYawOffset, 0.0F, 1.0F, 0.0F);
+		}
+	}
+
+	/** Renders the pre-generated 2-d framebuffer into the world at the appropriate location..
+	 * @param par1
+	 */
+	private void renderGuiLayer(float par1)
+	{
+		if (this.guiScreenShowingThisFrame || this.inWorldGuiScreenShowingThisFrame || this.mc.showSplashScreen)
+			{
+				// Pass matrici on to OpenGL...
+				GL11.glMatrixMode(GL11.GL_PROJECTION);
+				GL11.glLoadIdentity();
+		
+				// Minecrift - use correct projection
+				if (this.mc.stereoProvider.isStereo())
+				{
+					GL11.glMultMatrix(eyeproj[mc.currentEye.value()]);
+				}
+				else
+				{
+					Project.gluPerspective(this.mc.renderViewEntity == null ? 90f : this.getFOVModifier(par1, true), (float) this.mc.displayWidth / (float) this.mc.displayHeight, minClipDistance, clipDistance);
+				}
+			
+				GL11.glMatrixMode(GL11.GL_MODELVIEW);
+				GL11.glLoadIdentity();
+			
+				// VIVE START - custom GUI position
+				MCOpenVR.applyGUIModelView(this.mc.currentEye); //MCOpenVR.java, pushes.
+					///JRBUDDA MAIN MENU ROOM            
+					if(mc.theWorld == null || mc.currentScreen instanceof GuiWinGame){		
+						rendserJrbuddasAwesomeMainMenuRoom();			
+					}
+					//END JRBUDDA'S AWESOME MAIN MENU ROOM       
+					this.mc.guiFramebuffer.bindFramebufferTexture();
+					
+					GL11.glDisable(GL11.GL_CULL_FACE);
+					GL11.glEnable(GL11.GL_TEXTURE_2D);
+			
+					// Prevent black border at top / bottom of GUI
+					GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, GL12.GL_CLAMP_TO_EDGE);
+					GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL12.GL_CLAMP_TO_EDGE);
+		
+					// Set texture filtering
+					GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);
+					GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
+					GL11.glTexParameterf(GL11.GL_TEXTURE_2D, EXTTextureFilterAnisotropic.GL_TEXTURE_MAX_ANISOTROPY_EXT, 16.0f);
+		
+					if (this.mc.theWorld != null && !( mc.currentScreen instanceof GuiWinGame))
+					{
+						GL11.glColor4f(1, 1, 1, this.mc.vrSettings.hudOpacity);
+						GL11.glEnable(GL11.GL_ALPHA_TEST);
+					}
+					else{
+						GL11.glColor4f(1, 1, 1, 0.5f);
+						GL11.glDisable(GL11.GL_ALPHA_TEST);
+					}
+		
+					if (this.mc.vrSettings.hudOcclusion == false || this.mc.currentScreen != null){
+						// Never use depth test for in game menu - so you can always see it!
+						GL11.glDisable(GL11.GL_DEPTH_TEST);			
+					}
+		
+					//the framebuffer has to be drawn with color blending transparency to support non-alpha cursors. Always has a black background.	
+					GL11.glDisable(GL11.GL_BLEND);	
+		
+					GL11.glAlphaFunc(GL11.GL_GREATER, 0.01f);
+				//	OpenGlHelper.glBlendFunc(GL11.GL_ONE, GL11.GL_ONE_MINUS_SRC_COLOR, 1, 0); //color blend for corsshair transparency
+				//	OpenGlHelper.glBlendFunc(GL11.GL_ONE, GL11.GL_ZERO,0,1);
+					float scale = MCOpenVR.guiScale; // * this.mc.vroptions.hudscale
+					
+					GL11.glScalef(scale, scale, scale);
+										
+					//Render framebuffer onto world projection
+					drawSizedQuad(this.mc.guiFramebuffer.framebufferWidth, this.mc.guiFramebuffer.framebufferHeight, 1.5f); //this.mc.vrSettings.hudScale);
+					
+			//		OpenGlHelper.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, 1, 0); 
+		
+					GL11.glDisable(GL11.GL_BLEND);
+					GL11.glEnable(GL11.GL_DEPTH_TEST);
+					GL11.glEnable(GL11.GL_CULL_FACE);
+		
+				GL11.glPopMatrix();// undo extra push in applyguithing
+			GL11.glMatrixMode(GL11.GL_PROJECTION);
+		
+		
+			}
+	}
+
+	//awesome.
+	private void rendserJrbuddasAwesomeMainMenuRoom() {
+		GL11.glClearColor(.1f, .1f, .1f, 0.1f);       
+		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);        
+		GL11.glDisable(GL11.GL_BLEND);   
+		GL11.glColor4f(0.5f, 0.5f, 0.5f, 1f);
+		
+		GL11.glEnable(GL11.GL_DEPTH_TEST);	
+		GL11.glEnable(GL11.GL_TEXTURE_2D);
+		GL11.glEnable(GL11.GL_LIGHTING);
+		GL11.glEnable(GL11.GL_LIGHT0);
+		GL11.glEnable(GL11.GL_CULL_FACE);
+
+		Minecraft.getMinecraft().renderEngine.bindTexture(Gui.optionsBackground);
+		
+	//	float yo = -camRelY;
+		float s = 3f;
+		int repeat = 30; 
+		int w = 5;
+		
+		GL11.glPushMatrix();
+		GL11.glScalef(2f, 2f, 2f);
+
+			GL11.glTranslatef(0f, 0, 1.3f);
+	
+				GL11.glLight(GL11.GL_LIGHT0, GL11.GL_POSITION, setFogColorBuffer(0f,0f,-0.2f,1));           
+				GL11.glLight(GL11.GL_LIGHT0, GL11.GL_DIFFUSE, setFogColorBuffer(1,1,1,1));
+				GL11.glLight(GL11.GL_LIGHT0, GL11.GL_AMBIENT, setFogColorBuffer(0.0F, 0.0F, 0.0F, 1.0F));
+				GL11.glLightModel(GL11.GL_LIGHT_MODEL_AMBIENT, setFogColorBuffer(0, 0, 0, 1.0F));
+				GL11.glShadeModel(GL11.GL_SMOOTH);
+	
+				for (int i = 0; i <= 6; i++) {
+					GL11.glPushMatrix();
+						float t = -1.3f;
+	
+						if (i == 1) GL11.glRotatef(90f, 0,1, 0);
+						if (i == 2) GL11.glRotatef(-90f, 0,1, 0);
+						if (i == 3) GL11.glRotatef(180f, 0,1, 0);
+						if (i == 4) GL11.glRotatef(-180f, 0,1, 0);
+						if (i == 5){
+							t= -.6f;
+							GL11.glRotatef(90, 1,0, 0);
+						}
+						if (i == 6) {
+							t= (float) -1.3f/2f;
+							GL11.glRotatef(-90, 1,0, 0);
+						}
+	
+						GL11.glTranslatef(0f, 0, t);			        	
+						GL11.glBegin(GL11.GL_QUADS);	  	
+							GL11.glTexCoord2f(0.0f, 0.0f);
+							GL11.glVertex3f(-(s / 2f), -(s * 1) / 2f, 0.0f);  // Bottom Left Of The Texture and Quad
+							GL11.glTexCoord2f(repeat, 0.0f);
+							GL11.glVertex3f(s / 2f, -(s * 1) / 2f, 0.0f);  // Bottom Right Of The Texture and Quad
+							GL11.glTexCoord2f(repeat, repeat);
+							GL11.glVertex3f(s / 2f, (s * 1) / 2f, 0.0f);  // Top Right Of The Texture and Quad
+							GL11.glTexCoord2f(0.0f, repeat);
+							GL11.glVertex3f(-(s / 2f), (s * 1) / 2f, 0.0f);  // Top Left  Of The Texture and Quad
+						GL11.glEnd();       
+					GL11.glPopMatrix();   	   
+	
+				}         
+	
+				GL11.glTranslatef(0f, 0, -1.3f);
+	
+				
+				GL11.glPopMatrix();   
+		GL11.glPopMatrix();   
+
+		RenderHelper.disableStandardItemLighting();
+	}
+
+	
+	//TODO: move this into Guiingame where it belongs.
+	/** This draws the normal 2d menu/GUI elements to the framebuffer, to be rendered into the world projection later (in renderFramebufferIntoWorld)
+	 * @param renderPartialTicks
+	 * @param tickDuration
+	 */
+	public void drawFramebuffer(float renderPartialTicks, long tickDuration)    // VIVE - added parameter for debug info
+	{
+
+		this.guiScreenShowingThisFrame = false;
+		this.inWorldGuiScreenShowingThisFrame = false;
+
+		int mouseX = 0;
+		int mouseY = 0;
+		final ScaledResolution var15 = new ScaledResolution(this.mc, this.mc.displayWidth, this.mc.displayHeight);
+
+		
+		if (this.mc.showSplashScreen)
+		{
+    		this.mc.showSplash(this.mc.getFramebuffer());
+		}
+		else if (this.mc.isIntegratedServerLaunching())
+		{
+			this.guiScreenShowingThisFrame = true;
+			this.mc.loadingScreen.render();
+		}
+		else //always for vive, never for mono
+		{
+			if ((this.mc.theWorld != null && !this.mc.vrSettings.hideGui && this.mc.thePlayer.getSleepTimer() == 0) 
+					|| this.mc.currentScreen != null)
+			{
+								
+				//Render all UI elements into guiFBO
+				GL11.glClearColor(0, 0, 0, 0);
+				GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
+				GL11.glMatrixMode(GL11.GL_PROJECTION);
+				GL11.glLoadIdentity();
+				GL11.glOrtho(0.0D, var15.getScaledWidth_double(), var15.getScaledHeight_double(), 0.0D, 1000.0D, 3000.0D);
+				GL11.glMatrixMode(GL11.GL_MODELVIEW);
+				GL11.glLoadIdentity();
+				GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
+
+
+				if (this.mc.theWorld != null && this.mc.currentScreen != null)
+					this.inWorldGuiScreenShowingThisFrame = true; // In game menus will open at look forward orient, with no depth check applied
+				else
+					this.guiScreenShowingThisFrame = true;        // Hud elements will open at body forward orient, with depth check applied if necessary
+			}
+
+			if (this.guiScreenShowingThisFrame || this.inWorldGuiScreenShowingThisFrame)
+			{
+				// Display loading / progress window if necessary
+				if (this.mc.theWorld != null && !this.mc.vrSettings.hideGui /*&& !this.blankGUIUntilWorldValid*/)
+				{
+					/** MINECRIFT FORGE **/
+					// Disable any forge gui crosshairs and helmet overlay (pumkinblur)
+					if (Reflector.ForgeGuiIngame_renderCrosshairs.exists()) {
+						Reflector.ForgeGuiIngame_renderCrosshairs.setValue(false);
+						Reflector.ForgeGuiIngame_renderHelmet.setValue(false);
+					}
+					/** END MINECRIFT FORGE **/
+					//Draw in game HUD overlay
+					GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);
+
+					Object fmlCommonHandler = null;
+					if (Reflector.FMLCommonHandler_instance.exists()) {
+						fmlCommonHandler = Reflector.call(Reflector.FMLCommonHandler_instance, new Object[0]);
+					}
+					if (mc.stereoProvider.isStereo()) {
+						if (fmlCommonHandler != null) { // Not sure how this event is even useful, so we'll just fire it before binding the GUI framebuffer.
+							Reflector.callVoid(fmlCommonHandler, Reflector.FMLCommonHandler_onRenderTickStart, new Object[]{renderPartialTicks});
+						}
+					}
+					
+					//Render HUD elements
+					this.mc.ingameGUI.renderGameOverlay(renderPartialTicks, this.mc.currentScreen != null, 0, 0);
+
+					mc.guiAchievement.updateAchievementWindow();
+					/** MINECRIFT FORGE **/
+					if (mc.stereoProvider.isStereo()) {
+						if (fmlCommonHandler != null) {
+							Reflector.callVoid(fmlCommonHandler, Reflector.FMLCommonHandler_onRenderTickEnd, new Object[]{renderPartialTicks});		
+					}
+				
+						}
+
+					/** END MINECRIFT FORGE **/
+					GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
+				}
+
+				//        if (this.blankGUIUntilWorldValid) {
+				//            if (this.mc.theWorld != null)
+				//                this.blankGUIUntilWorldValid = false;
+				//        }
+
+				if (this.mc.currentScreen != null /*&& !this.blankGUIUntilWorldValid*/)
+				{
+
+					final int mouseX1 = mouseX = this.mc.currentScreen.getMouseX();
+					final int mouseY1 = mouseY = this.mc.currentScreen.getMouseY();
+
+					try
+					{
+						boolean drawScreenHandled = false;
+						if (Reflector.EventBus_post.exists())
+						{
+							drawScreenHandled = Reflector.postForgeBusEvent(Reflector.DrawScreenEvent_Pre_Constructor, new Object[] {this.mc.currentScreen, Integer.valueOf(mouseX), Integer.valueOf(mouseY), Float.valueOf(renderPartialTicks)});
+						}
+
+						if (!drawScreenHandled)
+						{
+							this.mc.currentScreen.drawScreen(mouseX, mouseY, renderPartialTicks);
+
+							if(mc.currentScreen !=null){ //wtf pixelmon?
+							
+							//	Draw GUI crosshair
+							if (mc.stereoProvider.isStereo()){					
+								if(MCOpenVR.controllerMouseValid){
+									mc.ingameGUI.drawMouseMenuQuad(mc.currentScreen.getMouseX(),mc.currentScreen.getMouseY())		;				
+								}
+
+							} else  mc.ingameGUI.drawMouseMenuQuad(mc.currentScreen.getMouseX(),mc.currentScreen.getMouseY())	;
+							}
+						}
+
+						Reflector.postForgeBusEvent(Reflector.DrawScreenEvent_Post_Constructor, new Object[] {this.mc.currentScreen, Integer.valueOf(mouseX), Integer.valueOf(mouseY), Float.valueOf(renderPartialTicks)});
+					}
+					catch (Throwable throwable)
+					{
+						CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Rendering screen");
+						CrashReportCategory crashreportcategory = crashreport.makeCategory("Screen render details");
+						crashreportcategory.addCrashSectionCallable("Screen name", new Callable() {
+							private static final String __OBFID = "CL_00000948";
+
+							public String call() {
+								return Minecraft.getMinecraft().currentScreen.getClass().getCanonicalName();
+							}
+						});
+						crashreportcategory.addCrashSectionCallable("Mouse location", new Callable() {
+							private static final String __OBFID = "CL_00000950";
+
+							public String call() {
+								return String.format("Scaled: (%d, %d). Absolute: (%d, %d)", new Object[]{Integer.valueOf(mouseX1), Integer.valueOf(mouseY1), Integer.valueOf(Mouse.getX()), Integer.valueOf(Mouse.getY())});
+							}
+						});
+						crashreportcategory.addCrashSectionCallable("Screen size", new Callable() {
+							private static final String __OBFID = "CL_00000951";
+
+							public String call() {
+								return String.format("Scaled: (%d, %d). Absolute: (%d, %d). Scale factor of %d", new Object[]{Integer.valueOf(var15.getScaledWidth()), Integer.valueOf(var15.getScaledHeight()), Integer.valueOf(Minecraft.getMinecraft().displayWidth), Integer.valueOf(Minecraft.getMinecraft().displayHeight), Integer.valueOf(var15.getScaleFactor())});
+							}
+						});
+						throw new ReportedException(crashreport);
+					}
+
+					GL11.glDisable(GL11.GL_LIGHTING); //inventory messes up fog color sometimes... This fixes
+					GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+
+				}
+			}
+		}
+
+		// VIVE added debug info to HUD
+		if (mc.gameSettings.showDebugInfo && mc.gameSettings.showDebugProfilerChart)
+		{
+			mc.displayDebugInfo(tickDuration);
+		}
+
+		//update mipmaps for Gui layer
+		this.mc.getFramebuffer().bindFramebufferTexture();
+		this.mc.getFramebuffer().genMipMaps();
+		this.mc.getFramebuffer().unbindFramebufferTexture();
+		
+	}
+
+
+	private void renderTeleportLine(OpenVRPlayer vrPlayer){
+		// VIVE START - render teleport line
+
+		boolean renderTeleportLine = vrPlayer.movementTeleportDestination.xCoord != 0
+				|| vrPlayer.movementTeleportDestination.yCoord != 0
+				|| vrPlayer.movementTeleportDestination.zCoord != 0;
+		if (renderTeleportLine && vrPlayer.movementTeleportProgress>0.0 && vrPlayer.vrMovementStyle.showBeam
+				)
+		{
+			mc.mcProfiler.startSection("teleportLine");
+
+			float alpha = 0.3f;
+			GL11.glColor4f(1.0f, 1.0f, 1.0f, alpha);
+			GL11.glDisable(GL11.GL_LIGHTING);
+			this.mc.getTextureManager().bindTexture(vrPlayer.vrMovementStyle.texture);
+			GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, GL11.GL_REPEAT);
+			GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL11.GL_REPEAT);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
+			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+			GL11.glDisable(GL11.GL_CULL_FACE);
+
+			Tessellator tes = Tessellator.instance;
+			tes.startDrawingQuads();
+
+			Vec3 start = mc.vrPlayer.getControllerOffhandDir_World();
+			start.xCoord -= interpolatedPlayerPos.xCoord;
+			start.yCoord -= interpolatedPlayerPos.yCoord;
+			start.zCoord -= interpolatedPlayerPos.zCoord;
+			//Vec3 start = Vec3.createVectorHelper(0.2, 0.5, 0);
+			Vec3 end = Vec3.createVectorHelper(vrPlayer.movementTeleportDestination.xCoord - interpolatedPlayerPos.xCoord,
+					vrPlayer.movementTeleportDestination.yCoord - interpolatedPlayerPos.yCoord,
+					vrPlayer.movementTeleportDestination.zCoord - interpolatedPlayerPos.zCoord);
+			Vec3 delta = start.subtract(end);
+			Vec3 forward = delta.normalize();
+			Vec3 up = Vec3.createVectorHelper(0,1,0);
+			Vec3 right = forward.crossProduct(up);
+			float distance = (float) delta.lengthVector();
+
+			float segmentLength = vrPlayer.vrMovementStyle.beamSegmentLength;
+			float segmentHalfWidth = vrPlayer.vrMovementStyle.beamHalfWidth;
+
+			int segments = (int) (distance / segmentLength);
+			if (vrPlayer.vrMovementStyle.beamGrow)
+			{
+				segments = (int) ((double) segments * vrPlayer.movementTeleportProgress);
+			}
+			segments++;
+
+			if (distance<1.5f)
+				segments = 0;
+
+			int textureVStrips = vrPlayer.vrMovementStyle.beamVStrips;
+			float textureVStripHeight = 1.0f / (float)textureVStrips;
+			Vec3 segmentOrigin = Vec3.createVectorHelper(0,0,0);
+			Vec3 BL = Vec3.createVectorHelper(0,0,0);
+			Vec3 BR = Vec3.createVectorHelper(0,0,0);
+			Vec3 SBL = Vec3.createVectorHelper(0,0,0);
+			Vec3 SBR = Vec3.createVectorHelper(0,0,0);
+
+			for (int i=0;i<segments;i++)
+			{
+				float segmentDistance = segmentLength * i;
+				segmentOrigin.xCoord = start.xCoord + forward.xCoord*segmentDistance;
+				segmentOrigin.yCoord = start.yCoord + forward.yCoord*segmentDistance;
+				segmentOrigin.zCoord = start.zCoord + forward.zCoord*segmentDistance;
+
+				float VOffset = (float) -this.mc.stereoProvider.getCurrentTimeSecs()*vrPlayer.vrMovementStyle.textureScrollSpeed;
+				VOffset += (i%textureVStrips)*textureVStripHeight;
+
+				if (i==0)
+				{
+					BL.xCoord = segmentOrigin.xCoord - right.xCoord * segmentHalfWidth;
+					BL.yCoord = segmentOrigin.yCoord - right.yCoord * segmentHalfWidth;
+					BL.zCoord = segmentOrigin.zCoord - right.zCoord * segmentHalfWidth;
+
+					BR.xCoord = segmentOrigin.xCoord + right.xCoord * segmentHalfWidth;
+					BR.yCoord = segmentOrigin.yCoord + right.yCoord * segmentHalfWidth;
+					BR.zCoord = segmentOrigin.zCoord + right.zCoord * segmentHalfWidth;
+
+					SBL.xCoord = segmentOrigin.xCoord - up.xCoord * segmentHalfWidth;
+					SBL.yCoord = segmentOrigin.yCoord - up.yCoord * segmentHalfWidth;
+					SBL.zCoord = segmentOrigin.zCoord - up.zCoord * segmentHalfWidth;
+
+					SBR.xCoord = segmentOrigin.xCoord + up.xCoord * segmentHalfWidth;
+					SBR.yCoord = segmentOrigin.yCoord + up.yCoord * segmentHalfWidth;
+					SBR.zCoord = segmentOrigin.zCoord + up.zCoord * segmentHalfWidth;
+				}
+
+				float progress = (float)(i+0.5f)/(float)segments;
+				if (vrPlayer.vrMovementStyle.beamArc)
+				{
+					float arcHeight = (float) Math.sin(progress * Math.PI) * 1.0f;
+					float arcRight = arcHeight * 0.15f;
+					Vec3 arc = Vec3.createVectorHelper(up.xCoord * arcHeight + right.xCoord * arcRight,
+							up.yCoord * arcHeight + right.yCoord * arcRight,
+							up.zCoord * arcHeight + right.zCoord * arcRight);
+					segmentOrigin.xCoord += arc.xCoord;
+					segmentOrigin.yCoord += arc.yCoord;
+					segmentOrigin.zCoord += arc.zCoord;
+				}
+
+				if (vrPlayer.vrMovementStyle.beamSpiral)
+				{
+					float angle = (float) ((segmentDistance / 2.0f) * 2 * Math.PI);
+					float spiralHeight = vrPlayer.vrMovementStyle.beamSpiralRadius;
+					float distanceLeft = distance - (segmentDistance + segmentLength);
+					if (distanceLeft < 3.0f)
+					{
+						spiralHeight *= (distanceLeft / 3.0f);
+					}
+
+					Vec3 spiral = Vec3.createVectorHelper(
+							up.xCoord * spiralHeight * (float) Math.sin(angle)
+							+ right.xCoord * spiralHeight * Math.cos(angle),
+							up.yCoord * spiralHeight * (float) Math.sin(angle)
+							+ right.yCoord * spiralHeight * Math.cos(angle),
+							up.zCoord * spiralHeight * (float) Math.sin(angle)
+							+ right.zCoord * spiralHeight * Math.cos(angle)
+							);
+					segmentOrigin.xCoord += spiral.xCoord;
+					segmentOrigin.yCoord += spiral.yCoord;
+					segmentOrigin.zCoord += spiral.zCoord;
+				}
+
+				if (vrPlayer.vrMovementStyle.beamWave)
+				{
+					float waveDistance = distance;//Math.min(6.0f, distance);
+					if (distance * vrPlayer.movementTeleportProgress < waveDistance)
+					{
+						float waveAmount = (float) Math.sin(segmentDistance * Math.PI * 2) * 0.1f;
+						waveAmount *= (1.0f - (distance * vrPlayer.movementTeleportProgress / waveDistance));
+						Vec3 wave = Vec3.createVectorHelper(right.xCoord * waveAmount,
+								right.yCoord * waveAmount,
+								right.zCoord * waveAmount);
+						segmentOrigin.xCoord += wave.xCoord;
+						segmentOrigin.yCoord += wave.yCoord;
+						segmentOrigin.zCoord += wave.zCoord;
+					}
+				}
+
+				Vec3 FL = segmentOrigin.addVector(forward.xCoord * segmentLength - right.xCoord * segmentHalfWidth,
+						forward.yCoord * segmentLength - right.yCoord * segmentHalfWidth,
+						forward.zCoord * segmentLength - right.zCoord * segmentHalfWidth);
+				Vec3 FR = segmentOrigin.addVector(forward.xCoord * segmentLength + right.xCoord * segmentHalfWidth,
+						forward.yCoord * segmentLength + right.yCoord * segmentHalfWidth,
+						forward.zCoord * segmentLength + right.zCoord * segmentHalfWidth);
+
+				tes.addVertexWithUV(BL.xCoord, BL.yCoord, BL.zCoord, 0, 0+VOffset);       // top
+				tes.addVertexWithUV(FL.xCoord, FL.yCoord, FL.zCoord, 0, textureVStripHeight+VOffset);
+				tes.addVertexWithUV(FR.xCoord, FR.yCoord, FR.zCoord, 1, textureVStripHeight+VOffset);
+				tes.addVertexWithUV(BR.xCoord, BR.yCoord, BR.zCoord, 1, 0+VOffset);
+
+				// render again at 90 degrees
+				Vec3 SFL = segmentOrigin.addVector(forward.xCoord * segmentLength - up.xCoord * segmentHalfWidth,
+						forward.yCoord * segmentLength - up.yCoord * segmentHalfWidth,
+						forward.zCoord * segmentLength - up.zCoord * segmentHalfWidth);
+				Vec3 SFR = segmentOrigin.addVector(forward.xCoord * segmentLength + up.xCoord * segmentHalfWidth,
+						forward.yCoord * segmentLength + up.yCoord * segmentHalfWidth,
+						forward.zCoord * segmentLength + up.zCoord * segmentHalfWidth);
+
+				if (vrPlayer.vrMovementStyle.renderVerticalStrip)
+				{
+					tes.addVertexWithUV(SBL.xCoord, SBL.yCoord, SBL.zCoord, 0, 0 + VOffset);       // top
+					tes.addVertexWithUV(SFL.xCoord, SFL.yCoord, SFL.zCoord, 0, textureVStripHeight + VOffset);
+					tes.addVertexWithUV(SFR.xCoord, SFR.yCoord, SFR.zCoord, 1, textureVStripHeight + VOffset);
+					tes.addVertexWithUV(SBR.xCoord, SBR.yCoord, SBR.zCoord, 1, 0 + VOffset);
+				}
+
+				BL=FL;
+				BR=FR;
+				SBL=SFL;
+				SBR=SFR;
+			}
+			tes.draw();
+
+			GL11.glEnable(GL11.GL_CULL_FACE);
+			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+
+			mc.mcProfiler.endSection(); // "teleportLine"	
+		}
+	}
+
+	public void renderCrosshairAtDepth()
+	{
+		//Draw crosshair
+		boolean renderCrosshair = this.mc.vrSettings.renderInGameCrosshairMode == VRSettings.RENDER_CROSSHAIR_MODE_ALWAYS ||
+				(this.mc.vrSettings.renderInGameCrosshairMode == VRSettings.RENDER_CROSSHAIR_MODE_HUD && !this.mc.vrSettings.hideGui);
+		
+		// VIVE start - don't render crosshair while teleporting
+		if (mc.vrPlayer.movementTeleportProgress>0.0f)
+		{
+			renderCrosshair = false;
+		}
+		// VIVE end
+		
+		if( this.mc.currentScreen == null && this.mc.gameSettings.thirdPersonView == 0 && renderCrosshair && !MCOpenVR.keyboardShowing && !mc.bowTracker.isDrawing)
+		{
+			this.mc.mcProfiler.endStartSection("crosshair");
+			GL11.glColor4f(1.0f, 1.0f, 1.0f, 1.0f); //white crosshair, with blending
+			float crossDepth =(float)crossVec.subtract(mc.roomScale.getControllerMainPos_World()).lengthVector();
+			if (crossDepth > MAX_CROSSHAIR_DISTANCE) crossDepth = MAX_CROSSHAIR_DISTANCE;
+			float depthscale = 0.4f + 0.6f*( (MAX_CROSSHAIR_DISTANCE - crossDepth) / MAX_CROSSHAIR_DISTANCE);
+			float scale = (float) (0.15f* this.mc.vrSettings.crosshairScale * Math.sqrt(mc.vrSettings.vrWorldScale));
+			scale/=(depthscale);
+			GL11.glPushMatrix();
+				GL11.glTranslatef(crossX, crossY, crossZ);
+				GL11.glRotatef(mc.vrPlayer.getControllerMainYaw_World(), 0.0F, 1.0F, 0.0F);
+				GL11.glRotatef(-mc.roomScale.getControllerMainPitch_World(), 1.0F, 0.0F, 0.0F);
+				if (this.mc.vrSettings.crosshairRollsWithHead)
+					GL11.glRotated(this.cameraRoll, 0.0F, 0.0F, 1.0F);
+				if (this.mc.vrSettings.crosshairScalesWithDistance)
+				{
+					// VIVE START - adjust depth scaling to handle far crosshair positions
+					scale = -0.05f;
+					GL11.glScalef(scale, scale, scale); // VIVE
+					// VIVE END - adjust depth scaling to handle far crosshair positions
+				}
+				else
+					GL11.glScalef(-scale, -scale, scale);
+				GL11.glDisable(GL11.GL_LIGHTING);
+				
+				if (!this.mc.vrSettings.useCrosshairOcclusion)	GL11.glDisable(GL11.GL_DEPTH_TEST);
+				GL11.glEnable(GL11.GL_BLEND);
+				
+				if (Reflector.forgeExists()) {
+					GL11.glBlendFunc(GL11.GL_ONE, GL11.GL_ONE);
+				}
+				else {
+					GL11.glBlendFunc(GL11.GL_ONE_MINUS_DST_COLOR, GL11.GL_ONE_MINUS_SRC_COLOR);
+				}
+								
+				if (mc.objectMouseOver == null) {
+
+					
+					GL11.glRotatef(45, 0, 0, 1);
+				}
+				
+				this.mc.getTextureManager().bindTexture(Gui.icons);
+				
+				GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, GL12.GL_CLAMP_TO_EDGE);
+				GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL12.GL_CLAMP_TO_EDGE);
+				GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
+				GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
+	
+				float var7 = 0.00390625F;
+				float var8 = 0.00390625F;
+				Tessellator.instance.startDrawingQuads();
+				Tessellator.instance.addVertexWithUV(- 1, + 1, 0,  0     , 15* var8);
+				Tessellator.instance.addVertexWithUV(+ 1, + 1, 0, 15*var7, 15* var8);
+				Tessellator.instance.addVertexWithUV(+ 1, - 1, 0, 15*var7, 0       );
+				Tessellator.instance.addVertexWithUV(- 1, - 1, 0, 0      , 0       );
+				Tessellator.instance.draw();
+				GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+				GL11.glDisable(GL11.GL_BLEND);
+				GL11.glEnable(GL11.GL_DEPTH_TEST);
+				GL11.glColor4f(1, 1, 1, 1);
+			GL11.glPopMatrix();
+		}
+
+
+	}
+
+	private void renderTeleportArc(OpenVRPlayer vrPlayer) {
+
+		if ( vrPlayer.vrMovementStyle.showBeam && vrPlayer.movementTeleportProgress > 0.0f
+				&& vrPlayer.movementTeleportArcSteps > 1)
+		{
+			mc.mcProfiler.startSection("teleportArc");
+
+		
+			GL11.glEnable(GL11.GL_BLEND);
+			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+			GL11.glDisable(GL11.GL_TEXTURE_2D);
+			GL11.glDisable(GL11.GL_LIGHTING);
+			GL11.glEnable(GL11.GL_DEPTH_TEST);
+
+			Tessellator tes = Tessellator.instance;
+			
+			tes.startDrawingQuads();
+
+				double VOffset = vrPlayer.lastTeleportArcDisplayOffset;
+	
+				boolean validLocation = (vrPlayer.movementTeleportDestination.xCoord != 0
+						|| vrPlayer.movementTeleportDestination.yCoord != 0
+						|| vrPlayer.movementTeleportDestination.zCoord != 0);
+	
+				int validLineR = 205;
+				int validLineG = 169;
+				int validLineB = 205;
+				if (!validLocation)
+				{
+					// invalid location
+					tes.setColorRGBA(83, 75, 83, 128);
+				}
+				else
+				{
+					tes.setColorRGBA(validLineR, validLineG, validLineB, 128);
+					VOffset = this.mc.stereoProvider.getCurrentTimeSecs()*vrPlayer.vrMovementStyle.textureScrollSpeed * 0.6;
+					vrPlayer.lastTeleportArcDisplayOffset = VOffset;
+				}
+	
+				float segmentHalfWidth = vrPlayer.vrMovementStyle.beamHalfWidth * 0.15f;
+				int segments = vrPlayer.movementTeleportArcSteps - 1;
+				if (vrPlayer.vrMovementStyle.beamGrow)
+				{
+					segments = (int) ((double) segments * vrPlayer.movementTeleportProgress);
+				}
+				double segmentProgress = 1.0 / (double) segments;
+	
+				Vec3 up = Vec3.createVectorHelper(0,1,0);
+	
+				for (int i=0;i<segments;i++)
+				{
+					double progress = ((double)i / (double)segments) + VOffset * segmentProgress;
+					int progressBase = (int)MathHelper.floor_double(progress);
+					progress -= (float) progressBase;
+	
+					Vec3 start = mc.vrPlayer.getInterpolatedArcPosition((float)(progress - segmentProgress * 0.4f));
+					start.xCoord -= interpolatedPlayerPos.xCoord;
+					start.yCoord -= interpolatedPlayerPos.yCoord;
+					start.zCoord -= interpolatedPlayerPos.zCoord;
+	
+					Vec3 end = mc.vrPlayer.getInterpolatedArcPosition((float)progress);
+					end.xCoord -= interpolatedPlayerPos.xCoord;
+					end.yCoord -= interpolatedPlayerPos.yCoord;
+					end.zCoord -= interpolatedPlayerPos.zCoord;
+	
+					float shift = (float)progress * 2.0f;
+					renderBox(tes, start, end, -segmentHalfWidth, segmentHalfWidth, (-1.0f + shift ) * segmentHalfWidth, (1.0f + shift) * segmentHalfWidth, up);
+				}
+				
+			tes.draw();
+
+			if (validLocation){ //draw landing splash
+				Vec3 circlePos = Vec3.createVectorHelper(vrPlayer.movementTeleportDestination.xCoord, vrPlayer.movementTeleportDestination.yCoord, vrPlayer.movementTeleportDestination.zCoord) ;
+
+				int side = 1; //vrPlayer.movementTeleportDestinationSideHit;
+
+				float o = 0.01f;
+
+				circlePos.xCoord -= interpolatedPlayerPos.xCoord;
+				circlePos.yCoord -= interpolatedPlayerPos.yCoord;
+				circlePos.zCoord -= interpolatedPlayerPos.zCoord;
+
+				if (side ==0)   circlePos.yCoord -= o;
+				if (side ==1)   circlePos.yCoord += o;
+				if (side ==2)   circlePos.zCoord -= o;
+				if (side ==3)   circlePos.zCoord += o;
+				if (side ==4)   circlePos.xCoord -= o;
+				if (side ==5)   circlePos.xCoord += o;						
+
+				renderCircle(circlePos, 0.2f, 32, validLineR, validLineG, validLineB, 64,side);
+				if (side ==0)   circlePos.yCoord -= o;
+				if (side ==1)   circlePos.yCoord += o;
+				if (side ==2)   circlePos.zCoord -= o;
+				if (side ==3)   circlePos.zCoord += o;
+				if (side ==4)   circlePos.xCoord -= o;
+				if (side ==5)   circlePos.xCoord += o;
+				renderCircle(circlePos, 0.15f, 32, validLineR, validLineG, validLineB, 128,side);
+				if (side ==0)   circlePos.yCoord -= o;
+				if (side ==1)   circlePos.yCoord += o;
+				if (side ==2)   circlePos.zCoord -= o;
+				if (side ==3)   circlePos.zCoord += o;
+				if (side ==4)   circlePos.xCoord -= o;
+				if (side ==5)   circlePos.xCoord += o;
+				renderCircle(circlePos, 0.1f, 32, validLineR, validLineG, validLineB, 128,side);
+			}
+
+			mc.mcProfiler.endSection(); // teleport arc
+		}
+	}
+
+	public Vector3f getViewAdjust(EyeType eye)
+	{
+		Vector3f viewAdjust = new Vector3f();
+		// VIVE START - had to remove negative in x viewadjust for this to be correct
+		viewAdjust.x = this.mc.vrSettings.getHalfIPD(eye);
+		viewAdjust.y = 1f;
+
+		return viewAdjust;
+	}
+
+	public Vec3 getCameraPos_Render(){
+		Vec3 out = mc.roomScale.getEyePos_World(mc.currentEye).subtract(mc.renderViewEntity.getPosition(1));
+		return out;
+	}
+	
+	public Vec3 getMainHandPos_Render(){
+		Vec3 out =  mc.roomScale.getControllerMainPos_World().subtract(mc.renderViewEntity.getPosition(1));
+		return out;
+	}
+	
+	public Vec3 getOffHandPos_Render(){
+		Vec3 out =  mc.roomScale.getControllerOffhandPos_World().subtract(mc.renderViewEntity.getPosition(1));
+		return out;
+	}
+	
+	public float getBaseEyeRelief()
+	{
+		return 0;//Math.abs(this.mc.eyeRenderParams.Eyes[EyeType.ovrEye_Left.value()].ViewAdjust.z);
+	}
+
+	
+	//please push your matrix first. and pop after.
+	public void SetupRenderingAtController(int controller){
+		Vec3 aimSource = getMainHandPos_Render();
+		if(controller == 1)aimSource= getOffHandPos_Render(); //TODO: cmon lazy.
+	
+		if (aimSource!=null)
+		{ //move from head to hand origin.
+				GL11.glTranslatef(
+					(float) (-aimSource.xCoord ),
+					(float) (-aimSource.yCoord ),
+					(float) (-aimSource.zCoord ));
+		}
+		
+			GL11.glScalef(mc.vrSettings.vrWorldScale , mc.vrSettings.vrWorldScale , mc.vrSettings.vrWorldScale );
+		
+    //    	Vector3f fore = new Vector3f(0,0,1);       
+   //     	Matrix4f rotation = this.mc.vrPlayer.get.getAimRotation(controller);  
+        	
+        	FloatBuffer buf = mc.roomScale.getControllerMatrix_World(controller);
+        	
+	    	if(!mc.bowTracker.isDrawing || controller == 0){ //doing this elsewhere
+	    		GL11.glMultMatrix(buf);      
+  	
+        	}     
+	}
+	
+	// VIVE START - render functions
+	public void renderLeftHand(float nano)
+	{
+
+		if (mc.thePlayer == null)
+			return;
+
+		mc.mcProfiler.startSection("renderLeftHand");
+
+	//	int handBrightness = mc.thePlayer.getBrightnessForRender(1.0f);
+	//	int var12 = handBrightness % 65536;
+	//	int var13 = handBrightness / 65536;
+	//	OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float) var12 / 1.0F, (float) var13 / 1.0F);
+
+		GL11.glLoadIdentity();
+	
+    	RenderHelper.enableStandardItemLighting();    
+		GL11.glEnable(GL11.GL_LIGHTING);
+		
+		GL11.glPushMatrix();
+
+			orientModelView(false,  false);	
+				
+			GL11.glPushMatrix();
+
+				SetupRenderingAtController(1);	//does not push
+
+				GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, GL12.GL_CLAMP_TO_EDGE);
+				GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL12.GL_CLAMP_TO_EDGE);
+				GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
+				GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
+		
+				mc.getTextureManager().bindTexture(mc.thePlayer.getLocationSkin());
+	
+				this.enableLightmap((double) nano);
+					
+					if(mc.bowTracker.isActive(mc.thePlayer)){ //render bow
+						int c = 1;
+						if (mc.vrSettings.vrReverseShootingEye) c = 0;
+						renderItemInFirstPersonForController(nano, c, mc.thePlayer.inventory.getCurrentItem());
+					}
+					else //just hand
+						renderItemInFirstPersonForController(nano, 1, null);
+					
+				this.disableLightmap((double) nano);
+			
+					//	TP energy
+				if (mc.vrSettings.vrLimitedSurvivalTeleport && !mc.vrPlayer.getFreeMoveMode() && mc.playerController.isNotCreative() && mc.vrPlayer.vrMovementStyle.arcAiming && !mc.bowTracker.isActive(mc.thePlayer)){
+					GL11.glPushMatrix();
+//							GL11.glRotatef(90, 0,0, 1f);
+						GL11.glTranslatef(0.0f,- 0.005f, .05f);
+			
+						GL11.glEnable(GL11.GL_BLEND);
+						GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+						GL11.glDisable(GL11.GL_TEXTURE_2D);
+			//			GL11.glDisable(GL11.GL_LIGHTING);
+			
+						Vec3 start = Vec3.createVectorHelper(0,0,0);
+			
+						float r;
+						float max = .015f;
+						if (mc.vrPlayer.movementTeleportProgress > 0 ) {      	
+							r = (float) ( mc.vrPlayer.getTeleportEnergy() - 4 * mc.vrPlayer.movementTeleportDistance  ) / 100 * max;
+						} else {     	
+							r = mc.vrPlayer.getTeleportEnergy() / 100 * max;
+						}
+			
+						if(r<0){r=0;}
+			
+						renderCircle(start.addVector(0, .05001, 0), r, 32, 255, 163, 255, 128, 1);
+						renderCircle(start.addVector(0, .05, 0), max, 32, 255, 163, 255, 50, 1);    
+			
+						GL11.glEnable(GL11.GL_TEXTURE_2D);
+						GL11.glDisable(GL11.GL_BLEND);
+			//			GL11.glEnable(GL11.GL_LIGHTING);
+					GL11.glPopMatrix();
+				}
+	
+				mc.mcProfiler.endSection();
+
+				GL11.glDisable(GL11.GL_LIGHTING);
+
+			GL11.glPopMatrix();//back to hmd rendering
+		
+				
+			if(!mc.vrPlayer.getFreeMoveMode()){
+				if(mc.vrPlayer.vrMovementStyle.arcAiming) {
+					renderTeleportArc(mc.vrPlayer);   	
+				} else {
+					renderTeleportLine(mc.vrPlayer); 	
+				}	   
+			}
+			
+	    	RenderHelper.disableStandardItemLighting();    
+			GL11.glDisable(GL11.GL_LIGHTING);
+				
+		GL11.glPopMatrix();
+	}
+
+	private void renderMainMenuHands()
+	{
+		GL11.glMatrixMode(GL11.GL_PROJECTION);
+		GL11.glPushMatrix();
+			GL11.glLoadIdentity();
+			if (this.mc.stereoProvider.isStereo())
+			{
+				GL11.glMultMatrix(eyeproj[mc.currentEye.value()]);
+			}
+			GL11.glMatrixMode(GL11.GL_MODELVIEW);
+			GL11.glPushMatrix();
+				GL11.glLoadIdentity();
+		
+				GL11.glDisable(GL11.GL_TEXTURE_2D);
+				GL11.glDisable(GL11.GL_ALPHA_TEST);
+				GL11.glDisable(GL11.GL_DEPTH_TEST);
+		
+				// counter head rotation
+
+				GL11.glMultMatrix(mc.roomScale.getHMDMatrix_World());
+
+				
+				//OK SO when world == null the origin is at your face.
+				
+				
+				Tessellator tes = Tessellator.instance;
+		
+				for (int c=0;c<2;c++)
+				{
+					tes.startDrawingQuads();
+		
+					tes.setColorRGBA(255 - 127 * c,255 - 127 * c,255 - 127 * c,255);
+					
+					Vec3 controllerPos = mc.roomScale.getEyePos_World(mc.currentEye).subtract(mc.roomScale.getControllerPos_World(c));
+					
+					GL11.glPushMatrix();
+						GL11.glTranslatef(
+								(float)controllerPos.xCoord,
+								(float)controllerPos.yCoord,
+								(float)controllerPos.zCoord);
+			
+			
+						Vec3 start = Vec3.createVectorHelper(0,0,0);
+			
+//						Matrix4f controllerRotation = mc.lookaimController.getAimRotation(c);
+//						Vector3f forward = new Vector3f(0,0,-0.17f);
+//						Vector3f dir = controllerRotation.transform(forward);
+						Vec3 dir = mc.roomScale.getControllerMainDir_World();
+						if(c==1) dir = mc.roomScale.getControllerOffhandDir_World();
+						Vec3 up = mc.roomScale.getCustomControllerVector(c, Vec3.createVectorHelper(0, 1, 0));
+				
+						Vec3 end = Vec3.createVectorHelper(
+								start.xCoord - dir.xCoord*.18,
+								start.yCoord - dir.yCoord*.18,
+								start.zCoord - dir.zCoord*.18);
+			
+						renderBox(tes, start, end, -0.02f, 0.02f, -0.025f, 0.00f, up);
+						tes.draw();
+					GL11.glPopMatrix();     
+				}
+		
+			
+				
+				GL11.glEnable(GL11.GL_TEXTURE_2D);
+
+			GL11.glPopMatrix();
+		GL11.glMatrixMode(GL11.GL_PROJECTION);
+	GL11.glPopMatrix();
+	}
+
+	private void renderBox(Tessellator tes, Vec3 start, Vec3 end, float minX, float maxX, float minY, float maxY, Vec3 up)
+	{
+		Vec3 forward = start.subtract(end).normalize();
+		Vec3 right = forward.crossProduct(up);
+		up = right.crossProduct(forward);
+
+		Vec3 left = Vec3.createVectorHelper(
+				right.xCoord * minX,
+				right.yCoord * minX,
+				right.zCoord * minX);
+
+		right.xCoord *= maxX;
+		right.yCoord *= maxX;
+		right.zCoord *= maxX;
+
+		Vec3 down = Vec3.createVectorHelper(
+				up.xCoord * minY,
+				up.yCoord * minY,
+				up.zCoord * minY);
+
+		up.xCoord *= maxY;
+		up.yCoord *= maxY;
+		up.zCoord *= maxY;
+
+		Vec3 backRightBottom    = start.addVector(   right.xCoord+down.xCoord,   right.yCoord+down.yCoord,   right.zCoord+down.zCoord);
+		Vec3 backRightTop       = start.addVector(   right.xCoord+up.xCoord,     right.yCoord+up.yCoord,     right.zCoord+up.zCoord);
+		Vec3 backLeftBottom     = start.addVector(   left.xCoord+down.xCoord,    left.yCoord+down.yCoord,    left.zCoord+down.zCoord);
+		Vec3 backLeftTop        = start.addVector(   left.xCoord+up.xCoord,      left.yCoord+up.yCoord,      left.zCoord+up.zCoord);
+		Vec3 frontRightBottom   = end.addVector(     right.xCoord+down.xCoord,   right.yCoord+down.yCoord,   right.zCoord+down.zCoord);
+		Vec3 frontRightTop      = end.addVector(     right.xCoord+up.xCoord,     right.yCoord+up.yCoord,     right.zCoord+up.zCoord);
+		Vec3 frontLeftBottom    = end.addVector(     left.xCoord+down.xCoord,    left.yCoord+down.yCoord,    left.zCoord+down.zCoord);
+		Vec3 frontLeftTop       = end.addVector(     left.xCoord+up.xCoord,      left.yCoord+up.yCoord,      left.zCoord+up.zCoord);
+
+		tes.addVertex(backRightBottom.xCoord, backRightBottom.yCoord, backRightBottom.zCoord);
+		tes.addVertex(backRightTop.xCoord, backRightTop.yCoord, backRightTop.zCoord);
+		tes.addVertex(backLeftTop.xCoord, backLeftTop.yCoord, backLeftTop.zCoord);
+		tes.addVertex(backLeftBottom.xCoord, backLeftBottom.yCoord, backLeftBottom.zCoord);    // back
+
+		tes.addVertex(frontLeftBottom.xCoord, frontLeftBottom.yCoord, frontLeftBottom.zCoord);   // front
+		tes.addVertex(frontLeftTop.xCoord, frontLeftTop.yCoord, frontLeftTop.zCoord);
+		tes.addVertex(frontRightTop.xCoord, frontRightTop.yCoord, frontRightTop.zCoord);
+		tes.addVertex(frontRightBottom.xCoord, frontRightBottom.yCoord, frontRightBottom.zCoord);
+
+		tes.addVertex(frontRightBottom.xCoord, frontRightBottom.yCoord, frontRightBottom.zCoord);    // right
+		tes.addVertex(frontRightTop.xCoord, frontRightTop.yCoord, frontRightTop.zCoord);
+		tes.addVertex(backRightTop.xCoord, backRightTop.yCoord, backRightTop.zCoord);
+		tes.addVertex(backRightBottom.xCoord, backRightBottom.yCoord, backRightBottom.zCoord);
+
+		tes.addVertex(backLeftBottom.xCoord, backLeftBottom.yCoord, backLeftBottom.zCoord); // left
+		tes.addVertex(backLeftTop.xCoord, backLeftTop.yCoord, backLeftTop.zCoord);
+		tes.addVertex(frontLeftTop.xCoord, frontLeftTop.yCoord, frontLeftTop.zCoord);
+		tes.addVertex(frontLeftBottom.xCoord, frontLeftBottom.yCoord, frontLeftBottom.zCoord);
+
+		tes.addVertex(backLeftTop.xCoord, backLeftTop.yCoord, backLeftTop.zCoord);
+		tes.addVertex(backRightTop.xCoord, backRightTop.yCoord, backRightTop.zCoord);
+		tes.addVertex(frontRightTop.xCoord, frontRightTop.yCoord, frontRightTop.zCoord);
+		tes.addVertex(frontLeftTop.xCoord, frontLeftTop.yCoord, frontLeftTop.zCoord);       // top
+
+		tes.addVertex(frontLeftBottom.xCoord, frontLeftBottom.yCoord, frontLeftBottom.zCoord);       // bottom
+		tes.addVertex(frontRightBottom.xCoord, frontRightBottom.yCoord, frontRightBottom.zCoord);
+		tes.addVertex(backRightBottom.xCoord, backRightBottom.yCoord, backRightBottom.zCoord);
+		tes.addVertex(backLeftBottom.xCoord, backLeftBottom.yCoord, backLeftBottom.zCoord);
+	}
+
+	public void renderCircle(Vec3 pos, float radius, int edges, int r, int g, int b, int a, int side)
+	{
+		Tessellator tes = Tessellator.instance;
+
+		boolean blend = GL11.glIsEnabled(GL11.GL_BLEND);
+		boolean tex =  GL11.glIsEnabled(GL11.GL_TEXTURE_2D);
+		boolean light =  GL11.glIsEnabled(GL11.GL_LIGHTING);
+		boolean cull =  GL11.glIsEnabled(GL11.GL_CULL_FACE);
+
+		GL11.glEnable(GL11.GL_BLEND);
+		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+		GL11.glDisable(GL11.GL_TEXTURE_2D);
+		GL11.glDisable(GL11.GL_LIGHTING);
+		GL11.glDisable(GL11.GL_CULL_FACE);
+
+		tes.startDrawing(GL11.GL_TRIANGLE_FAN);
+
+		tes.setColorRGBA(r, g, b, a);
+
+		tes.addVertex(pos.xCoord, pos.yCoord, pos.zCoord);
+
+		for (int i=0;i<edges + 1;i++)
+		{
+			float startAngle;
+			startAngle = ( (float) (i) / (float) edges ) * (float) Math.PI * 2.0f;
+
+			if (side == 0 || side == 1) { //y
+				float x = (float) pos.xCoord + (float) Math.cos(startAngle) * radius;
+				float y = (float) pos.yCoord;
+				float z = (float) pos.zCoord + (float) Math.sin(startAngle) * radius;
+				tes.addVertex(x, y, z);
+			} else if (side == 2 || side == 3) { //z
+				float x = (float) pos.xCoord + (float) Math.cos(startAngle) * radius;
+				float y = (float) pos.yCoord + (float) Math.sin(startAngle) * radius;
+				float z = (float) pos.zCoord; 
+				tes.addVertex(x, y, z);
+			} else if (side == 4 || side == 5){ //x
+				float x = (float) pos.xCoord ;
+				float y = (float) pos.yCoord + (float) Math.cos(startAngle) * radius;
+				float z = (float) pos.zCoord + (float) Math.sin(startAngle) * radius;
+				tes.addVertex(x, y, z);
+			} else{}
+
+		}
+
+		tes.draw();       
+
+		if(!blend){GL11.glDisable(GL11.GL_BLEND);}
+		if (tex){GL11.glEnable(GL11.GL_TEXTURE_2D);}
+		if(light){GL11.glEnable(GL11.GL_LIGHTING);}
+		if(cull){GL11.glEnable(GL11.GL_CULL_FACE);}
+	}
 
-            Project.gluPerspective(this.getFOVModifier(par1, false), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * 2.0F);
-
-            if (this.mc.playerController.enableEverythingIsScrewedUpMode())
-            {
-                float var4 = 0.6666667F;
-                GL11.glScalef(1.0F, var4, 1.0F);
-            }
-
-            GL11.glMatrixMode(GL11.GL_MODELVIEW);
-            GL11.glLoadIdentity();
-
-            if (this.mc.gameSettings.anaglyph)
-            {
-                GL11.glTranslatef((float)(par2 * 2 - 1) * 0.1F, 0.0F, 0.0F);
-            }
-
-            GL11.glPushMatrix();
-            this.hurtCameraEffect(par1);
-
-            if (this.mc.gameSettings.viewBobbing)
-            {
-                this.setupViewBobbing(par1);
-            }
-
-            if (this.mc.gameSettings.thirdPersonView == 0 && !this.mc.renderViewEntity.isPlayerSleeping() && !this.mc.gameSettings.hideGUI && !this.mc.playerController.enableEverythingIsScrewedUpMode())
-            {
-                this.enableLightmap((double)par1);
-                this.itemRenderer.renderItemInFirstPerson(par1);
-                this.disableLightmap((double)par1);
-            }
-
-            GL11.glPopMatrix();
-
-            if (this.mc.gameSettings.thirdPersonView == 0 && !this.mc.renderViewEntity.isPlayerSleeping())
-            {
-                this.itemRenderer.renderOverlays(par1);
-                this.hurtCameraEffect(par1);
-            }
-
-            if (this.mc.gameSettings.viewBobbing)
-            {
-                this.setupViewBobbing(par1);
-            }
-        }
-    }
-
-    /**
-     * Disable secondary texture unit used by lightmap
-     */
-    public void disableLightmap(double par1)
-    {
-        OpenGlHelper.setActiveTexture(OpenGlHelper.lightmapTexUnit);
-        GL11.glDisable(GL11.GL_TEXTURE_2D);
-        OpenGlHelper.setActiveTexture(OpenGlHelper.defaultTexUnit);
-    }
-
-    /**
-     * Enable lightmap in secondary texture unit
-     */
-    public void enableLightmap(double par1)
-    {
-        OpenGlHelper.setActiveTexture(OpenGlHelper.lightmapTexUnit);
-        GL11.glMatrixMode(GL11.GL_TEXTURE);
-        GL11.glLoadIdentity();
-        float var3 = 0.00390625F;
-        GL11.glScalef(var3, var3, var3);
-        GL11.glTranslatef(8.0F, 8.0F, 8.0F);
-        GL11.glMatrixMode(GL11.GL_MODELVIEW);
-        this.mc.getTextureManager().bindTexture(this.locationLightMap);
-        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
-        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
-        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, GL11.GL_CLAMP);
-        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL11.GL_CLAMP);
-        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-        GL11.glEnable(GL11.GL_TEXTURE_2D);
-        OpenGlHelper.setActiveTexture(OpenGlHelper.defaultTexUnit);
-    }
-
-    /**
-     * Recompute a random value that is applied to block color in updateLightmap()
-     */
-    private void updateTorchFlicker()
-    {
-        this.torchFlickerDX = (float)((double)this.torchFlickerDX + (Math.random() - Math.random()) * Math.random() * Math.random());
-        this.torchFlickerDY = (float)((double)this.torchFlickerDY + (Math.random() - Math.random()) * Math.random() * Math.random());
-        this.torchFlickerDX = (float)((double)this.torchFlickerDX * 0.9D);
-        this.torchFlickerDY = (float)((double)this.torchFlickerDY * 0.9D);
-        this.torchFlickerX += (this.torchFlickerDX - this.torchFlickerX) * 1.0F;
-        this.torchFlickerY += (this.torchFlickerDY - this.torchFlickerY) * 1.0F;
-        this.lightmapUpdateNeeded = true;
-    }
-
-    private void updateLightmap(float par1)
-    {
-        WorldClient var2 = this.mc.theWorld;
-
-        if (var2 != null)
-        {
-            if (CustomColorizer.updateLightmap(var2, this.torchFlickerX, this.lightmapColors, this.mc.thePlayer.isPotionActive(Potion.nightVision)))
-            {
-                this.lightmapTexture.updateDynamicTexture();
-                this.lightmapUpdateNeeded = false;
-                return;
-            }
-
-            for (int var3 = 0; var3 < 256; ++var3)
-            {
-                float var4 = var2.getSunBrightness(1.0F) * 0.95F + 0.05F;
-                float var5 = var2.provider.lightBrightnessTable[var3 / 16] * var4;
-                float var6 = var2.provider.lightBrightnessTable[var3 % 16] * (this.torchFlickerX * 0.1F + 1.5F);
-
-                if (var2.lastLightningBolt > 0)
-                {
-                    var5 = var2.provider.lightBrightnessTable[var3 / 16];
-                }
-
-                float var7 = var5 * (var2.getSunBrightness(1.0F) * 0.65F + 0.35F);
-                float var8 = var5 * (var2.getSunBrightness(1.0F) * 0.65F + 0.35F);
-                float var11 = var6 * ((var6 * 0.6F + 0.4F) * 0.6F + 0.4F);
-                float var12 = var6 * (var6 * var6 * 0.6F + 0.4F);
-                float var13 = var7 + var6;
-                float var14 = var8 + var11;
-                float var15 = var5 + var12;
-                var13 = var13 * 0.96F + 0.03F;
-                var14 = var14 * 0.96F + 0.03F;
-                var15 = var15 * 0.96F + 0.03F;
-                float var16;
-
-                if (this.bossColorModifier > 0.0F)
-                {
-                    var16 = this.bossColorModifierPrev + (this.bossColorModifier - this.bossColorModifierPrev) * par1;
-                    var13 = var13 * (1.0F - var16) + var13 * 0.7F * var16;
-                    var14 = var14 * (1.0F - var16) + var14 * 0.6F * var16;
-                    var15 = var15 * (1.0F - var16) + var15 * 0.6F * var16;
-                }
-
-                if (var2.provider.dimensionId == 1)
-                {
-                    var13 = 0.22F + var6 * 0.75F;
-                    var14 = 0.28F + var11 * 0.75F;
-                    var15 = 0.25F + var12 * 0.75F;
-                }
-
-                float var17;
-
-                if (this.mc.thePlayer.isPotionActive(Potion.nightVision))
-                {
-                    var16 = this.getNightVisionBrightness(this.mc.thePlayer, par1);
-                    var17 = 1.0F / var13;
-
-                    if (var17 > 1.0F / var14)
-                    {
-                        var17 = 1.0F / var14;
-                    }
-
-                    if (var17 > 1.0F / var15)
-                    {
-                        var17 = 1.0F / var15;
-                    }
-
-                    var13 = var13 * (1.0F - var16) + var13 * var17 * var16;
-                    var14 = var14 * (1.0F - var16) + var14 * var17 * var16;
-                    var15 = var15 * (1.0F - var16) + var15 * var17 * var16;
-                }
-
-                if (var13 > 1.0F)
-                {
-                    var13 = 1.0F;
-                }
-
-                if (var14 > 1.0F)
-                {
-                    var14 = 1.0F;
-                }
-
-                if (var15 > 1.0F)
-                {
-                    var15 = 1.0F;
-                }
-
-                var16 = this.mc.gameSettings.gammaSetting;
-                var17 = 1.0F - var13;
-                float var18 = 1.0F - var14;
-                float var19 = 1.0F - var15;
-                var17 = 1.0F - var17 * var17 * var17 * var17;
-                var18 = 1.0F - var18 * var18 * var18 * var18;
-                var19 = 1.0F - var19 * var19 * var19 * var19;
-                var13 = var13 * (1.0F - var16) + var17 * var16;
-                var14 = var14 * (1.0F - var16) + var18 * var16;
-                var15 = var15 * (1.0F - var16) + var19 * var16;
-                var13 = var13 * 0.96F + 0.03F;
-                var14 = var14 * 0.96F + 0.03F;
-                var15 = var15 * 0.96F + 0.03F;
-
-                if (var13 > 1.0F)
-                {
-                    var13 = 1.0F;
-                }
-
-                if (var14 > 1.0F)
-                {
-                    var14 = 1.0F;
-                }
-
-                if (var15 > 1.0F)
-                {
-                    var15 = 1.0F;
-                }
-
-                if (var13 < 0.0F)
-                {
-                    var13 = 0.0F;
-                }
-
-                if (var14 < 0.0F)
-                {
-                    var14 = 0.0F;
-                }
-
-                if (var15 < 0.0F)
-                {
-                    var15 = 0.0F;
-                }
-
-                short var20 = 255;
-                int var21 = (int)(var13 * 255.0F);
-                int var22 = (int)(var14 * 255.0F);
-                int var23 = (int)(var15 * 255.0F);
-                this.lightmapColors[var3] = var20 << 24 | var21 << 16 | var22 << 8 | var23;
-            }
-
-            this.lightmapTexture.updateDynamicTexture();
-            this.lightmapUpdateNeeded = false;
-        }
-    }
-
-    /**
-     * Gets the night vision brightness
-     */
-    private float getNightVisionBrightness(EntityPlayer par1EntityPlayer, float par2)
-    {
-        int var3 = par1EntityPlayer.getActivePotionEffect(Potion.nightVision).getDuration();
-        return var3 > 200 ? 1.0F : 0.7F + MathHelper.sin(((float)var3 - par2) * (float)Math.PI * 0.2F) * 0.3F;
-    }
-
-    /**
-     * Will update any inputs that effect the camera angle (mouse) and then render the world and GUI
-     */
-    public void updateCameraAndRender(float par1)
-    {
-        this.mc.mcProfiler.startSection("lightTex");
-
-        if (!this.initialized)
-        {
-            TextureUtils.registerResourceListener();
-            RenderPlayerOF.register();
-            ItemRendererOF world = new ItemRendererOF(this.mc);
-            this.itemRenderer = world;
-            RenderManager.instance.itemRenderer = world;
-
-            if (Config.getBitsOs() == 64 && Config.getBitsJre() == 32)
-            {
-                Config.setNotify64BitJava(true);
-            }
-
-            this.initialized = true;
-        }
-
-        Config.checkDisplayMode();
-        WorldClient world1 = this.mc.theWorld;
-
-        if (world1 != null)
-        {
-            if (Config.getNewRelease() != null)
-            {
-                String var2 = "HD_U".replace("HD_U", "HD Ultra").replace("L", "Light");
-                String var13 = var2 + " " + Config.getNewRelease();
-                ChatComponentText var14 = new ChatComponentText("A new \u00a7eOptiFine\u00a7f version is available: \u00a7e" + var13 + "\u00a7f");
-                this.mc.ingameGUI.getChatGUI().printChatMessage(var14);
-                Config.setNewRelease((String)null);
-            }
-
-            if (Config.isNotify64BitJava())
-            {
-                Config.setNotify64BitJava(false);
-                ChatComponentText var21 = new ChatComponentText(I18n.format("You can install \u00a7e64-bit Java\u00a7f to increase performance", new Object[0]));
-                this.mc.ingameGUI.getChatGUI().printChatMessage(var21);
-            }
-        }
-
-        if (this.mc.currentScreen instanceof GuiMainMenu)
-        {
-            this.updateMainMenu((GuiMainMenu)this.mc.currentScreen);
-        }
-
-        if (this.updatedWorld != world1)
-        {
-            RandomMobs.worldChanged(this.updatedWorld, world1);
-            Config.updateThreadPriorities();
-            this.lastServerTime = 0L;
-            this.lastServerTicks = 0;
-            this.updatedWorld = world1;
-        }
-
-        RenderBlocks.fancyGrass = Config.isGrassFancy() || Config.isBetterGrassFancy();
-        Blocks.leaves.setGraphicsLevel(Config.isTreesFancy());
-
-        if (this.lightmapUpdateNeeded)
-        {
-            this.updateLightmap(par1);
-        }
-
-        this.mc.mcProfiler.endSection();
-        boolean var22 = Display.isActive();
-
-        if (!var22 && this.mc.gameSettings.pauseOnLostFocus && (!this.mc.gameSettings.touchscreen || !Mouse.isButtonDown(1)))
-        {
-            if (Minecraft.getSystemTime() - this.prevFrameTime > 500L)
-            {
-                this.mc.displayInGameMenu();
-            }
-        }
-        else
-        {
-            this.prevFrameTime = Minecraft.getSystemTime();
-        }
-
-        this.mc.mcProfiler.startSection("mouse");
-
-        if (this.mc.inGameHasFocus && var22)
-        {
-            this.mc.mouseHelper.mouseXYChange();
-            float var132 = this.mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
-            float var141 = var132 * var132 * var132 * 8.0F;
-            float var15 = (float)this.mc.mouseHelper.deltaX * var141;
-            float var16 = (float)this.mc.mouseHelper.deltaY * var141;
-            byte var17 = 1;
-
-            if (this.mc.gameSettings.invertMouse)
-            {
-                var17 = -1;
-            }
-
-            if (this.mc.gameSettings.smoothCamera)
-            {
-                this.smoothCamYaw += var15;
-                this.smoothCamPitch += var16;
-                float var18 = par1 - this.smoothCamPartialTicks;
-                this.smoothCamPartialTicks = par1;
-                var15 = this.smoothCamFilterX * var18;
-                var16 = this.smoothCamFilterY * var18;
-                this.mc.thePlayer.setAngles(var15, var16 * (float)var17);
-            }
-            else
-            {
-                this.mc.thePlayer.setAngles(var15, var16 * (float)var17);
-            }
-        }
-
-        this.mc.mcProfiler.endSection();
-
-        if (!this.mc.skipRenderWorld)
-        {
-            anaglyphEnable = this.mc.gameSettings.anaglyph;
-            final ScaledResolution var133 = new ScaledResolution(this.mc, this.mc.displayWidth, this.mc.displayHeight);
-            int var142 = var133.getScaledWidth();
-            int var151 = var133.getScaledHeight();
-            final int var161 = Mouse.getX() * var142 / this.mc.displayWidth;
-            final int var171 = var151 - Mouse.getY() * var151 / this.mc.displayHeight - 1;
-            int var181 = this.mc.gameSettings.limitFramerate;
-            boolean var12;
-
-            if (this.mc.theWorld != null)
-            {
-                this.mc.mcProfiler.startSection("level");
-
-                if (this.mc.isFramerateLimitBelowMax())
-                {
-                    this.renderWorld(par1, this.renderEndNanoTime + (long)(1000000000 / var181));
-                }
-                else
-                {
-                    this.renderWorld(par1, 0L);
-                }
-
-                if (OpenGlHelper.shadersSupported)
-                {
-                    if (this.theShaderGroup != null)
-                    {
-                        GL11.glMatrixMode(GL11.GL_TEXTURE);
-                        GL11.glPushMatrix();
-                        GL11.glLoadIdentity();
-                        this.theShaderGroup.loadShaderGroup(par1);
-                        GL11.glPopMatrix();
-                    }
-
-                    this.mc.getFramebuffer().bindFramebuffer(true);
-                }
-
-                this.renderEndNanoTime = System.nanoTime();
-                this.mc.mcProfiler.endStartSection("gui");
-
-                if (!this.mc.gameSettings.hideGUI || this.mc.currentScreen != null)
-                {
-                    GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);
-                    var12 = this.mc.gameSettings.fancyGraphics;
-
-                    if (!Config.isVignetteEnabled())
-                    {
-                        this.mc.gameSettings.fancyGraphics = false;
-                    }
-
-                    this.mc.ingameGUI.renderGameOverlay(par1, this.mc.currentScreen != null, var161, var171);
-                    this.mc.gameSettings.fancyGraphics = var12;
-
-                    if (this.mc.gameSettings.ofShowFps && !this.mc.gameSettings.showDebugInfo)
-                    {
-                        Config.drawFps();
-                    }
-                }
-
-                this.mc.mcProfiler.endSection();
-            }
-            else
-            {
-                GL11.glViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
-                GL11.glMatrixMode(GL11.GL_PROJECTION);
-                GL11.glLoadIdentity();
-                GL11.glMatrixMode(GL11.GL_MODELVIEW);
-                GL11.glLoadIdentity();
-                this.setupOverlayRendering();
-                this.renderEndNanoTime = System.nanoTime();
-            }
-
-            if (this.mc.currentScreen != null)
-            {
-                GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
-
-                try
-                {
-                    var12 = false;
-
-                    if (Reflector.EventBus_post.exists())
-                    {
-                        var12 = Reflector.postForgeBusEvent(Reflector.DrawScreenEvent_Pre_Constructor, new Object[] {this.mc.currentScreen, Integer.valueOf(var161), Integer.valueOf(var171), Float.valueOf(par1)});
-                    }
-
-                    if (!var12)
-                    {
-                        this.mc.currentScreen.drawScreen(var161, var171, par1);
-                    }
-
-                    Reflector.postForgeBusEvent(Reflector.DrawScreenEvent_Post_Constructor, new Object[] {this.mc.currentScreen, Integer.valueOf(var161), Integer.valueOf(var171), Float.valueOf(par1)});
-                }
-                catch (Throwable var131)
-                {
-                    CrashReport var10 = CrashReport.makeCrashReport(var131, "Rendering screen");
-                    CrashReportCategory var11 = var10.makeCategory("Screen render details");
-                    var11.addCrashSectionCallable("Screen name", new Callable()
-                    {
-                        private static final String __OBFID = "CL_00000948";
-                        public String call()
-                        {
-                            return EntityRenderer.this.mc.currentScreen.getClass().getCanonicalName();
-                        }
-                    });
-                    var11.addCrashSectionCallable("Mouse location", new Callable()
-                    {
-                        private static final String __OBFID = "CL_00000950";
-                        public String call()
-                        {
-                            return String.format("Scaled: (%d, %d). Absolute: (%d, %d)", new Object[] {Integer.valueOf(var161), Integer.valueOf(var171), Integer.valueOf(Mouse.getX()), Integer.valueOf(Mouse.getY())});
-                        }
-                    });
-                    var11.addCrashSectionCallable("Screen size", new Callable()
-                    {
-                        private static final String __OBFID = "CL_00000951";
-                        public String call()
-                        {
-                            return String.format("Scaled: (%d, %d). Absolute: (%d, %d). Scale factor of %d", new Object[] {Integer.valueOf(var133.getScaledWidth()), Integer.valueOf(var133.getScaledHeight()), Integer.valueOf(EntityRenderer.this.mc.displayWidth), Integer.valueOf(EntityRenderer.this.mc.displayHeight), Integer.valueOf(var133.getScaleFactor())});
-                        }
-                    });
-                    throw new ReportedException(var10);
-                }
-            }
-        }
-
-        this.frameFinish();
-        this.waitForServerThread();
-
-        if (this.mc.gameSettings.showDebugInfo != this.lastShowDebugInfo)
-        {
-            this.showExtendedDebugInfo = this.mc.gameSettings.showDebugProfilerChart;
-            this.lastShowDebugInfo = this.mc.gameSettings.showDebugInfo;
-        }
-
-        if (this.mc.gameSettings.showDebugInfo)
-        {
-            this.showLagometer(this.mc.mcProfiler.timeTickNano, this.mc.mcProfiler.timeUpdateChunksNano);
-        }
-
-        if (this.mc.gameSettings.ofProfiler)
-        {
-            this.mc.gameSettings.showDebugProfilerChart = true;
-        }
-    }
-
-    public void func_152430_c(float p_152430_1_)
-    {
-        this.setupOverlayRendering();
-        ScaledResolution var2 = new ScaledResolution(this.mc, this.mc.displayWidth, this.mc.displayHeight);
-        int var3 = var2.getScaledWidth();
-        int var4 = var2.getScaledHeight();
-        this.mc.ingameGUI.renderStreamIndicator((float)var3, (float)var4);
-    }
-
-    public void renderWorld(float par1, long par2)
-    {
-        this.mc.mcProfiler.startSection("lightTex");
-
-        if (this.lightmapUpdateNeeded)
-        {
-            this.updateLightmap(par1);
-        }
-
-        GL11.glEnable(GL11.GL_CULL_FACE);
-        GL11.glEnable(GL11.GL_DEPTH_TEST);
-        GL11.glEnable(GL11.GL_ALPHA_TEST);
-        GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);
-
-        if (this.mc.renderViewEntity == null)
-        {
-            this.mc.renderViewEntity = this.mc.thePlayer;
-        }
-
-        this.mc.mcProfiler.endStartSection("pick");
-        this.getMouseOver(par1);
-        EntityLivingBase var4 = this.mc.renderViewEntity;
-        RenderGlobal var5 = this.mc.renderGlobal;
-        EffectRenderer var6 = this.mc.effectRenderer;
-        double var7 = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)par1;
-        double var9 = var4.lastTickPosY + (var4.posY - var4.lastTickPosY) * (double)par1;
-        double var11 = var4.lastTickPosZ + (var4.posZ - var4.lastTickPosZ) * (double)par1;
-        this.mc.mcProfiler.endStartSection("center");
-
-        for (int var13 = 0; var13 < 2; ++var13)
-        {
-            if (this.mc.gameSettings.anaglyph)
-            {
-                anaglyphField = var13;
-
-                if (anaglyphField == 0)
-                {
-                    GL11.glColorMask(false, true, true, false);
-                }
-                else
-                {
-                    GL11.glColorMask(true, false, false, false);
-                }
-            }
-
-            this.mc.mcProfiler.endStartSection("clear");
-            GL11.glViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
-            this.updateFogColor(par1);
-            GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
-            GL11.glEnable(GL11.GL_CULL_FACE);
-            this.mc.mcProfiler.endStartSection("camera");
-            this.setupCameraTransform(par1, var13);
-            ActiveRenderInfo.updateRenderInfo(this.mc.thePlayer, this.mc.gameSettings.thirdPersonView == 2);
-            this.mc.mcProfiler.endStartSection("frustrum");
-            ClippingHelperImpl.getInstance();
-
-            if (!Config.isSkyEnabled() && !Config.isSunMoonEnabled() && !Config.isStarsEnabled())
-            {
-                GL11.glDisable(GL11.GL_BLEND);
-            }
-            else
-            {
-                this.setupFog(-1, par1);
-                this.mc.mcProfiler.endStartSection("sky");
-                var5.renderSky(par1);
-            }
-
-            GL11.glEnable(GL11.GL_FOG);
-            this.setupFog(1, par1);
-
-            if (this.mc.gameSettings.ambientOcclusion != 0)
-            {
-                GL11.glShadeModel(GL11.GL_SMOOTH);
-            }
-
-            this.mc.mcProfiler.endStartSection("culling");
-            Frustrum var14 = new Frustrum();
-            var14.setPosition(var7, var9, var11);
-            this.mc.renderGlobal.clipRenderersByFrustum(var14, par1);
-
-            if (var13 == 0)
-            {
-                this.mc.mcProfiler.endStartSection("updatechunks");
-
-                while (!this.mc.renderGlobal.updateRenderers(var4, false) && par2 != 0L)
-                {
-                    long var17 = par2 - System.nanoTime();
-
-                    if (var17 < 0L || var17 > 1000000000L)
-                    {
-                        break;
-                    }
-                }
-            }
-
-            if (var4.posY < 128.0D)
-            {
-                this.renderCloudsCheck(var5, par1);
-            }
-
-            this.mc.mcProfiler.endStartSection("prepareterrain");
-            this.setupFog(0, par1);
-            GL11.glEnable(GL11.GL_FOG);
-            this.mc.getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
-            RenderHelper.disableStandardItemLighting();
-            this.mc.mcProfiler.endStartSection("terrain");
-            GL11.glMatrixMode(GL11.GL_MODELVIEW);
-            GL11.glPushMatrix();
-            var5.sortAndRender(var4, 0, (double)par1);
-            GL11.glShadeModel(GL11.GL_FLAT);
-            GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);
-            boolean hasForge = Reflector.ForgeHooksClient.exists();
-            EntityPlayer var18;
-
-            if (this.debugViewDirection == 0)
-            {
-                GL11.glMatrixMode(GL11.GL_MODELVIEW);
-                GL11.glPopMatrix();
-                GL11.glPushMatrix();
-                RenderHelper.enableStandardItemLighting();
-                this.mc.mcProfiler.endStartSection("entities");
-
-                if (hasForge)
-                {
-                    Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(0)});
-                }
-
-                var5.renderEntities(var4, var14, par1);
-
-                if (hasForge)
-                {
-                    Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(-1)});
-                }
-
-                RenderHelper.disableStandardItemLighting();
-                this.disableLightmap((double)par1);
-                GL11.glMatrixMode(GL11.GL_MODELVIEW);
-                GL11.glPopMatrix();
-                GL11.glPushMatrix();
-
-                if (this.mc.objectMouseOver != null && var4.isInsideOfMaterial(Material.water) && var4 instanceof EntityPlayer && !this.mc.gameSettings.hideGUI)
-                {
-                    var18 = (EntityPlayer)var4;
-                    GL11.glDisable(GL11.GL_ALPHA_TEST);
-                    this.mc.mcProfiler.endStartSection("outline");
-
-                    if ((!hasForge || !Reflector.callBoolean(Reflector.ForgeHooksClient_onDrawBlockHighlight, new Object[] {var5, var18, this.mc.objectMouseOver, Integer.valueOf(0), var18.inventory.getCurrentItem(), Float.valueOf(par1)})) && !this.mc.gameSettings.hideGUI)
-                    {
-                        var5.drawSelectionBox(var18, this.mc.objectMouseOver, 0, par1);
-                    }
-                    GL11.glEnable(GL11.GL_ALPHA_TEST);
-                }
-            }
-
-            GL11.glMatrixMode(GL11.GL_MODELVIEW);
-            GL11.glPopMatrix();
-
-            if (this.cameraZoom == 1.0D && var4 instanceof EntityPlayer && !this.mc.gameSettings.hideGUI && this.mc.objectMouseOver != null && !var4.isInsideOfMaterial(Material.water))
-            {
-                var18 = (EntityPlayer)var4;
-                GL11.glDisable(GL11.GL_ALPHA_TEST);
-                this.mc.mcProfiler.endStartSection("outline");
-
-                if ((!hasForge || !Reflector.callBoolean(Reflector.ForgeHooksClient_onDrawBlockHighlight, new Object[] {var5, var18, this.mc.objectMouseOver, Integer.valueOf(0), var18.inventory.getCurrentItem(), Float.valueOf(par1)})) && !this.mc.gameSettings.hideGUI)
-                {
-                    var5.drawSelectionBox(var18, this.mc.objectMouseOver, 0, par1);
-                }
-                GL11.glEnable(GL11.GL_ALPHA_TEST);
-            }
-
-            this.mc.mcProfiler.endStartSection("destroyProgress");
-            GL11.glEnable(GL11.GL_BLEND);
-            OpenGlHelper.glBlendFunc(770, 1, 1, 0);
-            var5.drawBlockDamageTexture(Tessellator.instance, var4, par1);
-            GL11.glDisable(GL11.GL_BLEND);
-
-            if (this.debugViewDirection == 0)
-            {
-                this.enableLightmap((double)par1);
-                this.mc.mcProfiler.endStartSection("litParticles");
-                var6.renderLitParticles(var4, par1);
-                RenderHelper.disableStandardItemLighting();
-                this.setupFog(0, par1);
-                this.mc.mcProfiler.endStartSection("particles");
-                var6.renderParticles(var4, par1);
-                this.disableLightmap((double)par1);
-            }
-
-            GL11.glDepthMask(false);
-            GL11.glEnable(GL11.GL_CULL_FACE);
-            this.mc.mcProfiler.endStartSection("weather");
-            this.renderRainSnow(par1);
-            GL11.glDepthMask(true);
-            GL11.glDisable(GL11.GL_BLEND);
-            GL11.glEnable(GL11.GL_CULL_FACE);
-            OpenGlHelper.glBlendFunc(770, 771, 1, 0);
-            GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);
-            this.setupFog(0, par1);
-            GL11.glEnable(GL11.GL_BLEND);
-            GL11.glDepthMask(false);
-            this.mc.getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
-            WrUpdates.resumeBackgroundUpdates();
-
-            if (Config.isWaterFancy())
-            {
-                this.mc.mcProfiler.endStartSection("water");
-
-                if (this.mc.gameSettings.ambientOcclusion != 0)
-                {
-                    GL11.glShadeModel(GL11.GL_SMOOTH);
-                }
-
-                GL11.glEnable(GL11.GL_BLEND);
-                OpenGlHelper.glBlendFunc(770, 771, 1, 0);
-
-                if (this.mc.gameSettings.anaglyph)
-                {
-                    if (anaglyphField == 0)
-                    {
-                        GL11.glColorMask(false, true, true, true);
-                    }
-                    else
-                    {
-                        GL11.glColorMask(true, false, false, true);
-                    }
-
-                    var5.renderAllSortedRenderers(1, (double)par1);
-                }
-                else
-                {
-                    var5.renderAllSortedRenderers(1, (double)par1);
-                }
-
-                GL11.glDisable(GL11.GL_BLEND);
-                GL11.glShadeModel(GL11.GL_FLAT);
-            }
-            else
-            {
-                this.mc.mcProfiler.endStartSection("water");
-                var5.renderAllSortedRenderers(1, (double)par1);
-            }
-
-            WrUpdates.pauseBackgroundUpdates();
-
-            if (hasForge && this.debugViewDirection == 0)
-            {
-                RenderHelper.enableStandardItemLighting();
-                this.mc.mcProfiler.endStartSection("entities");
-                Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(1)});
-                this.mc.renderGlobal.renderEntities(var4, var14, par1);
-                Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(-1)});
-                RenderHelper.disableStandardItemLighting();
-            }
-
-            GL11.glDepthMask(true);
-            GL11.glEnable(GL11.GL_CULL_FACE);
-            GL11.glDisable(GL11.GL_BLEND);
-            GL11.glDisable(GL11.GL_FOG);
-
-            if (var4.posY >= 128.0D + (double)(this.mc.gameSettings.ofCloudsHeight * 128.0F))
-            {
-                this.mc.mcProfiler.endStartSection("aboveClouds");
-                this.renderCloudsCheck(var5, par1);
-            }
-
-            if (hasForge)
-            {
-                this.mc.mcProfiler.endStartSection("FRenderLast");
-                Reflector.callVoid(Reflector.ForgeHooksClient_dispatchRenderLast, new Object[] {var5, Float.valueOf(par1)});
-            }
-
-            this.mc.mcProfiler.endStartSection("hand");
-            boolean renderFirstPersonHand = Reflector.callBoolean(Reflector.ForgeHooksClient_renderFirstPersonHand, new Object[] {this.mc.renderGlobal, Float.valueOf(par1), Integer.valueOf(var13)});
-
-            if (!renderFirstPersonHand && this.cameraZoom == 1.0D)
-            {
-                GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
-                this.renderHand(par1, var13);
-            }
-
-            if (!this.mc.gameSettings.anaglyph)
-            {
-                this.mc.mcProfiler.endSection();
-                return;
-            }
-        }
-
-        GL11.glColorMask(true, true, true, false);
-        this.mc.mcProfiler.endSection();
-    }
-
-    /**
-     * Render clouds if enabled
-     */
-    private void renderCloudsCheck(RenderGlobal par1RenderGlobal, float par2)
-    {
-        if (this.mc.gameSettings.shouldRenderClouds())
-        {
-            this.mc.mcProfiler.endStartSection("clouds");
-            GL11.glPushMatrix();
-            this.setupFog(0, par2);
-            GL11.glEnable(GL11.GL_FOG);
-            par1RenderGlobal.renderClouds(par2);
-            GL11.glDisable(GL11.GL_FOG);
-            this.setupFog(1, par2);
-            GL11.glPopMatrix();
-        }
-    }
-
-    private void addRainParticles()
-    {
-        float var1 = this.mc.theWorld.getRainStrength(1.0F);
-
-        if (!Config.isRainFancy())
-        {
-            var1 /= 2.0F;
-        }
-
-        if (var1 != 0.0F && Config.isRainSplash())
-        {
-            this.random.setSeed((long)this.rendererUpdateCount * 312987231L);
-            EntityLivingBase var2 = this.mc.renderViewEntity;
-            WorldClient var3 = this.mc.theWorld;
-            int var4 = MathHelper.floor_double(var2.posX);
-            int var5 = MathHelper.floor_double(var2.posY);
-            int var6 = MathHelper.floor_double(var2.posZ);
-            byte var7 = 10;
-            double var8 = 0.0D;
-            double var10 = 0.0D;
-            double var12 = 0.0D;
-            int var14 = 0;
-            int var15 = (int)(100.0F * var1 * var1);
-
-            if (this.mc.gameSettings.particleSetting == 1)
-            {
-                var15 >>= 1;
-            }
-            else if (this.mc.gameSettings.particleSetting == 2)
-            {
-                var15 = 0;
-            }
-
-            for (int var16 = 0; var16 < var15; ++var16)
-            {
-                int var17 = var4 + this.random.nextInt(var7) - this.random.nextInt(var7);
-                int var18 = var6 + this.random.nextInt(var7) - this.random.nextInt(var7);
-                int var19 = var3.getPrecipitationHeight(var17, var18);
-                Block var20 = var3.getBlock(var17, var19 - 1, var18);
-                BiomeGenBase var21 = var3.getBiomeGenForCoords(var17, var18);
-
-                if (var19 <= var5 + var7 && var19 >= var5 - var7 && var21.canSpawnLightningBolt() && var21.getFloatTemperature(var17, var19, var18) >= 0.15F)
-                {
-                    float var22 = this.random.nextFloat();
-                    float var23 = this.random.nextFloat();
-
-                    if (var20.getMaterial() == Material.lava)
-                    {
-                        this.mc.effectRenderer.addEffect(new EntitySmokeFX(var3, (double)((float)var17 + var22), (double)((float)var19 + 0.1F) - var20.getBlockBoundsMinY(), (double)((float)var18 + var23), 0.0D, 0.0D, 0.0D));
-                    }
-                    else if (var20.getMaterial() != Material.air)
-                    {
-                        ++var14;
-
-                        if (this.random.nextInt(var14) == 0)
-                        {
-                            var8 = (double)((float)var17 + var22);
-                            var10 = (double)((float)var19 + 0.1F) - var20.getBlockBoundsMinY();
-                            var12 = (double)((float)var18 + var23);
-                        }
-
-                        EntityRainFX fx = new EntityRainFX(var3, (double)((float)var17 + var22), (double)((float)var19 + 0.1F) - var20.getBlockBoundsMinY(), (double)((float)var18 + var23));
-                        CustomColorizer.updateWaterFX(fx, var3);
-                        this.mc.effectRenderer.addEffect(fx);
-                    }
-                }
-            }
-
-            if (var14 > 0 && this.random.nextInt(3) < this.rainSoundCounter++)
-            {
-                this.rainSoundCounter = 0;
-
-                if (var10 > var2.posY + 1.0D && var3.getPrecipitationHeight(MathHelper.floor_double(var2.posX), MathHelper.floor_double(var2.posZ)) > MathHelper.floor_double(var2.posY))
-                {
-                    this.mc.theWorld.playSound(var8, var10, var12, "ambient.weather.rain", 0.1F, 0.5F, false);
-                }
-                else
-                {
-                    this.mc.theWorld.playSound(var8, var10, var12, "ambient.weather.rain", 0.2F, 1.0F, false);
-                }
-            }
-        }
-    }
-
-    /**
-     * Render rain and snow
-     */
-    protected void renderRainSnow(float par1)
-    {
-        if (Reflector.ForgeWorldProvider_getWeatherRenderer.exists())
-        {
-            WorldProvider var2 = this.mc.theWorld.provider;
-            Object var41 = Reflector.call(var2, Reflector.ForgeWorldProvider_getWeatherRenderer, new Object[0]);
-
-            if (var41 != null)
-            {
-                Reflector.callVoid(var41, Reflector.IRenderHandler_render, new Object[] {Float.valueOf(par1), this.mc.theWorld, this.mc});
-                return;
-            }
-        }
-
-        float var411 = this.mc.theWorld.getRainStrength(par1);
-
-        if (var411 > 0.0F)
-        {
-            this.enableLightmap((double)par1);
-
-            if (this.rainXCoords == null)
-            {
-                this.rainXCoords = new float[1024];
-                this.rainYCoords = new float[1024];
-
-                for (int var421 = 0; var421 < 32; ++var421)
-                {
-                    for (int var42 = 0; var42 < 32; ++var42)
-                    {
-                        float var43 = (float)(var42 - 16);
-                        float var44 = (float)(var421 - 16);
-                        float var45 = MathHelper.sqrt_float(var43 * var43 + var44 * var44);
-                        this.rainXCoords[var421 << 5 | var42] = -var44 / var45;
-                        this.rainYCoords[var421 << 5 | var42] = var43 / var45;
-                    }
-                }
-            }
-
-            if (Config.isRainOff())
-            {
-                return;
-            }
-
-            EntityLivingBase var431 = this.mc.renderViewEntity;
-            WorldClient var441 = this.mc.theWorld;
-            int var451 = MathHelper.floor_double(var431.posX);
-            int var461 = MathHelper.floor_double(var431.posY);
-            int var471 = MathHelper.floor_double(var431.posZ);
-            Tessellator var8 = Tessellator.instance;
-            GL11.glDisable(GL11.GL_CULL_FACE);
-            GL11.glNormal3f(0.0F, 1.0F, 0.0F);
-            GL11.glEnable(GL11.GL_BLEND);
-            OpenGlHelper.glBlendFunc(770, 771, 1, 0);
-            GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);
-            double var9 = var431.lastTickPosX + (var431.posX - var431.lastTickPosX) * (double)par1;
-            double var11 = var431.lastTickPosY + (var431.posY - var431.lastTickPosY) * (double)par1;
-            double var13 = var431.lastTickPosZ + (var431.posZ - var431.lastTickPosZ) * (double)par1;
-            int var15 = MathHelper.floor_double(var11);
-            byte var16 = 5;
-
-            if (Config.isRainFancy())
-            {
-                var16 = 10;
-            }
-
-            boolean var17 = false;
-            byte var18 = -1;
-            float var19 = (float)this.rendererUpdateCount + par1;
-
-            if (Config.isRainFancy())
-            {
-                var16 = 10;
-            }
-
-            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-            var17 = false;
-
-            for (int var20 = var471 - var16; var20 <= var471 + var16; ++var20)
-            {
-                for (int var21 = var451 - var16; var21 <= var451 + var16; ++var21)
-                {
-                    int var22 = (var20 - var471 + 16) * 32 + var21 - var451 + 16;
-                    float var23 = this.rainXCoords[var22] * 0.5F;
-                    float var24 = this.rainYCoords[var22] * 0.5F;
-                    BiomeGenBase var25 = var441.getBiomeGenForCoords(var21, var20);
-
-                    if (var25.canSpawnLightningBolt() || var25.getEnableSnow())
-                    {
-                        int var26 = var441.getPrecipitationHeight(var21, var20);
-                        int var27 = var461 - var16;
-                        int var28 = var461 + var16;
-
-                        if (var27 < var26)
-                        {
-                            var27 = var26;
-                        }
-
-                        if (var28 < var26)
-                        {
-                            var28 = var26;
-                        }
-
-                        float var29 = 1.0F;
-                        int var30 = var26;
-
-                        if (var26 < var15)
-                        {
-                            var30 = var15;
-                        }
-
-                        if (var27 != var28)
-                        {
-                            this.random.setSeed((long)(var21 * var21 * 3121 + var21 * 45238971 ^ var20 * var20 * 418711 + var20 * 13761));
-                            float var31 = var25.getFloatTemperature(var21, var27, var20);
-                            float var32;
-                            double var35;
-
-                            if (var441.getWorldChunkManager().getTemperatureAtHeight(var31, var26) >= 0.15F)
-                            {
-                                if (var18 != 0)
-                                {
-                                    if (var18 >= 0)
-                                    {
-                                        var8.draw();
-                                    }
-
-                                    var18 = 0;
-                                    this.mc.getTextureManager().bindTexture(locationRainPng);
-                                    var8.startDrawingQuads();
-                                }
-
-                                var32 = ((float)(this.rendererUpdateCount + var21 * var21 * 3121 + var21 * 45238971 + var20 * var20 * 418711 + var20 * 13761 & 31) + par1) / 32.0F * (3.0F + this.random.nextFloat());
-                                double var46 = (double)((float)var21 + 0.5F) - var431.posX;
-                                var35 = (double)((float)var20 + 0.5F) - var431.posZ;
-                                float var47 = MathHelper.sqrt_double(var46 * var46 + var35 * var35) / (float)var16;
-                                float var38 = 1.0F;
-                                var8.setBrightness(var441.getLightBrightnessForSkyBlocks(var21, var30, var20, 0));
-                                var8.setColorRGBA_F(var38, var38, var38, ((1.0F - var47 * var47) * 0.5F + 0.5F) * var411);
-                                var8.setTranslation(-var9 * 1.0D, -var11 * 1.0D, -var13 * 1.0D);
-                                var8.addVertexWithUV((double)((float)var21 - var23) + 0.5D, (double)var27, (double)((float)var20 - var24) + 0.5D, (double)(0.0F * var29), (double)((float)var27 * var29 / 4.0F + var32 * var29));
-                                var8.addVertexWithUV((double)((float)var21 + var23) + 0.5D, (double)var27, (double)((float)var20 + var24) + 0.5D, (double)(1.0F * var29), (double)((float)var27 * var29 / 4.0F + var32 * var29));
-                                var8.addVertexWithUV((double)((float)var21 + var23) + 0.5D, (double)var28, (double)((float)var20 + var24) + 0.5D, (double)(1.0F * var29), (double)((float)var28 * var29 / 4.0F + var32 * var29));
-                                var8.addVertexWithUV((double)((float)var21 - var23) + 0.5D, (double)var28, (double)((float)var20 - var24) + 0.5D, (double)(0.0F * var29), (double)((float)var28 * var29 / 4.0F + var32 * var29));
-                                var8.setTranslation(0.0D, 0.0D, 0.0D);
-                            }
-                            else
-                            {
-                                if (var18 != 1)
-                                {
-                                    if (var18 >= 0)
-                                    {
-                                        var8.draw();
-                                    }
-
-                                    var18 = 1;
-                                    this.mc.getTextureManager().bindTexture(locationSnowPng);
-                                    var8.startDrawingQuads();
-                                }
-
-                                var32 = ((float)(this.rendererUpdateCount & 511) + par1) / 512.0F;
-                                float var48 = this.random.nextFloat() + var19 * 0.01F * (float)this.random.nextGaussian();
-                                float var34 = this.random.nextFloat() + var19 * (float)this.random.nextGaussian() * 0.001F;
-                                var35 = (double)((float)var21 + 0.5F) - var431.posX;
-                                double var49 = (double)((float)var20 + 0.5F) - var431.posZ;
-                                float var39 = MathHelper.sqrt_double(var35 * var35 + var49 * var49) / (float)var16;
-                                float var40 = 1.0F;
-                                var8.setBrightness((var441.getLightBrightnessForSkyBlocks(var21, var30, var20, 0) * 3 + 15728880) / 4);
-                                var8.setColorRGBA_F(var40, var40, var40, ((1.0F - var39 * var39) * 0.3F + 0.5F) * var411);
-                                var8.setTranslation(-var9 * 1.0D, -var11 * 1.0D, -var13 * 1.0D);
-                                var8.addVertexWithUV((double)((float)var21 - var23) + 0.5D, (double)var27, (double)((float)var20 - var24) + 0.5D, (double)(0.0F * var29 + var48), (double)((float)var27 * var29 / 4.0F + var32 * var29 + var34));
-                                var8.addVertexWithUV((double)((float)var21 + var23) + 0.5D, (double)var27, (double)((float)var20 + var24) + 0.5D, (double)(1.0F * var29 + var48), (double)((float)var27 * var29 / 4.0F + var32 * var29 + var34));
-                                var8.addVertexWithUV((double)((float)var21 + var23) + 0.5D, (double)var28, (double)((float)var20 + var24) + 0.5D, (double)(1.0F * var29 + var48), (double)((float)var28 * var29 / 4.0F + var32 * var29 + var34));
-                                var8.addVertexWithUV((double)((float)var21 - var23) + 0.5D, (double)var28, (double)((float)var20 - var24) + 0.5D, (double)(0.0F * var29 + var48), (double)((float)var28 * var29 / 4.0F + var32 * var29 + var34));
-                                var8.setTranslation(0.0D, 0.0D, 0.0D);
-                            }
-                        }
-                    }
-                }
-            }
-
-            if (var18 >= 0)
-            {
-                var8.draw();
-            }
-
-            GL11.glEnable(GL11.GL_CULL_FACE);
-            GL11.glDisable(GL11.GL_BLEND);
-            GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);
-            this.disableLightmap((double)par1);
-        }
-    }
-
-    /**
-     * Setup orthogonal projection for rendering GUI screen overlays
-     */
-    public void setupOverlayRendering()
-    {
-        ScaledResolution var1 = new ScaledResolution(this.mc, this.mc.displayWidth, this.mc.displayHeight);
-        GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
-        GL11.glMatrixMode(GL11.GL_PROJECTION);
-        GL11.glLoadIdentity();
-        GL11.glOrtho(0.0D, var1.getScaledWidth_double(), var1.getScaledHeight_double(), 0.0D, 1000.0D, 3000.0D);
-        GL11.glMatrixMode(GL11.GL_MODELVIEW);
-        GL11.glLoadIdentity();
-        GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
-    }
-
-    /**
-     * calculates fog and calls glClearColor
-     */
-    private void updateFogColor(float par1)
-    {
-        WorldClient var2 = this.mc.theWorld;
-        EntityLivingBase var3 = this.mc.renderViewEntity;
-        float var4 = 0.25F + 0.75F * (float)this.mc.gameSettings.renderDistanceChunks / 16.0F;
-        var4 = 1.0F - (float)Math.pow((double)var4, 0.25D);
-        Vec3 var5 = var2.getSkyColor(this.mc.renderViewEntity, par1);
-        var5 = CustomColorizer.getWorldSkyColor(var5, var2, this.mc.renderViewEntity, par1);
-        float var6 = (float)var5.xCoord;
-        float var7 = (float)var5.yCoord;
-        float var8 = (float)var5.zCoord;
-        Vec3 var9 = var2.getFogColor(par1);
-        var9 = CustomColorizer.getWorldFogColor(var9, var2, par1);
-        this.fogColorRed = (float)var9.xCoord;
-        this.fogColorGreen = (float)var9.yCoord;
-        this.fogColorBlue = (float)var9.zCoord;
-        float var11;
-
-        if (this.mc.gameSettings.renderDistanceChunks >= 4)
-        {
-            Vec3 var19 = MathHelper.sin(var2.getCelestialAngleRadians(par1)) > 0.0F ? Vec3.createVectorHelper(-1.0D, 0.0D, 0.0D) : Vec3.createVectorHelper(1.0D, 0.0D, 0.0D);
-            var11 = (float)var3.getLook(par1).dotProduct(var19);
-
-            if (var11 < 0.0F)
-            {
-                var11 = 0.0F;
-            }
-
-            if (var11 > 0.0F)
-            {
-                float[] var20 = var2.provider.calcSunriseSunsetColors(var2.getCelestialAngle(par1), par1);
-
-                if (var20 != null)
-                {
-                    var11 *= var20[3];
-                    this.fogColorRed = this.fogColorRed * (1.0F - var11) + var20[0] * var11;
-                    this.fogColorGreen = this.fogColorGreen * (1.0F - var11) + var20[1] * var11;
-                    this.fogColorBlue = this.fogColorBlue * (1.0F - var11) + var20[2] * var11;
-                }
-            }
-        }
-
-        this.fogColorRed += (var6 - this.fogColorRed) * var4;
-        this.fogColorGreen += (var7 - this.fogColorGreen) * var4;
-        this.fogColorBlue += (var8 - this.fogColorBlue) * var4;
-        float var191 = var2.getRainStrength(par1);
-        float var201;
-
-        if (var191 > 0.0F)
-        {
-            var11 = 1.0F - var191 * 0.5F;
-            var201 = 1.0F - var191 * 0.4F;
-            this.fogColorRed *= var11;
-            this.fogColorGreen *= var11;
-            this.fogColorBlue *= var201;
-        }
-
-        var11 = var2.getWeightedThunderStrength(par1);
-
-        if (var11 > 0.0F)
-        {
-            var201 = 1.0F - var11 * 0.5F;
-            this.fogColorRed *= var201;
-            this.fogColorGreen *= var201;
-            this.fogColorBlue *= var201;
-        }
-
-        Block var21 = ActiveRenderInfo.getBlockAtEntityViewpoint(this.mc.theWorld, var3, par1);
-        float var22;
-        Vec3 fogYFactor;
-
-        if (this.cloudFog)
-        {
-            fogYFactor = var2.getCloudColour(par1);
-            this.fogColorRed = (float)fogYFactor.xCoord;
-            this.fogColorGreen = (float)fogYFactor.yCoord;
-            this.fogColorBlue = (float)fogYFactor.zCoord;
-        }
-        else if (var21.getMaterial() == Material.water)
-        {
-            var22 = (float)EnchantmentHelper.getRespiration(var3) * 0.2F;
-            this.fogColorRed = 0.02F + var22;
-            this.fogColorGreen = 0.02F + var22;
-            this.fogColorBlue = 0.2F + var22;
-            fogYFactor = CustomColorizer.getUnderwaterColor(this.mc.theWorld, this.mc.renderViewEntity.posX, this.mc.renderViewEntity.posY + 1.0D, this.mc.renderViewEntity.posZ);
-
-            if (fogYFactor != null)
-            {
-                this.fogColorRed = (float)fogYFactor.xCoord;
-                this.fogColorGreen = (float)fogYFactor.yCoord;
-                this.fogColorBlue = (float)fogYFactor.zCoord;
-            }
-        }
-        else if (var21.getMaterial() == Material.lava)
-        {
-            this.fogColorRed = 0.6F;
-            this.fogColorGreen = 0.1F;
-            this.fogColorBlue = 0.0F;
-        }
-
-        var22 = this.fogColor2 + (this.fogColor1 - this.fogColor2) * par1;
-        this.fogColorRed *= var22;
-        this.fogColorGreen *= var22;
-        this.fogColorBlue *= var22;
-        double fogYFactor1 = var2.provider.getVoidFogYFactor();
-
-        if (!Config.isDepthFog())
-        {
-            fogYFactor1 = 1.0D;
-        }
-
-        double var14 = (var3.lastTickPosY + (var3.posY - var3.lastTickPosY) * (double)par1) * fogYFactor1;
-
-        if (var3.isPotionActive(Potion.blindness))
-        {
-            int var23 = var3.getActivePotionEffect(Potion.blindness).getDuration();
-
-            if (var23 < 20)
-            {
-                var14 *= (double)(1.0F - (float)var23 / 20.0F);
-            }
-            else
-            {
-                var14 = 0.0D;
-            }
-        }
-
-        if (var14 < 1.0D)
-        {
-            if (var14 < 0.0D)
-            {
-                var14 = 0.0D;
-            }
-
-            var14 *= var14;
-            this.fogColorRed = (float)((double)this.fogColorRed * var14);
-            this.fogColorGreen = (float)((double)this.fogColorGreen * var14);
-            this.fogColorBlue = (float)((double)this.fogColorBlue * var14);
-        }
-
-        float var231;
-
-        if (this.bossColorModifier > 0.0F)
-        {
-            var231 = this.bossColorModifierPrev + (this.bossColorModifier - this.bossColorModifierPrev) * par1;
-            this.fogColorRed = this.fogColorRed * (1.0F - var231) + this.fogColorRed * 0.7F * var231;
-            this.fogColorGreen = this.fogColorGreen * (1.0F - var231) + this.fogColorGreen * 0.6F * var231;
-            this.fogColorBlue = this.fogColorBlue * (1.0F - var231) + this.fogColorBlue * 0.6F * var231;
-        }
-
-        float var17;
-
-        if (var3.isPotionActive(Potion.nightVision))
-        {
-            var231 = this.getNightVisionBrightness(this.mc.thePlayer, par1);
-            var17 = 1.0F / this.fogColorRed;
-
-            if (var17 > 1.0F / this.fogColorGreen)
-            {
-                var17 = 1.0F / this.fogColorGreen;
-            }
-
-            if (var17 > 1.0F / this.fogColorBlue)
-            {
-                var17 = 1.0F / this.fogColorBlue;
-            }
-
-            this.fogColorRed = this.fogColorRed * (1.0F - var231) + this.fogColorRed * var17 * var231;
-            this.fogColorGreen = this.fogColorGreen * (1.0F - var231) + this.fogColorGreen * var17 * var231;
-            this.fogColorBlue = this.fogColorBlue * (1.0F - var231) + this.fogColorBlue * var17 * var231;
-        }
-
-        if (this.mc.gameSettings.anaglyph)
-        {
-            var231 = (this.fogColorRed * 30.0F + this.fogColorGreen * 59.0F + this.fogColorBlue * 11.0F) / 100.0F;
-            var17 = (this.fogColorRed * 30.0F + this.fogColorGreen * 70.0F) / 100.0F;
-            float event = (this.fogColorRed * 30.0F + this.fogColorBlue * 70.0F) / 100.0F;
-            this.fogColorRed = var231;
-            this.fogColorGreen = var17;
-            this.fogColorBlue = event;
-        }
-
-        if (Reflector.EntityViewRenderEvent_FogColors_Constructor.exists())
-        {
-            Object event1 = Reflector.newInstance(Reflector.EntityViewRenderEvent_FogColors_Constructor, new Object[] {this, var3, var21, Float.valueOf(par1), Float.valueOf(this.fogColorRed), Float.valueOf(this.fogColorGreen), Float.valueOf(this.fogColorBlue)});
-            Reflector.postForgeBusEvent(event1);
-            this.fogColorRed = Reflector.getFieldValueFloat(event1, Reflector.EntityViewRenderEvent_FogColors_red, this.fogColorRed);
-            this.fogColorGreen = Reflector.getFieldValueFloat(event1, Reflector.EntityViewRenderEvent_FogColors_green, this.fogColorGreen);
-            this.fogColorBlue = Reflector.getFieldValueFloat(event1, Reflector.EntityViewRenderEvent_FogColors_blue, this.fogColorBlue);
-        }
-
-        GL11.glClearColor(this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 0.0F);
-    }
-
-    /**
-     * Sets up the fog to be rendered. If the arg passed in is -1 the fog starts at 0 and goes to 80% of far plane
-     * distance and is used for sky rendering.
-     */
-    private void setupFog(int par1, float par2)
-    {
-        EntityLivingBase var3 = this.mc.renderViewEntity;
-        boolean var4 = false;
-        this.fogStandard = false;
-
-        if (var3 instanceof EntityPlayer)
-        {
-            var4 = ((EntityPlayer)var3).capabilities.isCreativeMode;
-        }
-
-        if (par1 == 999)
-        {
-            GL11.glFog(GL11.GL_FOG_COLOR, this.setFogColorBuffer(0.0F, 0.0F, 0.0F, 1.0F));
-            GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_LINEAR);
-            GL11.glFogf(GL11.GL_FOG_START, 0.0F);
-            GL11.glFogf(GL11.GL_FOG_END, 8.0F);
-
-            if (GLContext.getCapabilities().GL_NV_fog_distance)
-            {
-                GL11.glFogi(34138, 34139);
-            }
-
-            GL11.glFogf(GL11.GL_FOG_START, 0.0F);
-        }
-        else
-        {
-            GL11.glFog(GL11.GL_FOG_COLOR, this.setFogColorBuffer(this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 1.0F));
-            GL11.glNormal3f(0.0F, -1.0F, 0.0F);
-            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-            Block var5 = ActiveRenderInfo.getBlockAtEntityViewpoint(this.mc.theWorld, var3, par2);
-            Object event = Reflector.newInstance(Reflector.EntityViewRenderEvent_FogDensity_Constructor, new Object[] {this, var3, var5, Float.valueOf(par2), Float.valueOf(0.1F)});
-
-            if (Reflector.postForgeBusEvent(event))
-            {
-                float var10 = Reflector.getFieldValueFloat(event, Reflector.EntityViewRenderEvent_FogDensity_density, 0.0F);
-                GL11.glFogf(GL11.GL_FOG_DENSITY, var10);
-            }
-            else
-            {
-                float var6;
-
-                if (var3.isPotionActive(Potion.blindness))
-                {
-                    var6 = 5.0F;
-                    int var101 = var3.getActivePotionEffect(Potion.blindness).getDuration();
-
-                    if (var101 < 20)
-                    {
-                        var6 = 5.0F + (this.farPlaneDistance - 5.0F) * (1.0F - (float)var101 / 20.0F);
-                    }
-
-                    GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_LINEAR);
-
-                    if (par1 < 0)
-                    {
-                        GL11.glFogf(GL11.GL_FOG_START, 0.0F);
-                        GL11.glFogf(GL11.GL_FOG_END, var6 * 0.8F);
-                    }
-                    else
-                    {
-                        GL11.glFogf(GL11.GL_FOG_START, var6 * 0.25F);
-                        GL11.glFogf(GL11.GL_FOG_END, var6);
-                    }
-
-                    if (Config.isFogFancy())
-                    {
-                        GL11.glFogi(34138, 34139);
-                    }
-                }
-                else if (this.cloudFog)
-                {
-                    GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_EXP);
-                    GL11.glFogf(GL11.GL_FOG_DENSITY, 0.1F);
-                }
-                else if (var5.getMaterial() == Material.water)
-                {
-                    GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_EXP);
-
-                    if (var3.isPotionActive(Potion.waterBreathing))
-                    {
-                        GL11.glFogf(GL11.GL_FOG_DENSITY, 0.05F);
-                    }
-                    else
-                    {
-                        GL11.glFogf(GL11.GL_FOG_DENSITY, 0.1F - (float)EnchantmentHelper.getRespiration(var3) * 0.03F);
-                    }
-
-                    if (Config.isClearWater())
-                    {
-                        GL11.glFogf(GL11.GL_FOG_DENSITY, 0.02F);
-                    }
-                }
-                else if (var5.getMaterial() == Material.lava)
-                {
-                    GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_EXP);
-                    GL11.glFogf(GL11.GL_FOG_DENSITY, 2.0F);
-                }
-                else
-                {
-                    var6 = this.farPlaneDistance;
-                    this.fogStandard = true;
-
-                    if (Config.isDepthFog() && this.mc.theWorld.provider.getWorldHasVoidParticles() && !var4)
-                    {
-                        double var102 = (double)((var3.getBrightnessForRender(par2) & 15728640) >> 20) / 16.0D + (var3.lastTickPosY + (var3.posY - var3.lastTickPosY) * (double)par2 + 4.0D) / 32.0D;
-
-                        if (var102 < 1.0D)
-                        {
-                            if (var102 < 0.0D)
-                            {
-                                var102 = 0.0D;
-                            }
-
-                            var102 *= var102;
-                            float var9 = 100.0F * (float)var102;
-
-                            if (var9 < 5.0F)
-                            {
-                                var9 = 5.0F;
-                            }
-
-                            if (var6 > var9)
-                            {
-                                var6 = var9;
-                            }
-                        }
-                    }
-
-                    GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_LINEAR);
-
-                    if (par1 < 0)
-                    {
-                        GL11.glFogf(GL11.GL_FOG_START, 0.0F);
-                        GL11.glFogf(GL11.GL_FOG_END, var6);
-                    }
-                    else
-                    {
-                        GL11.glFogf(GL11.GL_FOG_START, var6 * Config.getFogStart());
-                        GL11.glFogf(GL11.GL_FOG_END, var6);
-                    }
-
-                    if (GLContext.getCapabilities().GL_NV_fog_distance)
-                    {
-                        if (Config.isFogFancy())
-                        {
-                            GL11.glFogi(34138, 34139);
-                        }
-
-                        if (Config.isFogFast())
-                        {
-                            GL11.glFogi(34138, 34140);
-                        }
-                    }
-
-                    if (this.mc.theWorld.provider.doesXZShowFog((int)var3.posX, (int)var3.posZ))
-                    {
-                        var6 = this.farPlaneDistance;
-                        GL11.glFogf(GL11.GL_FOG_START, var6 * 0.05F);
-                        GL11.glFogf(GL11.GL_FOG_END, var6);
-                    }
-
-                    Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.EntityViewRenderEvent_RenderFogEvent_Constructor, new Object[] {this, var3, var5, Float.valueOf(par2), Integer.valueOf(par1), Float.valueOf(var6)}));
-                }
-            }
-
-            GL11.glEnable(GL11.GL_COLOR_MATERIAL);
-            GL11.glColorMaterial(GL11.GL_FRONT, GL11.GL_AMBIENT);
-        }
-    }
-
-    /**
-     * Update and return fogColorBuffer with the RGBA values passed as arguments
-     */
-    private FloatBuffer setFogColorBuffer(float par1, float par2, float par3, float par4)
-    {
-        this.fogColorBuffer.clear();
-        this.fogColorBuffer.put(par1).put(par2).put(par3).put(par4);
-        this.fogColorBuffer.flip();
-        return this.fogColorBuffer;
-    }
-
-    public MapItemRenderer getMapItemRenderer()
-    {
-        return this.theMapItemRenderer;
-    }
-
-    private void waitForServerThread()
-    {
-        this.serverWaitTimeCurrent = 0;
-
-        if (!Config.isSmoothWorld())
-        {
-            this.lastServerTime = 0L;
-            this.lastServerTicks = 0;
-        }
-        else if (this.mc.getIntegratedServer() != null)
-        {
-            IntegratedServer srv = this.mc.getIntegratedServer();
-            boolean paused = this.mc.isGamePaused();
-
-            if (!paused && !(this.mc.currentScreen instanceof GuiDownloadTerrain))
-            {
-                if (this.serverWaitTime > 0)
-                {
-                    Config.sleep((long)this.serverWaitTime);
-                    this.serverWaitTimeCurrent = this.serverWaitTime;
-                }
-
-                long timeNow = System.nanoTime() / 1000000L;
-
-                if (this.lastServerTime != 0L && this.lastServerTicks != 0)
-                {
-                    long timeDiff = timeNow - this.lastServerTime;
-
-                    if (timeDiff < 0L)
-                    {
-                        this.lastServerTime = timeNow;
-                        timeDiff = 0L;
-                    }
-
-                    if (timeDiff >= 50L)
-                    {
-                        this.lastServerTime = timeNow;
-                        int ticks = srv.getTickCounter();
-                        int tickDiff = ticks - this.lastServerTicks;
-
-                        if (tickDiff < 0)
-                        {
-                            this.lastServerTicks = ticks;
-                            tickDiff = 0;
-                        }
-
-                        if (tickDiff < 1 && this.serverWaitTime < 100)
-                        {
-                            this.serverWaitTime += 2;
-                        }
-
-                        if (tickDiff > 1 && this.serverWaitTime > 0)
-                        {
-                            --this.serverWaitTime;
-                        }
-
-                        this.lastServerTicks = ticks;
-                    }
-                }
-                else
-                {
-                    this.lastServerTime = timeNow;
-                    this.lastServerTicks = srv.getTickCounter();
-                    this.avgServerTickDiff = 1.0F;
-                    this.avgServerTimeDiff = 50.0F;
-                }
-            }
-            else
-            {
-                if (this.mc.currentScreen instanceof GuiDownloadTerrain)
-                {
-                    Config.sleep(20L);
-                }
-
-                this.lastServerTime = 0L;
-                this.lastServerTicks = 0;
-            }
-        }
-    }
-
-    private void showLagometer(long tickTimeNano, long chunkTimeNano)
-    {
-        if (this.mc.gameSettings.ofLagometer || this.showExtendedDebugInfo)
-        {
-            if (this.prevFrameTimeNano == -1L)
-            {
-                this.prevFrameTimeNano = System.nanoTime();
-            }
-
-            long timeNowNano = System.nanoTime();
-            int currFrameIndex = this.numRecordedFrameTimes & this.frameTimes.length - 1;
-            this.tickTimes[currFrameIndex] = tickTimeNano;
-            this.chunkTimes[currFrameIndex] = chunkTimeNano;
-            this.serverTimes[currFrameIndex] = (long)this.serverWaitTimeCurrent;
-            this.frameTimes[currFrameIndex] = timeNowNano - this.prevFrameTimeNano;
-            ++this.numRecordedFrameTimes;
-            this.prevFrameTimeNano = timeNowNano;
-            GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
-            GL11.glMatrixMode(GL11.GL_PROJECTION);
-            GL11.glPushMatrix();
-            GL11.glEnable(GL11.GL_COLOR_MATERIAL);
-            GL11.glLoadIdentity();
-            GL11.glOrtho(0.0D, (double)this.mc.displayWidth, (double)this.mc.displayHeight, 0.0D, 1000.0D, 3000.0D);
-            GL11.glMatrixMode(GL11.GL_MODELVIEW);
-            GL11.glPushMatrix();
-            GL11.glLoadIdentity();
-            GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
-            GL11.glLineWidth(1.0F);
-            GL11.glDisable(GL11.GL_TEXTURE_2D);
-            Tessellator tessellator = Tessellator.instance;
-            tessellator.startDrawing(1);
-
-            for (int frameNum = 0; frameNum < this.frameTimes.length; ++frameNum)
-            {
-                int lum = (frameNum - this.numRecordedFrameTimes & this.frameTimes.length - 1) * 255 / this.frameTimes.length;
-                long heightFrame = this.frameTimes[frameNum] / 200000L;
-                float baseHeight = (float)this.mc.displayHeight;
-                tessellator.setColorOpaque_I(-16777216 + lum * 256);
-                tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight - (float)heightFrame + 0.5F), 0.0D);
-                tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + 0.5F), 0.0D);
-                baseHeight -= (float)heightFrame;
-                long heightTick = this.tickTimes[frameNum] / 200000L;
-                tessellator.setColorOpaque_I(-16777216 + lum * 65536 + lum * 256 + lum * 1);
-                tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + 0.5F), 0.0D);
-                tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + (float)heightTick + 0.5F), 0.0D);
-                baseHeight += (float)heightTick;
-                long heightChunk = this.chunkTimes[frameNum] / 200000L;
-                tessellator.setColorOpaque_I(-16777216 + lum * 65536);
-                tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + 0.5F), 0.0D);
-                tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + (float)heightChunk + 0.5F), 0.0D);
-                baseHeight += (float)heightChunk;
-                long srvTime = this.serverTimes[frameNum];
-
-                if (srvTime > 0L)
-                {
-                    long heightSrv = srvTime * 1000000L / 200000L;
-                    tessellator.setColorOpaque_I(-16777216 + lum * 1);
-                    tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + 0.5F), 0.0D);
-                    tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + (float)heightSrv + 0.5F), 0.0D);
-                }
-            }
-
-            tessellator.draw();
-            GL11.glMatrixMode(GL11.GL_PROJECTION);
-            GL11.glPopMatrix();
-            GL11.glMatrixMode(GL11.GL_MODELVIEW);
-            GL11.glPopMatrix();
-            GL11.glEnable(GL11.GL_TEXTURE_2D);
-        }
-    }
-
-    private void frameFinish()
-    {
-        if (this.mc.theWorld != null)
-        {
-            long now = System.currentTimeMillis();
-
-            if (now > this.lastErrorCheckTimeMs + 10000L)
-            {
-                this.lastErrorCheckTimeMs = now;
-                int err = GL11.glGetError();
-
-                if (err != 0)
-                {
-                    String text = GLU.gluErrorString(err);
-                    ChatComponentText msg = new ChatComponentText("\u00a7eOpenGL Error\u00a7f: " + err + " (" + text + ")");
-                    this.mc.ingameGUI.getChatGUI().printChatMessage(msg);
-                }
-            }
-        }
-    }
-
-    private void updateMainMenu(GuiMainMenu mainGui)
-    {
-        try
-        {
-            String e = null;
-            Calendar calendar = Calendar.getInstance();
-            calendar.setTime(new Date());
-            int day = calendar.get(5);
-            int month = calendar.get(2) + 1;
-
-            if (day == 8 && month == 4)
-            {
-                e = "Happy birthday, OptiFine!";
-            }
-
-            if (day == 14 && month == 8)
-            {
-                e = "Happy birthday, sp614x!";
-            }
-
-            if (e == null)
-            {
-                return;
-            }
-
-            Field[] fs = GuiMainMenu.class.getDeclaredFields();
-
-            for (int i = 0; i < fs.length; ++i)
-            {
-                if (fs[i].getType() == String.class)
-                {
-                    fs[i].setAccessible(true);
-                    fs[i].set(mainGui, e);
-                    break;
-                }
-            }
-        }
-        catch (Throwable var8)
-        {
-            ;
-        }
-    }
+	// VIVE END - render functions
 }
